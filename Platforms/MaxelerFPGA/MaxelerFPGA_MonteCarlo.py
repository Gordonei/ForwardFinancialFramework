'''
Created on 30 October 2012

'''
import os,time,subprocess,sys,time,math,ForwardFinancialFramework.Platforms.MulticoreCPU

class MaxelerFPGA_MonteCarlo(MulicoreCPU_MonteCarlo.MulticoreCPU_MonteCarlo):
  def __init__(self,derivative,paths,platform,reduce_underlyings=True):
    self.__init__(self,derivative,paths,platform,reduce_underlyings)
    self.solver_metadata["instances"] = self.platform.instances #Number of instances set by the platform
    self.solver_metadata["threads"] = 1 #Setting the number of threads used to be one
  
  def generate_identifier(self): return ["//%s.c Generated by Monte Carlo Maxeler Solver"%self.output_file_name]
  
  def generate(self,override=True):
    #Generate C Host Code using Multicore infrastructure
    MulticoreCPU_MonteCarlo.generate(self,override)
    
    #Generate Maxeler Kernel Code
    self.generate_kernel()
    
    #Generate Maxeler HW Builder Code
    self.generate_hw_builder()
    
    #Generate Maxeler Makefile
    self.generate_makefile()
  
  def generate_activity_thread(self):
    output_list = []
    
    return output_list
  
  def generate_libraries(self):
    output_list = ["//Libraries"]
    output_list.append("#define __STDC_FORMAT_MACROS")
    for u in self.utility_libraries: output_list.append("#include \"%s\";"%u)
    output_list.append("#include <MaxCompilerRT.h>;")
    
    return output_list
  
  def generate_kernel(self,overide=True):
    #Changing to code generation directory
    try:
      os.chdir("..")
      os.chdir(self.platform.platform_directory())
      
      #Checking that the source code for the derivative and underlying is present
      for u in self.underlying:
        if(not(os.path.exists("%s.java"%u.name))): raise IOError, ("missing the source code for the underlying - %s.java" % (u.name))
        if(not(os.path.exists("%s_parameters.java"%u.name))): raise IOError, ("missing the source code for the underlying parameter set - %s_parameters.java" % (u.name))
      for d in self.derivative:
        if(not(os.path.exists("%s.java"%d.name))): raise IOError, ("missing the source code for the derivative - %s.java" %  (d.name))
        if(not(os.path.exists("%s_parameters.java"%d.name))): raise IOError, ("missing the source code for the derivative parameter set - %s_parameters.java" %  (d.name))
      
      os.chdir(self.platform.root_directory)
      
    except:
      print "Maxeler Code directory doesn't exist!"
    
    os.chdir("bin")
    
  def generate_hw_builder(self): pass
  
  def generate_makefile(self): pass
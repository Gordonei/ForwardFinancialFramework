####################################################
#       Makefile ------- Thomas Chau 2013          #
#       Tested for MaxCompiler 2013.2.2            #
####################################################
# 1)    For SLiC interface only
#       If you are using MaxCompilerRT,
#       use maxfilecompile instead of sliccompile
#       and change LFLAGS -lslic to -lmaxcompilerrt
# 2)    This makefile depends on project-specific
#       settings defined in project's Makefile
# 3)    Usage: use project's makefile (navigate
#       to project's directory and use makefile there)
#

# ---- Common Configuration Defaults ----

NUMDEVICES ?= 1

# ---- Paths ----
ifndef $(MAXCOMPILER_BUILD_DIR)
	MAXCOMPILER_BUILD_DIR=.
endif
SIMMAXDIR=$(MAXCOMPILER_BUILD_DIR)/$(APP)_$(DFEModel)_DFE_SIM/results
DFEMAXDIR=$(MAXCOMPILER_BUILD_DIR)/$(APP)_$(DFEModel)_DFE/results
MAXELEROSDIR_SIM:=$(MAXCOMPILERDIR)/lib/maxeleros-sim

# ---- Source files ----
ENGINEFILES:= $(APP)_Kernel.maxj $(APP)_Manager.maxj
ENGINEFILES+= $(wildcard ../src/*.maxj)

CPUFILES:=../build/$(APP)_Host_Code.c

SRCS:= $(wildcard ../src/*option.c)
SRCS+= $(wildcard ../src/*underlying.c)
SRCS+=../src/gauss.c

OBJS:= $(SRCS:../src/%.c=%.o)

# ---- Compiler settings ----

# detect the language: do we have .cpp extensions?
ifneq ($(findstring cpp, $(CPUFILES)), )
    # language: C++
    CXX ?= icpc
    CPUCOMPILER = $(CXX)

    # Assuming CXX points to g++/c++ by default
    COMPILER_CFLAGS = -fopenmp
    OPT_FLAGS = -march=native -O3

    ifeq ($(CXX), icpc)
      COMPILER_CFLAGS = -openmp
      OPT_FLAGS = -xHost -O3
    endif
else
    # language: C
    CC ?= gcc
    CPUCOMPILER = $(CC)

    # Assuming CC points to gcc/cc by default
    COMPILER_CFLAGS = -std=c99 -fopenmp -lm -L$(MAXCOMPILERDIR)/lib/gcc/lib64
    OPT_FLAGS = -O3 #-march=native -O3

    ifeq ($(CC), icc)
      COMPILER_CFLAGS = -std=c99 -openmp
      OPT_FLAGS = -xHost -O3
    endif
endif


# ---- Command alias ----


MAXFILECOMPILE=maxfilecompile
SLICCOMPILE=sliccompile
MAXGUESSBUILDDIR=maxGuessBuildDir
MAXFILESTITCH=maxfilestitch
MAXJAVARUN=maxJavaRun
MAXJC=maxjc
MAXDEBUG=maxdebug
MAXRENDERGRAPHS=maxRenderGraphs
MAXCOMPILERSIM=maxcompilersim

MAXOS_HW=/opt/maxeler/maxeleros/lib/libmaxeleros.so
MAXOS_SIM=$(MAXELEROSDIR_SIM)/lib/libmaxeleros.so

JFLAGS=-cp $(MAXCOMPILERDIR)/lib/MaxCompiler.jar -1.6 -d .
CFLAGS= $(COMPILER_CFLAGS) $(OPT_FLAGS) -Wall -I${MAXCOMPILERDIR}/include -I${MAXCOMPILERDIR}/include/slic -I${MAXELEROSDIR}/include -D_XOPEN_SOURCE=600 -I../src -I$(DFEMAXDIR)
LFLAGS=-L${MAXCOMPILERDIR}/lib -L${MAXELEROSDIR}/lib -lmaxeleros -lslic -lm -lpthread

# Add this on the command line to pass to make when compiling
# Useful for debug/optimization flags
FP_t?=-DFP_t=float -DMULTICORE_CPU
EXTRA_CFLAGS?=$(FP_t)

ARGS?=4096 13 1000 1 4096 1000 113911177 1 0.1 100 1.0 1.0 100

# This is set in the gdbsim/gdbdfe targets
DEBUG_FLAGS?=-ggdb

ALL_FLAGS = $(CFLAGS) $(EXTRA_CFLAGS) $(DEBUG_FLAGS)
# ---- Default DFE ----
DFEID=/dev/maxeler0

# Files to remove on clean
TRASH=*~ ../src/*~ *.o 
#$(APP)_$(DFEModel)_DFE/scratch
DIST_TRASH=Maxfiles.h *.class *.o debug* *.dot *.png

help:
	@ echo "Current configuration:"
	@ echo "   Compiler       $(CC)":q!
	@ echo "   Optimizations  $(OPT_FLAGS)"
	@ echo "   MAXCOMPILERDIR $(MAXCOMPILERDIR)"
	@ echo ""
	@ echo "Available targets: "
	@ echo "   runsim   -- build and run design in simulation (requires MaxCompiler license)"
	@ echo "   stopsim  -- stop the currently running simulated device"
	@ echo "   build    -- build the design in hardware (requires MaxCompiler license)"
	@ echo "   run      -- run design in hardware (requires local access to a DFE)"
	@ echo "   debug    -- debug a simulation design using MaxDebug"
	@ echo "   debughw  -- debug a hardware design using MaxDebug (requires local access to DFE)"
	@ echo "   gdbsim, gdbdfe -- build CPU code with debug symbols"
	@ echo "   cleansim, cleandfe, clean -- clean executables for simulation, hardware or both"
	@ echo "   distcleansim, distcleanhw, distclean -- delete the entire sim, hw or both directories"
	@ echo "   help     -- print this help message"


all: runsim build

.PHONY: stopsim run cleansim cleandfe debug debughw

$(OBJS): $(SRCS)
	$(CPUCOMPILER) $(@:%.o=../src/%.c) $(ALL_FLAGS) -I../src -c -o $@

# ---- Simulation ----

$(SIMMAXDIR)/$(APP).max: $(ENGINEFILES)
	$(MAXJC) $(JFLAGS) $(ENGINEFILES)
	MAXAPPJCP=. MAXSOURCEDIRS='../src' $(MAXJAVARUN) -v -m 8192 $(MANAGER) DFEModel=$(DFEModel) maxFileName=$(APP) target='DFE_SIM' enableMPCX=$(MPCX)
	cp $(SIMMAXDIR)/$(APP).h $(SIMMAXDIR)/Maxfiles.h

$(APP)_sim.o: $(SIMMAXDIR)/$(APP).max
	$(SLICCOMPILE) $< $@

$(APP)_simc.o: $(CPUFILES) $(OBJS)
	$(CPUCOMPILER) $^ $(ALL_FLAGS) -I$(SIMMAXDIR) -D__SIM__ -DDESIGN_NAME=$(APP) -c -o $@

$(APP)_sim: $(APP)_sim.o $(APP)_simc.o gauss.o
	$(CPUCOMPILER) $(ALL_FLAGS) $^ $(LFLAGS) -o $@

runsim: $(APP)
	$(MAXCOMPILERSIM) -n $(USER)a -c$(DEVICENUM) -d$(NUMDEVICES) restart
	SLIC_CONF+="use_simulation=$(USER)a" LD_PRELOAD=$(MAXOS_SIM) ./$(APP)_sim $(ARGS) $(USER)a0:$(USER)a
	make stopsim

stopsim:
	$(MAXCOMPILERSIM) -n $(USER)a -c$(DEVICENUM) stop

gdbsim:
	DEBUG_FLAGS="-O0 -g" make $(APP)
	LD_PRELOAD=$(MAXOS_SIM) gdb --args $(APP) $(ARGS)

# ---- DFE ----

$(DFEMAXDIR)/$(APP).max: $(ENGINEFILES)
	$(MAXJC) $(JFLAGS) $(ENGINEFILES)
	MAXAPPJCP=. MAXSOURCEDIRS='../src' $(MAXJAVARUN) -v -m 8192 $(MANAGER) DFEModel=$(DFEModel) maxFileName=$(APP) target='DFE' enableMPCX=$(MPCX)
	cp $(DFEMAXDIR)/$(APP).h $(DFEMAXDIR)/Maxfiles.h
	cp $(DFEMAXDIR)/$(APP).max $(DFEMAXDIR)/$(APP).max.bak
	cp $(DFEMAXDIR)/$(APP).max.bak $(DFEMAXDIR)/$(APP).max

$(APP)_dfe.o: $(DFEMAXDIR)/$(APP).max
	$(SLICCOMPILE) $< $@

$(APP)_dfec.o: $(CPUFILES) $(OBJS)
	$(CPUCOMPILER) $^ $(ALL_FLAGS) -I$(DFEMAXDIR) -DDESIGN_NAME=$(APP) -c -o $@


$(APP): $(APP)_dfe.o $(APP)_dfec.o gauss.o
	$(CPUCOMPILER) $(ALL_FLAGS) $^ $(LFLAGS) -o $@

build: $(APP)

build-sw: $(APP)_dfec.o gauss.o
	$(CPUCOMPILER) $(ALL_FLAGS) $(APP)_dfe.o $^ $(LFLAGS) -o $(APP)

run:
	SLIC_CONF=$(SLIC_CONF) LD_PRELOAD=$(MAXOS_HW) ./${APP} $(ARGS)

gdbdfe:
	DEBUG_FLAGS="-O0 -g" make build
	LD_PRELOAD=$(MAXOS_HW) gdb --args $(APP) $(ARGS)

# ---- Clean ----

clean:
	rm -rf $(TRASH)

cleanbin: clean
	rm -f $(APP)

distcleansim: clean
	rm -rf $(DIST_TRASH) $(APP)_$(DFEModel)_DFE_SIM

distcleandfe: clean
	rm -rf $(DIST_TRASH) $(APP)_$(DFEModel)_DFE

distclean: distcleansim distcleandfe

# ---- Debug ----

debug:
	maxdebug -v -g $(APP)Graph -s $(APP)Graph -c -k $(KERNEL) -d $(USER)a0:$(USER)a $(SIMMAXDIR)/$(APP).max

debughw:
	maxdebug -v -g $(APP)Graph -s $(APP)Graph -c -k $(KERNEL) -d $(DFEID) $(DFEMAXDIR)/$(APP).max

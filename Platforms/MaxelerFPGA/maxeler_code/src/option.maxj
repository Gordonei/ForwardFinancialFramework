//package mc_solver_maxeler;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;

public class option extends KernelLib{
	//HWFloat doubleType = Kernel.hwFloat(11,53);
	String name = "option";

	protected option_parameters parameters;

	/*protected DFEVar delta_time;
	protected DFEVar carried_delta_time;
	protected DFEVar new_delta_time;*/

	protected DFEVar value;

	protected DFEVar enable;
	protected DFEVar carried_enable;
	protected DFEVar new_enable;

	//protected DFEVar temp_price;

	Kernel kernel;
	DFEVar path;
	DFEVar point;
	DFEVar delay;

	public option(MC_Solver_Maxeler_Base_Kernel kernel,DFEVar pp,DFEVar p,DFEVar d,DFEVar enable,option_parameters op) {
		super(kernel);
		this.kernel = kernel;
		this.point = pp;
		this.path = p;
		this.delay = d;
		this.enable = enable;

		//this.temp_price = temp_price;

		this.parameters = op;
	}

	public void path_init(){
		//carried_delta_time = ((MC_Solver_Maxeler_Base_Kernel)this.kernel).inputDoubleType.newInstance(((MC_Solver_Maxeler_Base_Kernel)this.kernel));

		//this.delta_time = this.point.eq(0) ? ((this.parameters.time_period)).cast(((MC_Solver_Maxeler_Base_Kernel)this.kernel).inputDoubleType) : this.carried_delta_time;
		}

	public void path(DFEVar temp_price,DFEVar time){
		//this.new_delta_time = this.parameters.time_period;
		//this.value = (this.point.eq(this.kernel.path_points-1)) ? this.payoff(temp_price) : this.kernel.constant.var(this.kernel.doubleType,0.0);
	}

	public void connect_path(boolean pipeline){
		//this.carried_delta_time <== ((MC_Solver_Maxeler_Base_Kernel)this.kernel).stream.offset(this.new_delta_time,-((MC_Solver_Maxeler_Base_Kernel)this.kernel).delay);
	}

	public DFEVar payoff(DFEVar end_price){
		return (this.parameters.call).eq(0) ? this.parameters.strike_price-end_price : end_price-this.parameters.strike_price;
	}

}

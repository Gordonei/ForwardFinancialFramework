//package mc_solver_maxeler;

import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.KernelMath;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Count.WrapMode;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.MathUtils;

public class GaussianBoxMuller extends KernelLib{
  
  private Kernel kernel;
  private CombinedTauswortheRNG u_rng,v_rng;
  private DFEVar rho;
  private boolean y_flag;
  
  private KernelMath.Range rangeU;
  
  public DFEVar x,y;
  
  public GaussianBoxMuller(Kernel kernel,DFEVar rho,CombinedTauswortheRNG u_rng,CombinedTauswortheRNG v_rng,boolean y_flag){
    super(kernel);
    
    this.u_rng = u_rng;
    this.v_rng = v_rng;
    
    this.rho = rho;
    this.y_flag = y_flag;
    
    this.rangeU = new KernelMath.Range(0.0, 1.0);
    this.createGBM();
  }
  
  public void createGBM(){
    DFEVar u,v,r,a;
    
    u = this.u_rng.__drandom32();
    v = this.v_rng.__drandom32();
    
    r = KernelMath.sqrt(-2*KernelMath.log(this.rangeU,u, Kernel.dfeFloat(8, 24)));
    a = v*this.constant.var(Kernel.dfeFloat(8, 24),2*Math.PI);

    this.x = r*KernelMath.cos(a);
    
    if(this.y_flag){
        DFEVar ty = r*KernelMath.sin(a);
        this.y = r*KernelMath.cos(a)*this.rho + KernelMath.sqrt((1-rho)*(1-rho))*ty;
    }
  }
  
}
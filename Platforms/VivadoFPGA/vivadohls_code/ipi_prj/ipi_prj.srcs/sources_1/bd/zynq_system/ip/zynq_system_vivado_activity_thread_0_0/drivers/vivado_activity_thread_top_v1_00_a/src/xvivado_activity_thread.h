// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

#ifndef XVIVADO_ACTIVITY_THREAD_H
#define XVIVADO_ACTIVITY_THREAD_H

#ifdef __cplusplus
extern "C" {
#endif

/***************************** Include Files *********************************/
#ifndef __linux__
#include "xil_types.h"
#include "xil_assert.h"
#include "xstatus.h"
#include "xil_io.h"
#else
#include <stdint.h>
#include <assert.h>
#include <dirent.h>
#include <fcntl.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/mman.h>
#include <unistd.h>
#include <stddef.h>
#endif
#include "xvivado_activity_thread_hw.h"

/**************************** Type Definitions ******************************/
#ifdef __linux__
typedef uint8_t u8;
typedef uint16_t u16;
typedef uint32_t u32;
#else
typedef struct {
    u16 DeviceId;
    u32 Core_io_BaseAddress;
} XVivado_activity_thread_Config;
#endif

typedef struct {
    u32 Core_io_BaseAddress;
    u32 IsReady;
} XVivado_activity_thread;

/***************** Macros (Inline Functions) Definitions *********************/
#ifndef __linux__
#define XVivado_activity_thread_WriteReg(BaseAddress, RegOffset, Data) \
    Xil_Out32((BaseAddress) + (RegOffset), (u32)(Data))
#define XVivado_activity_thread_ReadReg(BaseAddress, RegOffset) \
    Xil_In32((BaseAddress) + (RegOffset))
#else
#define XVivado_activity_thread_WriteReg(BaseAddress, RegOffset, Data) \
    *(volatile u32*)((BaseAddress) + (RegOffset)) = (u32)(Data)
#define XVivado_activity_thread_ReadReg(BaseAddress, RegOffset) \
    *(volatile u32*)((BaseAddress) + (RegOffset))

#define Xil_AssertVoid(expr)    assert(expr)
#define Xil_AssertNonvoid(expr) assert(expr)

#define XST_SUCCESS             0
#define XST_DEVICE_NOT_FOUND    2
#define XST_OPEN_DEVICE_FAILED  3
#define XIL_COMPONENT_IS_READY  1
#endif

/************************** Function Prototypes *****************************/
#ifndef __linux__
int XVivado_activity_thread_Initialize(XVivado_activity_thread *InstancePtr, u16 DeviceId);
XVivado_activity_thread_Config* XVivado_activity_thread_LookupConfig(u16 DeviceId);
int XVivado_activity_thread_CfgInitialize(XVivado_activity_thread *InstancePtr, XVivado_activity_thread_Config *ConfigPtr);
#else
int XVivado_activity_thread_Initialize(XVivado_activity_thread *InstancePtr, const char* InstanceName);
int XVivado_activity_thread_Release(XVivado_activity_thread *InstancePtr);
#endif

void XVivado_activity_thread_Start(XVivado_activity_thread *InstancePtr);
u32 XVivado_activity_thread_IsDone(XVivado_activity_thread *InstancePtr);
u32 XVivado_activity_thread_IsIdle(XVivado_activity_thread *InstancePtr);
u32 XVivado_activity_thread_IsReady(XVivado_activity_thread *InstancePtr);
void XVivado_activity_thread_EnableAutoRestart(XVivado_activity_thread *InstancePtr);
void XVivado_activity_thread_DisableAutoRestart(XVivado_activity_thread *InstancePtr);

void XVivado_activity_thread_SetThread_arg_thread_paths(XVivado_activity_thread *InstancePtr, u32 Data);
u32 XVivado_activity_thread_GetThread_arg_thread_paths(XVivado_activity_thread *InstancePtr);
u32 XVivado_activity_thread_GetThread_arg_path_points(XVivado_activity_thread *InstancePtr);
u32 XVivado_activity_thread_GetThread_arg_path_pointsVld(XVivado_activity_thread *InstancePtr);
u32 XVivado_activity_thread_GetThread_arg_thread_result(XVivado_activity_thread *InstancePtr);
u32 XVivado_activity_thread_GetThread_arg_thread_resultVld(XVivado_activity_thread *InstancePtr);
u32 XVivado_activity_thread_GetThread_arg_thread_result_sqrd(XVivado_activity_thread *InstancePtr);
u32 XVivado_activity_thread_GetThread_arg_thread_result_sqrdVld(XVivado_activity_thread *InstancePtr);
void XVivado_activity_thread_SetThread_arg_u_a_0_rfir(XVivado_activity_thread *InstancePtr, u32 Data);
u32 XVivado_activity_thread_GetThread_arg_u_a_0_rfir(XVivado_activity_thread *InstancePtr);
void XVivado_activity_thread_SetThread_arg_u_a_0_current_price(XVivado_activity_thread *InstancePtr, u32 Data);
u32 XVivado_activity_thread_GetThread_arg_u_a_0_current_price(XVivado_activity_thread *InstancePtr);
void XVivado_activity_thread_SetThread_arg_o_a_0_strike_price(XVivado_activity_thread *InstancePtr, u32 Data);
u32 XVivado_activity_thread_GetThread_arg_o_a_0_strike_price(XVivado_activity_thread *InstancePtr);
void XVivado_activity_thread_SetThread_arg_o_a_0_time_period(XVivado_activity_thread *InstancePtr, u32 Data);
u32 XVivado_activity_thread_GetThread_arg_o_a_0_time_period(XVivado_activity_thread *InstancePtr);
void XVivado_activity_thread_SetThread_arg_o_a_0_call(XVivado_activity_thread *InstancePtr, u32 Data);
u32 XVivado_activity_thread_GetThread_arg_o_a_0_call(XVivado_activity_thread *InstancePtr);

void XVivado_activity_thread_InterruptGlobalEnable(XVivado_activity_thread *InstancePtr);
void XVivado_activity_thread_InterruptGlobalDisable(XVivado_activity_thread *InstancePtr);
void XVivado_activity_thread_InterruptEnable(XVivado_activity_thread *InstancePtr, u32 Mask);
void XVivado_activity_thread_InterruptDisable(XVivado_activity_thread *InstancePtr, u32 Mask);
void XVivado_activity_thread_InterruptClear(XVivado_activity_thread *InstancePtr, u32 Mask);
u32 XVivado_activity_thread_InterruptGetEnabled(XVivado_activity_thread *InstancePtr);
u32 XVivado_activity_thread_InterruptGetStatus(XVivado_activity_thread *InstancePtr);

#ifdef __cplusplus
}
#endif

#endif

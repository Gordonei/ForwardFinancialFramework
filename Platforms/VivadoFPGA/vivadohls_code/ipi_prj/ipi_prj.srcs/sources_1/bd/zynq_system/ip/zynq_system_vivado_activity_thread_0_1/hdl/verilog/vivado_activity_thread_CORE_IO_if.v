// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module vivado_activity_thread_CORE_IO_if
#(parameter
    C_ADDR_WIDTH = 8,
    C_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                      ACLK,
    input  wire                      ARESETN,
    input  wire [C_ADDR_WIDTH-1:0]   AWADDR,
    input  wire                      AWVALID,
    output wire                      AWREADY,
    input  wire [C_DATA_WIDTH-1:0]   WDATA,
    input  wire [C_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                      WVALID,
    output wire                      WREADY,
    output wire [1:0]                BRESP,
    output wire                      BVALID,
    input  wire                      BREADY,
    input  wire [C_ADDR_WIDTH-1:0]   ARADDR,
    input  wire                      ARVALID,
    output wire                      ARREADY,
    output wire [C_DATA_WIDTH-1:0]   RDATA,
    output wire [1:0]                RRESP,
    output wire                      RVALID,
    input  wire                      RREADY,
    output wire                      interrupt,
    // user signals
    output wire [31:0]               I_kernel_u_a_0_rfir,
    output wire [31:0]               I_kernel_u_a_0_current_price,
    output wire [31:0]               I_kernel_u_a_0_volatility,
    output wire [31:0]               I_kernel_u_a_0_initial_volatility,
    output wire [31:0]               I_kernel_u_a_0_volatility_volatility,
    output wire [31:0]               I_kernel_u_a_0_rho,
    output wire [31:0]               I_kernel_u_a_0_kappa,
    output wire [31:0]               I_kernel_u_a_0_theta,
    output wire [31:0]               I_kernel_u_a_0_correlation_matrix_0_0,
    output wire [31:0]               I_kernel_u_a_0_correlation_matrix_0_1,
    output wire [31:0]               I_kernel_u_a_0_correlation_matrix_1_0,
    output wire [31:0]               I_kernel_u_a_0_correlation_matrix_1_1,
    output wire [31:0]               I_kernel_o_a_0_second_barrier,
    output wire [31:0]               I_kernel_o_a_0_barrier,
    output wire [31:0]               I_kernel_o_a_0_out,
    output wire [31:0]               I_kernel_o_a_0_down,
    output wire [31:0]               I_kernel_o_a_0_strike_price,
    output wire [31:0]               I_kernel_o_a_0_time_period,
    output wire [31:0]               I_kernel_o_a_0_call,
    output wire [31:0]               I_kernel_o_a_0_points,
    output wire [31:0]               I_seed_0_s1,
    output wire [31:0]               I_seed_0_s2,
    output wire [31:0]               I_seed_0_s3,
    output wire [31:0]               I_seed_0_offset,
    input  wire [31:0]               O_thread_result_0,
    input  wire                      O_thread_result_0_ap_vld,
    input  wire [31:0]               O_thread_result_sqrd_0,
    input  wire                      O_thread_result_sqrd_0_ap_vld,
    output wire                      I_ap_start,
    input  wire                      O_ap_ready,
    input  wire                      O_ap_done,
    input  wire                      O_ap_idle
);
//------------------------Address Info-------------------
// 0x00 : Control signals
//        bit 0  - ap_start (Read/Write/COH)
//        bit 1  - ap_done (Read/COR)
//        bit 2  - ap_idle (Read)
//        bit 3  - ap_ready (Read)
//        bit 7  - auto_restart (Read/Write)
//        others - reserved
// 0x04 : Global Interrupt Enable Register
//        bit 0  - Global Interrupt Enable (Read/Write)
//        others - reserved
// 0x08 : IP Interrupt Enable Register (Read/Write)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x0c : IP Interrupt Status Register (Read/TOW)
//        bit 0  - Channel 0 (ap_done)
//        bit 1  - Channel 1 (ap_ready)
//        others - reserved
// 0x10 : reserved
// 0x14 : Data signal of kernel_u_a_0_rfir
//        bit 31~0 - kernel_u_a_0_rfir[31:0] (Read/Write)
// 0x18 : reserved
// 0x1c : Data signal of kernel_u_a_0_current_price
//        bit 31~0 - kernel_u_a_0_current_price[31:0] (Read/Write)
// 0x20 : reserved
// 0x24 : Data signal of kernel_u_a_0_volatility
//        bit 31~0 - kernel_u_a_0_volatility[31:0] (Read/Write)
// 0x28 : reserved
// 0x2c : Data signal of kernel_u_a_0_initial_volatility
//        bit 31~0 - kernel_u_a_0_initial_volatility[31:0] (Read/Write)
// 0x30 : reserved
// 0x34 : Data signal of kernel_u_a_0_volatility_volatility
//        bit 31~0 - kernel_u_a_0_volatility_volatility[31:0] (Read/Write)
// 0x38 : reserved
// 0x3c : Data signal of kernel_u_a_0_rho
//        bit 31~0 - kernel_u_a_0_rho[31:0] (Read/Write)
// 0x40 : reserved
// 0x44 : Data signal of kernel_u_a_0_kappa
//        bit 31~0 - kernel_u_a_0_kappa[31:0] (Read/Write)
// 0x48 : reserved
// 0x4c : Data signal of kernel_u_a_0_theta
//        bit 31~0 - kernel_u_a_0_theta[31:0] (Read/Write)
// 0x50 : reserved
// 0x54 : Data signal of kernel_u_a_0_correlation_matrix_0_0
//        bit 31~0 - kernel_u_a_0_correlation_matrix_0_0[31:0] (Read/Write)
// 0x58 : reserved
// 0x5c : Data signal of kernel_u_a_0_correlation_matrix_0_1
//        bit 31~0 - kernel_u_a_0_correlation_matrix_0_1[31:0] (Read/Write)
// 0x60 : reserved
// 0x64 : Data signal of kernel_u_a_0_correlation_matrix_1_0
//        bit 31~0 - kernel_u_a_0_correlation_matrix_1_0[31:0] (Read/Write)
// 0x68 : reserved
// 0x6c : Data signal of kernel_u_a_0_correlation_matrix_1_1
//        bit 31~0 - kernel_u_a_0_correlation_matrix_1_1[31:0] (Read/Write)
// 0x70 : reserved
// 0x74 : Data signal of kernel_o_a_0_second_barrier
//        bit 31~0 - kernel_o_a_0_second_barrier[31:0] (Read/Write)
// 0x78 : reserved
// 0x7c : Data signal of kernel_o_a_0_barrier
//        bit 31~0 - kernel_o_a_0_barrier[31:0] (Read/Write)
// 0x80 : reserved
// 0x84 : Data signal of kernel_o_a_0_out
//        bit 31~0 - kernel_o_a_0_out[31:0] (Read/Write)
// 0x88 : reserved
// 0x8c : Data signal of kernel_o_a_0_down
//        bit 31~0 - kernel_o_a_0_down[31:0] (Read/Write)
// 0x90 : reserved
// 0x94 : Data signal of kernel_o_a_0_strike_price
//        bit 31~0 - kernel_o_a_0_strike_price[31:0] (Read/Write)
// 0x98 : reserved
// 0x9c : Data signal of kernel_o_a_0_time_period
//        bit 31~0 - kernel_o_a_0_time_period[31:0] (Read/Write)
// 0xa0 : reserved
// 0xa4 : Data signal of kernel_o_a_0_call
//        bit 31~0 - kernel_o_a_0_call[31:0] (Read/Write)
// 0xa8 : reserved
// 0xac : Data signal of kernel_o_a_0_points
//        bit 31~0 - kernel_o_a_0_points[31:0] (Read/Write)
// 0xb0 : reserved
// 0xb4 : Data signal of seed_0_s1
//        bit 31~0 - seed_0_s1[31:0] (Read/Write)
// 0xb8 : reserved
// 0xbc : Data signal of seed_0_s2
//        bit 31~0 - seed_0_s2[31:0] (Read/Write)
// 0xc0 : reserved
// 0xc4 : Data signal of seed_0_s3
//        bit 31~0 - seed_0_s3[31:0] (Read/Write)
// 0xc8 : reserved
// 0xcc : Data signal of seed_0_offset
//        bit 31~0 - seed_0_offset[31:0] (Read/Write)
// 0xd0 : Control signal of thread_result_0
//        bit 0  - thread_result_0_ap_vld (Read/COR)
//        others - reserved
// 0xd4 : Data signal of thread_result_0
//        bit 31~0 - thread_result_0[31:0] (Read)
// 0xd8 : Control signal of thread_result_sqrd_0
//        bit 0  - thread_result_sqrd_0_ap_vld (Read/COR)
//        others - reserved
// 0xdc : Data signal of thread_result_sqrd_0
//        bit 31~0 - thread_result_sqrd_0[31:0] (Read)
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
// address bits
localparam
    ADDR_BITS = 8;

// address
localparam
    ADDR_AP_CTRL                                    = 8'h00,
    ADDR_GIE                                        = 8'h04,
    ADDR_IER                                        = 8'h08,
    ADDR_ISR                                        = 8'h0c,
    ADDR_KERNEL_U_A_0_RFIR_CTRL                     = 8'h10,
    ADDR_KERNEL_U_A_0_RFIR_DATA_0                   = 8'h14,
    ADDR_KERNEL_U_A_0_CURRENT_PRICE_CTRL            = 8'h18,
    ADDR_KERNEL_U_A_0_CURRENT_PRICE_DATA_0          = 8'h1c,
    ADDR_KERNEL_U_A_0_VOLATILITY_CTRL               = 8'h20,
    ADDR_KERNEL_U_A_0_VOLATILITY_DATA_0             = 8'h24,
    ADDR_KERNEL_U_A_0_INITIAL_VOLATILITY_CTRL       = 8'h28,
    ADDR_KERNEL_U_A_0_INITIAL_VOLATILITY_DATA_0     = 8'h2c,
    ADDR_KERNEL_U_A_0_VOLATILITY_VOLATILITY_CTRL    = 8'h30,
    ADDR_KERNEL_U_A_0_VOLATILITY_VOLATILITY_DATA_0  = 8'h34,
    ADDR_KERNEL_U_A_0_RHO_CTRL                      = 8'h38,
    ADDR_KERNEL_U_A_0_RHO_DATA_0                    = 8'h3c,
    ADDR_KERNEL_U_A_0_KAPPA_CTRL                    = 8'h40,
    ADDR_KERNEL_U_A_0_KAPPA_DATA_0                  = 8'h44,
    ADDR_KERNEL_U_A_0_THETA_CTRL                    = 8'h48,
    ADDR_KERNEL_U_A_0_THETA_DATA_0                  = 8'h4c,
    ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_0_0_CTRL   = 8'h50,
    ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_0_0_DATA_0 = 8'h54,
    ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_0_1_CTRL   = 8'h58,
    ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_0_1_DATA_0 = 8'h5c,
    ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_1_0_CTRL   = 8'h60,
    ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_1_0_DATA_0 = 8'h64,
    ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_1_1_CTRL   = 8'h68,
    ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_1_1_DATA_0 = 8'h6c,
    ADDR_KERNEL_O_A_0_SECOND_BARRIER_CTRL           = 8'h70,
    ADDR_KERNEL_O_A_0_SECOND_BARRIER_DATA_0         = 8'h74,
    ADDR_KERNEL_O_A_0_BARRIER_CTRL                  = 8'h78,
    ADDR_KERNEL_O_A_0_BARRIER_DATA_0                = 8'h7c,
    ADDR_KERNEL_O_A_0_OUT_CTRL                      = 8'h80,
    ADDR_KERNEL_O_A_0_OUT_DATA_0                    = 8'h84,
    ADDR_KERNEL_O_A_0_DOWN_CTRL                     = 8'h88,
    ADDR_KERNEL_O_A_0_DOWN_DATA_0                   = 8'h8c,
    ADDR_KERNEL_O_A_0_STRIKE_PRICE_CTRL             = 8'h90,
    ADDR_KERNEL_O_A_0_STRIKE_PRICE_DATA_0           = 8'h94,
    ADDR_KERNEL_O_A_0_TIME_PERIOD_CTRL              = 8'h98,
    ADDR_KERNEL_O_A_0_TIME_PERIOD_DATA_0            = 8'h9c,
    ADDR_KERNEL_O_A_0_CALL_CTRL                     = 8'ha0,
    ADDR_KERNEL_O_A_0_CALL_DATA_0                   = 8'ha4,
    ADDR_KERNEL_O_A_0_POINTS_CTRL                   = 8'ha8,
    ADDR_KERNEL_O_A_0_POINTS_DATA_0                 = 8'hac,
    ADDR_SEED_0_S1_CTRL                             = 8'hb0,
    ADDR_SEED_0_S1_DATA_0                           = 8'hb4,
    ADDR_SEED_0_S2_CTRL                             = 8'hb8,
    ADDR_SEED_0_S2_DATA_0                           = 8'hbc,
    ADDR_SEED_0_S3_CTRL                             = 8'hc0,
    ADDR_SEED_0_S3_DATA_0                           = 8'hc4,
    ADDR_SEED_0_OFFSET_CTRL                         = 8'hc8,
    ADDR_SEED_0_OFFSET_DATA_0                       = 8'hcc,
    ADDR_THREAD_RESULT_0_CTRL                       = 8'hd0,
    ADDR_THREAD_RESULT_0_DATA_0                     = 8'hd4,
    ADDR_THREAD_RESULT_SQRD_0_CTRL                  = 8'hd8,
    ADDR_THREAD_RESULT_SQRD_0_DATA_0                = 8'hdc;

// axi write fsm
localparam
    WRIDLE = 2'd0,
    WRDATA = 2'd1,
    WRRESP = 2'd2;

// axi read fsm
localparam
    RDIDLE = 2'd0,
    RDDATA = 2'd1;

//------------------------Local signal-------------------
// axi write
reg  [1:0]           wstate;
reg  [1:0]           wnext;
reg  [ADDR_BITS-1:0] waddr;
wire [31:0]          wmask;
wire                 aw_hs;
wire                 w_hs;
// axi read
reg  [1:0]           rstate;
reg  [1:0]           rnext;
reg  [31:0]          rdata;
wire                 ar_hs;
wire [ADDR_BITS-1:0] raddr;
// internal registers
wire                 ap_idle;
reg                  ap_done;
wire                 ap_ready;
reg                  ap_start;
reg                  auto_restart;
reg                  gie;
reg  [1:0]           ier;
reg  [1:0]           isr;
reg  [31:0]          _kernel_u_a_0_rfir;
reg  [31:0]          _kernel_u_a_0_current_price;
reg  [31:0]          _kernel_u_a_0_volatility;
reg  [31:0]          _kernel_u_a_0_initial_volatility;
reg  [31:0]          _kernel_u_a_0_volatility_volatility;
reg  [31:0]          _kernel_u_a_0_rho;
reg  [31:0]          _kernel_u_a_0_kappa;
reg  [31:0]          _kernel_u_a_0_theta;
reg  [31:0]          _kernel_u_a_0_correlation_matrix_0_0;
reg  [31:0]          _kernel_u_a_0_correlation_matrix_0_1;
reg  [31:0]          _kernel_u_a_0_correlation_matrix_1_0;
reg  [31:0]          _kernel_u_a_0_correlation_matrix_1_1;
reg  [31:0]          _kernel_o_a_0_second_barrier;
reg  [31:0]          _kernel_o_a_0_barrier;
reg  [31:0]          _kernel_o_a_0_out;
reg  [31:0]          _kernel_o_a_0_down;
reg  [31:0]          _kernel_o_a_0_strike_price;
reg  [31:0]          _kernel_o_a_0_time_period;
reg  [31:0]          _kernel_o_a_0_call;
reg  [31:0]          _kernel_o_a_0_points;
reg  [31:0]          _seed_0_s1;
reg  [31:0]          _seed_0_s2;
reg  [31:0]          _seed_0_s3;
reg  [31:0]          _seed_0_offset;
wire [31:0]          _thread_result_0;
reg                  _thread_result_0_ap_vld;
wire [31:0]          _thread_result_sqrd_0;
reg                  _thread_result_sqrd_0_ap_vld;

//------------------------Body---------------------------
//++++++++++++++++++++++++axi write++++++++++++++++++++++
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (~ARESETN)
        wstate <= WRIDLE;
    else
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (aw_hs)
        waddr <= AWADDR[ADDR_BITS-1:0];
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++axi read+++++++++++++++++++++++
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (~ARESETN)
        rstate <= RDIDLE;
    else
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ar_hs) begin
        rdata <= 1'b0;
        case (raddr)
            ADDR_AP_CTRL: begin
                rdata[0] <= ap_start;
                rdata[1] <= ap_done;
                rdata[2] <= ap_idle;
                rdata[3] <= ap_ready;
                rdata[7] <= auto_restart;
            end
            ADDR_GIE: begin
                rdata <= gie;
            end
            ADDR_IER: begin
                rdata <= ier;
            end
            ADDR_ISR: begin
                rdata <= isr;
            end
            ADDR_KERNEL_U_A_0_RFIR_DATA_0: begin
                rdata <= _kernel_u_a_0_rfir[31:0];
            end
            ADDR_KERNEL_U_A_0_CURRENT_PRICE_DATA_0: begin
                rdata <= _kernel_u_a_0_current_price[31:0];
            end
            ADDR_KERNEL_U_A_0_VOLATILITY_DATA_0: begin
                rdata <= _kernel_u_a_0_volatility[31:0];
            end
            ADDR_KERNEL_U_A_0_INITIAL_VOLATILITY_DATA_0: begin
                rdata <= _kernel_u_a_0_initial_volatility[31:0];
            end
            ADDR_KERNEL_U_A_0_VOLATILITY_VOLATILITY_DATA_0: begin
                rdata <= _kernel_u_a_0_volatility_volatility[31:0];
            end
            ADDR_KERNEL_U_A_0_RHO_DATA_0: begin
                rdata <= _kernel_u_a_0_rho[31:0];
            end
            ADDR_KERNEL_U_A_0_KAPPA_DATA_0: begin
                rdata <= _kernel_u_a_0_kappa[31:0];
            end
            ADDR_KERNEL_U_A_0_THETA_DATA_0: begin
                rdata <= _kernel_u_a_0_theta[31:0];
            end
            ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_0_0_DATA_0: begin
                rdata <= _kernel_u_a_0_correlation_matrix_0_0[31:0];
            end
            ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_0_1_DATA_0: begin
                rdata <= _kernel_u_a_0_correlation_matrix_0_1[31:0];
            end
            ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_1_0_DATA_0: begin
                rdata <= _kernel_u_a_0_correlation_matrix_1_0[31:0];
            end
            ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_1_1_DATA_0: begin
                rdata <= _kernel_u_a_0_correlation_matrix_1_1[31:0];
            end
            ADDR_KERNEL_O_A_0_SECOND_BARRIER_DATA_0: begin
                rdata <= _kernel_o_a_0_second_barrier[31:0];
            end
            ADDR_KERNEL_O_A_0_BARRIER_DATA_0: begin
                rdata <= _kernel_o_a_0_barrier[31:0];
            end
            ADDR_KERNEL_O_A_0_OUT_DATA_0: begin
                rdata <= _kernel_o_a_0_out[31:0];
            end
            ADDR_KERNEL_O_A_0_DOWN_DATA_0: begin
                rdata <= _kernel_o_a_0_down[31:0];
            end
            ADDR_KERNEL_O_A_0_STRIKE_PRICE_DATA_0: begin
                rdata <= _kernel_o_a_0_strike_price[31:0];
            end
            ADDR_KERNEL_O_A_0_TIME_PERIOD_DATA_0: begin
                rdata <= _kernel_o_a_0_time_period[31:0];
            end
            ADDR_KERNEL_O_A_0_CALL_DATA_0: begin
                rdata <= _kernel_o_a_0_call[31:0];
            end
            ADDR_KERNEL_O_A_0_POINTS_DATA_0: begin
                rdata <= _kernel_o_a_0_points[31:0];
            end
            ADDR_SEED_0_S1_DATA_0: begin
                rdata <= _seed_0_s1[31:0];
            end
            ADDR_SEED_0_S2_DATA_0: begin
                rdata <= _seed_0_s2[31:0];
            end
            ADDR_SEED_0_S3_DATA_0: begin
                rdata <= _seed_0_s3[31:0];
            end
            ADDR_SEED_0_OFFSET_DATA_0: begin
                rdata <= _seed_0_offset[31:0];
            end
            ADDR_THREAD_RESULT_0_CTRL: begin
                rdata[0] <= _thread_result_0_ap_vld;
            end
            ADDR_THREAD_RESULT_0_DATA_0: begin
                rdata <= _thread_result_0[31:0];
            end
            ADDR_THREAD_RESULT_SQRD_0_CTRL: begin
                rdata[0] <= _thread_result_sqrd_0_ap_vld;
            end
            ADDR_THREAD_RESULT_SQRD_0_DATA_0: begin
                rdata <= _thread_result_sqrd_0[31:0];
            end
        endcase
    end
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++internal registers+++++++++++++
assign interrupt                             = gie & (|isr);
assign I_ap_start                            = ap_start;
assign ap_idle                               = O_ap_idle;
assign ap_ready                              = O_ap_ready;
assign I_kernel_u_a_0_rfir                   = _kernel_u_a_0_rfir;
assign I_kernel_u_a_0_current_price          = _kernel_u_a_0_current_price;
assign I_kernel_u_a_0_volatility             = _kernel_u_a_0_volatility;
assign I_kernel_u_a_0_initial_volatility     = _kernel_u_a_0_initial_volatility;
assign I_kernel_u_a_0_volatility_volatility  = _kernel_u_a_0_volatility_volatility;
assign I_kernel_u_a_0_rho                    = _kernel_u_a_0_rho;
assign I_kernel_u_a_0_kappa                  = _kernel_u_a_0_kappa;
assign I_kernel_u_a_0_theta                  = _kernel_u_a_0_theta;
assign I_kernel_u_a_0_correlation_matrix_0_0 = _kernel_u_a_0_correlation_matrix_0_0;
assign I_kernel_u_a_0_correlation_matrix_0_1 = _kernel_u_a_0_correlation_matrix_0_1;
assign I_kernel_u_a_0_correlation_matrix_1_0 = _kernel_u_a_0_correlation_matrix_1_0;
assign I_kernel_u_a_0_correlation_matrix_1_1 = _kernel_u_a_0_correlation_matrix_1_1;
assign I_kernel_o_a_0_second_barrier         = _kernel_o_a_0_second_barrier;
assign I_kernel_o_a_0_barrier                = _kernel_o_a_0_barrier;
assign I_kernel_o_a_0_out                    = _kernel_o_a_0_out;
assign I_kernel_o_a_0_down                   = _kernel_o_a_0_down;
assign I_kernel_o_a_0_strike_price           = _kernel_o_a_0_strike_price;
assign I_kernel_o_a_0_time_period            = _kernel_o_a_0_time_period;
assign I_kernel_o_a_0_call                   = _kernel_o_a_0_call;
assign I_kernel_o_a_0_points                 = _kernel_o_a_0_points;
assign I_seed_0_s1                           = _seed_0_s1;
assign I_seed_0_s2                           = _seed_0_s2;
assign I_seed_0_s3                           = _seed_0_s3;
assign I_seed_0_offset                       = _seed_0_offset;
assign _thread_result_0                      = O_thread_result_0;
assign _thread_result_sqrd_0                 = O_thread_result_sqrd_0;

// ap_start
always @(posedge ACLK) begin
    if (~ARESETN)
        ap_start <= 1'b0;
    else if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0] && WDATA[0])
        ap_start <= 1'b1;
    else if (O_ap_ready)
        ap_start <= auto_restart; // clear on handshake/auto restart
end

// ap_done
always @(posedge ACLK) begin
    if (~ARESETN)
        ap_done <= 1'b0;
    else if (O_ap_done)
        ap_done <= 1'b1;
    else if (ar_hs && raddr == ADDR_AP_CTRL)
        ap_done <= 1'b0; // clear on read
end

// auto_restart
always @(posedge ACLK) begin
    if (~ARESETN)
        auto_restart <= 1'b0;
    else if (w_hs && waddr == ADDR_AP_CTRL && WSTRB[0])
        auto_restart <=  WDATA[7];
end

// gie
always @(posedge ACLK) begin
    if (~ARESETN)
        gie <= 1'b0;
    else if (w_hs && waddr == ADDR_GIE && WSTRB[0])
        gie <= WDATA[0];
end

// ier
always @(posedge ACLK) begin
    if (~ARESETN)
        ier <= 1'b0;
    else if (w_hs && waddr == ADDR_IER && WSTRB[0])
        ier <= WDATA[1:0];
end

// isr[0]
always @(posedge ACLK) begin
    if (~ARESETN)
        isr[0] <= 1'b0;
    else if (ier[0] & O_ap_done)
        isr[0] <= 1'b1;
    else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
        isr[0] <= isr[0] ^ WDATA[0]; // toggle on write
end

// isr[1]
always @(posedge ACLK) begin
    if (~ARESETN)
        isr[1] <= 1'b0;
    else if (ier[1] & O_ap_ready)
        isr[1] <= 1'b1;
    else if (w_hs && waddr == ADDR_ISR && WSTRB[0])
        isr[1] <= isr[1] ^ WDATA[1]; // toggle on write
end

// _kernel_u_a_0_rfir[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_RFIR_DATA_0)
        _kernel_u_a_0_rfir[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_rfir[31:0] & ~wmask);
end

// _kernel_u_a_0_current_price[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_CURRENT_PRICE_DATA_0)
        _kernel_u_a_0_current_price[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_current_price[31:0] & ~wmask);
end

// _kernel_u_a_0_volatility[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_VOLATILITY_DATA_0)
        _kernel_u_a_0_volatility[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_volatility[31:0] & ~wmask);
end

// _kernel_u_a_0_initial_volatility[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_INITIAL_VOLATILITY_DATA_0)
        _kernel_u_a_0_initial_volatility[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_initial_volatility[31:0] & ~wmask);
end

// _kernel_u_a_0_volatility_volatility[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_VOLATILITY_VOLATILITY_DATA_0)
        _kernel_u_a_0_volatility_volatility[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_volatility_volatility[31:0] & ~wmask);
end

// _kernel_u_a_0_rho[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_RHO_DATA_0)
        _kernel_u_a_0_rho[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_rho[31:0] & ~wmask);
end

// _kernel_u_a_0_kappa[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_KAPPA_DATA_0)
        _kernel_u_a_0_kappa[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_kappa[31:0] & ~wmask);
end

// _kernel_u_a_0_theta[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_THETA_DATA_0)
        _kernel_u_a_0_theta[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_theta[31:0] & ~wmask);
end

// _kernel_u_a_0_correlation_matrix_0_0[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_0_0_DATA_0)
        _kernel_u_a_0_correlation_matrix_0_0[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_correlation_matrix_0_0[31:0] & ~wmask);
end

// _kernel_u_a_0_correlation_matrix_0_1[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_0_1_DATA_0)
        _kernel_u_a_0_correlation_matrix_0_1[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_correlation_matrix_0_1[31:0] & ~wmask);
end

// _kernel_u_a_0_correlation_matrix_1_0[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_1_0_DATA_0)
        _kernel_u_a_0_correlation_matrix_1_0[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_correlation_matrix_1_0[31:0] & ~wmask);
end

// _kernel_u_a_0_correlation_matrix_1_1[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_U_A_0_CORRELATION_MATRIX_1_1_DATA_0)
        _kernel_u_a_0_correlation_matrix_1_1[31:0] <= (WDATA[31:0] & wmask) | (_kernel_u_a_0_correlation_matrix_1_1[31:0] & ~wmask);
end

// _kernel_o_a_0_second_barrier[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_O_A_0_SECOND_BARRIER_DATA_0)
        _kernel_o_a_0_second_barrier[31:0] <= (WDATA[31:0] & wmask) | (_kernel_o_a_0_second_barrier[31:0] & ~wmask);
end

// _kernel_o_a_0_barrier[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_O_A_0_BARRIER_DATA_0)
        _kernel_o_a_0_barrier[31:0] <= (WDATA[31:0] & wmask) | (_kernel_o_a_0_barrier[31:0] & ~wmask);
end

// _kernel_o_a_0_out[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_O_A_0_OUT_DATA_0)
        _kernel_o_a_0_out[31:0] <= (WDATA[31:0] & wmask) | (_kernel_o_a_0_out[31:0] & ~wmask);
end

// _kernel_o_a_0_down[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_O_A_0_DOWN_DATA_0)
        _kernel_o_a_0_down[31:0] <= (WDATA[31:0] & wmask) | (_kernel_o_a_0_down[31:0] & ~wmask);
end

// _kernel_o_a_0_strike_price[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_O_A_0_STRIKE_PRICE_DATA_0)
        _kernel_o_a_0_strike_price[31:0] <= (WDATA[31:0] & wmask) | (_kernel_o_a_0_strike_price[31:0] & ~wmask);
end

// _kernel_o_a_0_time_period[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_O_A_0_TIME_PERIOD_DATA_0)
        _kernel_o_a_0_time_period[31:0] <= (WDATA[31:0] & wmask) | (_kernel_o_a_0_time_period[31:0] & ~wmask);
end

// _kernel_o_a_0_call[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_O_A_0_CALL_DATA_0)
        _kernel_o_a_0_call[31:0] <= (WDATA[31:0] & wmask) | (_kernel_o_a_0_call[31:0] & ~wmask);
end

// _kernel_o_a_0_points[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_O_A_0_POINTS_DATA_0)
        _kernel_o_a_0_points[31:0] <= (WDATA[31:0] & wmask) | (_kernel_o_a_0_points[31:0] & ~wmask);
end

// _seed_0_s1[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEED_0_S1_DATA_0)
        _seed_0_s1[31:0] <= (WDATA[31:0] & wmask) | (_seed_0_s1[31:0] & ~wmask);
end

// _seed_0_s2[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEED_0_S2_DATA_0)
        _seed_0_s2[31:0] <= (WDATA[31:0] & wmask) | (_seed_0_s2[31:0] & ~wmask);
end

// _seed_0_s3[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEED_0_S3_DATA_0)
        _seed_0_s3[31:0] <= (WDATA[31:0] & wmask) | (_seed_0_s3[31:0] & ~wmask);
end

// _seed_0_offset[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_SEED_0_OFFSET_DATA_0)
        _seed_0_offset[31:0] <= (WDATA[31:0] & wmask) | (_seed_0_offset[31:0] & ~wmask);
end

// _thread_result_0_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        _thread_result_0_ap_vld <= 1'b0;
    else if (O_thread_result_0_ap_vld)
        _thread_result_0_ap_vld <= 1'b1;
    else if (ar_hs && raddr == ADDR_THREAD_RESULT_0_CTRL)
        _thread_result_0_ap_vld <= 1'b0; // clear on read
end

// _thread_result_sqrd_0_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        _thread_result_sqrd_0_ap_vld <= 1'b0;
    else if (O_thread_result_sqrd_0_ap_vld)
        _thread_result_sqrd_0_ap_vld <= 1'b1;
    else if (ar_hs && raddr == ADDR_THREAD_RESULT_SQRD_0_CTRL)
        _thread_result_sqrd_0_ap_vld <= 1'b0; // clear on read
end

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

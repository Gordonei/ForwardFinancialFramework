// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ==============================================================

`timescale 1ns/1ps
module vivado_activity_thread_CORE_IO_if
#(parameter
    C_ADDR_WIDTH = 7,
    C_DATA_WIDTH = 32
)(
    // axi4 lite slave signals
    input  wire                      ACLK,
    input  wire                      ARESETN,
    input  wire [C_ADDR_WIDTH-1:0]   AWADDR,
    input  wire                      AWVALID,
    output wire                      AWREADY,
    input  wire [C_DATA_WIDTH-1:0]   WDATA,
    input  wire [C_DATA_WIDTH/8-1:0] WSTRB,
    input  wire                      WVALID,
    output wire                      WREADY,
    output wire [1:0]                BRESP,
    output wire                      BVALID,
    input  wire                      BREADY,
    input  wire [C_ADDR_WIDTH-1:0]   ARADDR,
    input  wire                      ARVALID,
    output wire                      ARREADY,
    output wire [C_DATA_WIDTH-1:0]   RDATA,
    output wire [1:0]                RRESP,
    output wire                      RVALID,
    input  wire                      RREADY,
    // user signals
    output wire [31:0]               I_kernel_arg_u_a_0_rfir,
    output wire [31:0]               I_kernel_arg_u_a_0_current_price,
    input  wire [31:0]               O_kernel_arg_u_v_0_gamma,
    input  wire                      O_kernel_arg_u_v_0_gamma_ap_vld,
    input  wire [31:0]               O_kernel_arg_u_v_0_time,
    input  wire                      O_kernel_arg_u_v_0_time_ap_vld,
    output wire [31:0]               I_kernel_arg_o_a_0_strike_price,
    output wire [31:0]               I_kernel_arg_o_a_0_time_period,
    output wire [31:0]               I_kernel_arg_o_a_0_call,
    output wire [31:0]               I_kernel_arg_o_v_0_delta_time,
    input  wire [31:0]               O_kernel_arg_o_v_0_value,
    input  wire                      O_kernel_arg_o_v_0_value_ap_vld
);
//------------------------Address Info-------------------
// 0x00 : reserved
// 0x04 : reserved
// 0x08 : reserved
// 0x0c : reserved
// 0x10 : reserved
// 0x14 : Data signal of kernel_arg_u_a_0_rfir
//        bit 31~0 - kernel_arg_u_a_0_rfir[31:0] (Read/Write)
// 0x18 : reserved
// 0x1c : Data signal of kernel_arg_u_a_0_current_price
//        bit 31~0 - kernel_arg_u_a_0_current_price[31:0] (Read/Write)
// 0x20 : Control signal of kernel_arg_u_v_0_gamma
//        bit 0  - kernel_arg_u_v_0_gamma_ap_vld (Read/COR)
//        others - reserved
// 0x24 : Data signal of kernel_arg_u_v_0_gamma
//        bit 31~0 - kernel_arg_u_v_0_gamma[31:0] (Read)
// 0x28 : Control signal of kernel_arg_u_v_0_time
//        bit 0  - kernel_arg_u_v_0_time_ap_vld (Read/COR)
//        others - reserved
// 0x2c : Data signal of kernel_arg_u_v_0_time
//        bit 31~0 - kernel_arg_u_v_0_time[31:0] (Read)
// 0x30 : reserved
// 0x34 : Data signal of kernel_arg_o_a_0_strike_price
//        bit 31~0 - kernel_arg_o_a_0_strike_price[31:0] (Read/Write)
// 0x38 : reserved
// 0x3c : Data signal of kernel_arg_o_a_0_time_period
//        bit 31~0 - kernel_arg_o_a_0_time_period[31:0] (Read/Write)
// 0x40 : reserved
// 0x44 : Data signal of kernel_arg_o_a_0_call
//        bit 31~0 - kernel_arg_o_a_0_call[31:0] (Read/Write)
// 0x48 : reserved
// 0x4c : Data signal of kernel_arg_o_v_0_delta_time
//        bit 31~0 - kernel_arg_o_v_0_delta_time[31:0] (Read/Write)
// 0x50 : Control signal of kernel_arg_o_v_0_value
//        bit 0  - kernel_arg_o_v_0_value_ap_vld (Read/COR)
//        others - reserved
// 0x54 : Data signal of kernel_arg_o_v_0_value
//        bit 31~0 - kernel_arg_o_v_0_value[31:0] (Read)
// (SC = Self Clear, COR = Clear on Read, TOW = Toggle on Write, COH = Clear on Handshake)

//------------------------Parameter----------------------
// address bits
localparam
    ADDR_BITS = 7;

// address
localparam
    ADDR_KERNEL_ARG_U_A_0_RFIR_CTRL            = 7'h10,
    ADDR_KERNEL_ARG_U_A_0_RFIR_DATA_0          = 7'h14,
    ADDR_KERNEL_ARG_U_A_0_CURRENT_PRICE_CTRL   = 7'h18,
    ADDR_KERNEL_ARG_U_A_0_CURRENT_PRICE_DATA_0 = 7'h1c,
    ADDR_KERNEL_ARG_U_V_0_GAMMA_CTRL           = 7'h20,
    ADDR_KERNEL_ARG_U_V_0_GAMMA_DATA_0         = 7'h24,
    ADDR_KERNEL_ARG_U_V_0_TIME_CTRL            = 7'h28,
    ADDR_KERNEL_ARG_U_V_0_TIME_DATA_0          = 7'h2c,
    ADDR_KERNEL_ARG_O_A_0_STRIKE_PRICE_CTRL    = 7'h30,
    ADDR_KERNEL_ARG_O_A_0_STRIKE_PRICE_DATA_0  = 7'h34,
    ADDR_KERNEL_ARG_O_A_0_TIME_PERIOD_CTRL     = 7'h38,
    ADDR_KERNEL_ARG_O_A_0_TIME_PERIOD_DATA_0   = 7'h3c,
    ADDR_KERNEL_ARG_O_A_0_CALL_CTRL            = 7'h40,
    ADDR_KERNEL_ARG_O_A_0_CALL_DATA_0          = 7'h44,
    ADDR_KERNEL_ARG_O_V_0_DELTA_TIME_CTRL      = 7'h48,
    ADDR_KERNEL_ARG_O_V_0_DELTA_TIME_DATA_0    = 7'h4c,
    ADDR_KERNEL_ARG_O_V_0_VALUE_CTRL           = 7'h50,
    ADDR_KERNEL_ARG_O_V_0_VALUE_DATA_0         = 7'h54;

// axi write fsm
localparam
    WRIDLE = 2'd0,
    WRDATA = 2'd1,
    WRRESP = 2'd2;

// axi read fsm
localparam
    RDIDLE = 2'd0,
    RDDATA = 2'd1;

//------------------------Local signal-------------------
// axi write
reg  [1:0]           wstate;
reg  [1:0]           wnext;
reg  [ADDR_BITS-1:0] waddr;
wire [31:0]          wmask;
wire                 aw_hs;
wire                 w_hs;
// axi read
reg  [1:0]           rstate;
reg  [1:0]           rnext;
reg  [31:0]          rdata;
wire                 ar_hs;
wire [ADDR_BITS-1:0] raddr;
// internal registers
reg  [31:0]          _kernel_arg_u_a_0_rfir;
reg  [31:0]          _kernel_arg_u_a_0_current_price;
wire [31:0]          _kernel_arg_u_v_0_gamma;
reg                  _kernel_arg_u_v_0_gamma_ap_vld;
wire [31:0]          _kernel_arg_u_v_0_time;
reg                  _kernel_arg_u_v_0_time_ap_vld;
reg  [31:0]          _kernel_arg_o_a_0_strike_price;
reg  [31:0]          _kernel_arg_o_a_0_time_period;
reg  [31:0]          _kernel_arg_o_a_0_call;
reg  [31:0]          _kernel_arg_o_v_0_delta_time;
wire [31:0]          _kernel_arg_o_v_0_value;
reg                  _kernel_arg_o_v_0_value_ap_vld;

//------------------------Body---------------------------
//++++++++++++++++++++++++axi write++++++++++++++++++++++
assign AWREADY = (wstate == WRIDLE);
assign WREADY  = (wstate == WRDATA);
assign BRESP   = 2'b00;  // OKAY
assign BVALID  = (wstate == WRRESP);
assign wmask   = { {8{WSTRB[3]}}, {8{WSTRB[2]}}, {8{WSTRB[1]}}, {8{WSTRB[0]}} };
assign aw_hs   = AWVALID & AWREADY;
assign w_hs    = WVALID & WREADY;

// wstate
always @(posedge ACLK) begin
    if (~ARESETN)
        wstate <= WRIDLE;
    else
        wstate <= wnext;
end

// wnext
always @(*) begin
    case (wstate)
        WRIDLE:
            if (AWVALID)
                wnext = WRDATA;
            else
                wnext = WRIDLE;
        WRDATA:
            if (WVALID)
                wnext = WRRESP;
            else
                wnext = WRDATA;
        WRRESP:
            if (BREADY)
                wnext = WRIDLE;
            else
                wnext = WRRESP;
        default:
            wnext = WRIDLE;
    endcase
end

// waddr
always @(posedge ACLK) begin
    if (aw_hs)
        waddr <= AWADDR[ADDR_BITS-1:0];
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++axi read+++++++++++++++++++++++
assign ARREADY = (rstate == RDIDLE);
assign RDATA   = rdata;
assign RRESP   = 2'b00;  // OKAY
assign RVALID  = (rstate == RDDATA);
assign ar_hs   = ARVALID & ARREADY;
assign raddr   = ARADDR[ADDR_BITS-1:0];

// rstate
always @(posedge ACLK) begin
    if (~ARESETN)
        rstate <= RDIDLE;
    else
        rstate <= rnext;
end

// rnext
always @(*) begin
    case (rstate)
        RDIDLE:
            if (ARVALID)
                rnext = RDDATA;
            else
                rnext = RDIDLE;
        RDDATA:
            if (RREADY)
                rnext = RDIDLE;
            else
                rnext = RDDATA;
        default:
            rnext = RDIDLE;
    endcase
end

// rdata
always @(posedge ACLK) begin
    if (ar_hs) begin
        rdata <= 1'b0;
        case (raddr)
            ADDR_KERNEL_ARG_U_A_0_RFIR_DATA_0: begin
                rdata <= _kernel_arg_u_a_0_rfir[31:0];
            end
            ADDR_KERNEL_ARG_U_A_0_CURRENT_PRICE_DATA_0: begin
                rdata <= _kernel_arg_u_a_0_current_price[31:0];
            end
            ADDR_KERNEL_ARG_U_V_0_GAMMA_CTRL: begin
                rdata[0] <= _kernel_arg_u_v_0_gamma_ap_vld;
            end
            ADDR_KERNEL_ARG_U_V_0_GAMMA_DATA_0: begin
                rdata <= _kernel_arg_u_v_0_gamma[31:0];
            end
            ADDR_KERNEL_ARG_U_V_0_TIME_CTRL: begin
                rdata[0] <= _kernel_arg_u_v_0_time_ap_vld;
            end
            ADDR_KERNEL_ARG_U_V_0_TIME_DATA_0: begin
                rdata <= _kernel_arg_u_v_0_time[31:0];
            end
            ADDR_KERNEL_ARG_O_A_0_STRIKE_PRICE_DATA_0: begin
                rdata <= _kernel_arg_o_a_0_strike_price[31:0];
            end
            ADDR_KERNEL_ARG_O_A_0_TIME_PERIOD_DATA_0: begin
                rdata <= _kernel_arg_o_a_0_time_period[31:0];
            end
            ADDR_KERNEL_ARG_O_A_0_CALL_DATA_0: begin
                rdata <= _kernel_arg_o_a_0_call[31:0];
            end
            ADDR_KERNEL_ARG_O_V_0_DELTA_TIME_DATA_0: begin
                rdata <= _kernel_arg_o_v_0_delta_time[31:0];
            end
            ADDR_KERNEL_ARG_O_V_0_VALUE_CTRL: begin
                rdata[0] <= _kernel_arg_o_v_0_value_ap_vld;
            end
            ADDR_KERNEL_ARG_O_V_0_VALUE_DATA_0: begin
                rdata <= _kernel_arg_o_v_0_value[31:0];
            end
        endcase
    end
end
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

//++++++++++++++++++++++++internal registers+++++++++++++
assign I_kernel_arg_u_a_0_rfir          = _kernel_arg_u_a_0_rfir;
assign I_kernel_arg_u_a_0_current_price = _kernel_arg_u_a_0_current_price;
assign _kernel_arg_u_v_0_gamma          = O_kernel_arg_u_v_0_gamma;
assign _kernel_arg_u_v_0_time           = O_kernel_arg_u_v_0_time;
assign I_kernel_arg_o_a_0_strike_price  = _kernel_arg_o_a_0_strike_price;
assign I_kernel_arg_o_a_0_time_period   = _kernel_arg_o_a_0_time_period;
assign I_kernel_arg_o_a_0_call          = _kernel_arg_o_a_0_call;
assign I_kernel_arg_o_v_0_delta_time    = _kernel_arg_o_v_0_delta_time;
assign _kernel_arg_o_v_0_value          = O_kernel_arg_o_v_0_value;

// _kernel_arg_u_a_0_rfir[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_ARG_U_A_0_RFIR_DATA_0)
        _kernel_arg_u_a_0_rfir[31:0] <= (WDATA[31:0] & wmask) | (_kernel_arg_u_a_0_rfir[31:0] & ~wmask);
end

// _kernel_arg_u_a_0_current_price[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_ARG_U_A_0_CURRENT_PRICE_DATA_0)
        _kernel_arg_u_a_0_current_price[31:0] <= (WDATA[31:0] & wmask) | (_kernel_arg_u_a_0_current_price[31:0] & ~wmask);
end

// _kernel_arg_u_v_0_gamma_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        _kernel_arg_u_v_0_gamma_ap_vld <= 1'b0;
    else if (O_kernel_arg_u_v_0_gamma_ap_vld)
        _kernel_arg_u_v_0_gamma_ap_vld <= 1'b1;
    else if (ar_hs && raddr == ADDR_KERNEL_ARG_U_V_0_GAMMA_CTRL)
        _kernel_arg_u_v_0_gamma_ap_vld <= 1'b0; // clear on read
end

// _kernel_arg_u_v_0_time_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        _kernel_arg_u_v_0_time_ap_vld <= 1'b0;
    else if (O_kernel_arg_u_v_0_time_ap_vld)
        _kernel_arg_u_v_0_time_ap_vld <= 1'b1;
    else if (ar_hs && raddr == ADDR_KERNEL_ARG_U_V_0_TIME_CTRL)
        _kernel_arg_u_v_0_time_ap_vld <= 1'b0; // clear on read
end

// _kernel_arg_o_a_0_strike_price[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_ARG_O_A_0_STRIKE_PRICE_DATA_0)
        _kernel_arg_o_a_0_strike_price[31:0] <= (WDATA[31:0] & wmask) | (_kernel_arg_o_a_0_strike_price[31:0] & ~wmask);
end

// _kernel_arg_o_a_0_time_period[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_ARG_O_A_0_TIME_PERIOD_DATA_0)
        _kernel_arg_o_a_0_time_period[31:0] <= (WDATA[31:0] & wmask) | (_kernel_arg_o_a_0_time_period[31:0] & ~wmask);
end

// _kernel_arg_o_a_0_call[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_ARG_O_A_0_CALL_DATA_0)
        _kernel_arg_o_a_0_call[31:0] <= (WDATA[31:0] & wmask) | (_kernel_arg_o_a_0_call[31:0] & ~wmask);
end

// _kernel_arg_o_v_0_delta_time[31:0]
always @(posedge ACLK) begin
    if (w_hs && waddr == ADDR_KERNEL_ARG_O_V_0_DELTA_TIME_DATA_0)
        _kernel_arg_o_v_0_delta_time[31:0] <= (WDATA[31:0] & wmask) | (_kernel_arg_o_v_0_delta_time[31:0] & ~wmask);
end

// _kernel_arg_o_v_0_value_ap_vld
always @(posedge ACLK) begin
    if (~ARESETN)
        _kernel_arg_o_v_0_value_ap_vld <= 1'b0;
    else if (O_kernel_arg_o_v_0_value_ap_vld)
        _kernel_arg_o_v_0_value_ap_vld <= 1'b1;
    else if (ar_hs && raddr == ADDR_KERNEL_ARG_O_V_0_VALUE_CTRL)
        _kernel_arg_o_v_0_value_ap_vld <= 1'b0; // clear on read
end

//+++++++++++++++++++++++++++++++++++++++++++++++++++++++

endmodule

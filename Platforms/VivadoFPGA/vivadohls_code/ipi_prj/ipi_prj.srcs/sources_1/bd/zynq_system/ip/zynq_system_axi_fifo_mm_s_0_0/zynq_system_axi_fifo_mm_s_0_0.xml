<?xml version="1.0" encoding="UTF-8"?>
<spirit:component xmlns:xilinx="http://www.xilinx.com"
		xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
	<spirit:vendor>xilinx.com</spirit:vendor>
	<spirit:library>customized_ip</spirit:library>
	<spirit:name>zynq_system_axi_fifo_mm_s_0_0</spirit:name>
	<spirit:version>1.0</spirit:version>
	<spirit:busInterfaces>
		<spirit:busInterface>
			<spirit:name>S_AXI</spirit:name>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="aximm"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="aximm_rtl"
					spirit:version="1.0"/>
			<spirit:slave>
				<spirit:memoryMapRef spirit:memoryMapRef="S_AXI"/>
			</spirit:slave>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awaddr</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_awready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_wdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WSTRB</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_wstrb</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_wvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_wready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BRESP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_bresp</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_bvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_bready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_araddr</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_arready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_rdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RRESP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_rresp</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_rvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_rready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>AXI_STR_TXD</spirit:name>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txd_tvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txd_tready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txd_tlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TKEEP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txd_tkeep</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txd_tdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TDEST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txd_tdest</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txd_tid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TSTRB</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txd_tstrb</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txd_tuser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1)">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>AXI_STR_TXC</spirit:name>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txc_tvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txc_tready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txc_tlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TKEEP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txc_tkeep</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txc_tdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TDEST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txc_tdest</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txc_tid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TSTRB</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txc_tstrb</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_txc_tuser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1)">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>AXI_STR_RXD</spirit:name>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="axis_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_rxd_tvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_rxd_tready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_rxd_tlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TKEEP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_rxd_tkeep</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_rxd_tdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TDEST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_rxd_tdest</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_rxd_tid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TSTRB</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_rxd_tstrb</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>TUSER</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>axi_str_rxd_tuser</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1)">true</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>aclk_s_axi</spirit:name>
			<spirit:displayName>aclk_s_axi</spirit:displayName>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="clock_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>CLK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_aclk</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_BUSIF</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.ACLK_S_AXI.ASSOCIATED_BUSIF">S_AXI:S_AXI_FULL:AXI_STR_TXD:AXI_STR_TXC:AXI_STR_RXD</spirit:value>
				</spirit:parameter>
				<spirit:parameter>
					<spirit:name>ASSOCIATED_RESET</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.ACLK_S_AXI.ASSOCIATED_RESET">S_AXI_ARESETN</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>rst_s_axi</spirit:name>
			<spirit:displayName>rst_s_axi</spirit:displayName>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:slave/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi_aresetn</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:resolve="immediate"
							spirit:id="BUSIFPARAM_VALUE.RST_S_AXI.POLARITY">ACTIVE_LOW</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>rst_axi_str_txd</spirit:name>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>mm2s_prmry_reset_out_n</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:resolve="immediate"
							spirit:id="BUSIFPARAM_VALUE.RST_AXI_STR_TXD.POLARITY">ACTIVE_LOW</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>rst_axi_str_txc</spirit:name>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>mm2s_cntrl_reset_out_n</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:resolve="immediate"
							spirit:id="BUSIFPARAM_VALUE.RST_AXI_STR_TXC.POLARITY">ACTIVE_LOW</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>rst_axi_str_rxd</spirit:name>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="reset_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s2mm_prmry_reset_out_n</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>POLARITY</spirit:name>
					<spirit:value spirit:resolve="immediate"
							spirit:id="BUSIFPARAM_VALUE.RST_AXI_STR_RXD.POLARITY">ACTIVE_LOW</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>S_AXI_FULL</spirit:name>
			<spirit:displayName>S_AXI_FULL</spirit:displayName>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="aximm"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="interface"
					spirit:name="aximm_rtl"
					spirit:version="1.0"/>
			<spirit:slave>
				<spirit:memoryMapRef spirit:memoryMapRef="S_AXI_FULL"/>
			</spirit:slave>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARSIZE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_arsize</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_araddr</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWADDR</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_awaddr</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARBURST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_arburst</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWLEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_awlen</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARPROT</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_arprot</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWBURST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_awburst</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWSIZE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_awsize</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARLOCK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_arlock</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWLOCK</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_awlock</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARCACHE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_arcache</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_wdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_awvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_rready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_bready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WSTRB</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_wstrb</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_awid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWPROT</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_awprot</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_wvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWCACHE</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_awcache</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_wlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_arvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARLEN</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_arlen</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_arid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>ARREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_arready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_bid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RDATA</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_rdata</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>AWREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_awready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_rid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RRESP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_rresp</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RLAST</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_rlast</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_bvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>BRESP</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_bresp</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>RVALID</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_rvalid</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>WREADY</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>s_axi4_wready</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:vendorExtensions>
				<xilinx:busInterfaceInfo>
					<xilinx:enablement>
						<xilinx:presence>optional</xilinx:presence>
						<xilinx:isEnabled xilinx:resolve="dependent"
								xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and (((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1)))">false</xilinx:isEnabled>
					</xilinx:enablement>
				</xilinx:busInterfaceInfo>
			</spirit:vendorExtensions>
		</spirit:busInterface>
		<spirit:busInterface>
			<spirit:name>interrupt_intf</spirit:name>
			<spirit:displayName>interrupt_intf</spirit:displayName>
			<spirit:busType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="interrupt"
					spirit:version="1.0"/>
			<spirit:abstractionType spirit:vendor="xilinx.com"
					spirit:library="signal"
					spirit:name="interrupt_rtl"
					spirit:version="1.0"/>
			<spirit:master/>
			<spirit:portMaps>
				<spirit:portMap>
					<spirit:logicalPort>
						<spirit:name>INTERRUPT</spirit:name>
					</spirit:logicalPort>
					<spirit:physicalPort>
						<spirit:name>interrupt</spirit:name>
					</spirit:physicalPort>
				</spirit:portMap>
			</spirit:portMaps>
			<spirit:parameters>
				<spirit:parameter>
					<spirit:name>SENSITIVITY</spirit:name>
					<spirit:value spirit:id="BUSIFPARAM_VALUE.INTERRUPT_INTF.SENSITIVITY">LEVEL_HIGH</spirit:value>
				</spirit:parameter>
			</spirit:parameters>
		</spirit:busInterface>
	</spirit:busInterfaces>
	<spirit:memoryMaps>
		<spirit:memoryMap>
			<spirit:name>S_AXI</spirit:name>
			<spirit:addressBlock>
				<spirit:name>Mem0</spirit:name>
				<spirit:baseAddress spirit:format="long"
						spirit:resolve="immediate">0</spirit:baseAddress>
				<spirit:range spirit:format="long"
						spirit:resolve="generated">4096</spirit:range>
				<spirit:width>32</spirit:width>
				<spirit:usage>memory</spirit:usage>
				<spirit:access>read-write</spirit:access>
				<spirit:parameters>
					<spirit:parameter>
						<spirit:name>OFFSET_BASE_PARAM</spirit:name>
						<spirit:value spirit:id="ADDRBLOCKPARAM_VALUE.MEM.OFFSET_BASE_PARAM">C_BASEADDR</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>OFFSET_HIGH_PARAM</spirit:name>
						<spirit:value spirit:id="ADDRBLOCKPARAM_VALUE.MEM.OFFSET_HIGH_PARAM">C_HIGHADDR</spirit:value>
					</spirit:parameter>
				</spirit:parameters>
			</spirit:addressBlock>
		</spirit:memoryMap>
		<spirit:memoryMap>
			<spirit:name>S_AXI_FULL</spirit:name>
			<spirit:addressBlock>
				<spirit:name>Mem1</spirit:name>
				<spirit:baseAddress spirit:format="long"
						spirit:resolve="immediate">0</spirit:baseAddress>
				<spirit:range spirit:format="long"
						spirit:resolve="generated">4096</spirit:range>
				<spirit:width>32</spirit:width>
				<spirit:usage>memory</spirit:usage>
				<spirit:access>read-write</spirit:access>
				<spirit:parameters>
					<spirit:parameter>
						<spirit:name>OFFSET_BASE_PARAM</spirit:name>
						<spirit:value spirit:id="ADDRBLOCKPARAM_VALUE.MEM.OFFSET_BASE_PARAM">C_AXI4_BASEADDR</spirit:value>
					</spirit:parameter>
					<spirit:parameter>
						<spirit:name>OFFSET_HIGH_PARAM</spirit:name>
						<spirit:value spirit:id="ADDRBLOCKPARAM_VALUE.MEM.OFFSET_HIGH_PARAM">C_AXI4_HIGHADDR</spirit:value>
					</spirit:parameter>
				</spirit:parameters>
			</spirit:addressBlock>
		</spirit:memoryMap>
	</spirit:memoryMaps>
	<spirit:model>
		<spirit:ports>
			<spirit:port>
				<spirit:name>interrupt</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_aclk</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_aresetn</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awaddr</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_awready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_wdata</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_wstrb</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH&apos;)) div 8) - 1)">3</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_wvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_wready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_bresp</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">1</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_bvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_bready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_araddr</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_arready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_rdata</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_rresp</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">1</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_rvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi_rready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue>0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1) or ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_awid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ID_WIDTH&apos;)) - 1)">3</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_awaddr</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_awlen</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">7</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_awsize</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">2</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_awburst</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">1</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_awlock</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_awcache</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">3</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_awprot</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">2</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_awvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_awready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_wdata</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_wstrb</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;))) div 8)-1)">3</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_wlast</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_wvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_wready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_bid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ID_WIDTH&apos;)) - 1)">3</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_bresp</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">1</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_bvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_bready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_arid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ID_WIDTH&apos;)) - 1)">3</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_araddr</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_arlen</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">7</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_arsize</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">2</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_arburst</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">1</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_arlock</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_arcache</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">3</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_arprot</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">2</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_arvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_arready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_rid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI_ID_WIDTH&apos;)) - 1)">3</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_rdata</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_rresp</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="immediate">1</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_rlast</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_rvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s_axi4_rready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="(((spirit:decode(id(&apos;MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE&apos;)))=1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>mm2s_prmry_reset_out_n</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txd_tvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txd_tready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txd_tlast</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txd_tdata</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>mm2s_cntrl_reset_out_n</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txc_tvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txc_tready</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txc_tlast</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txc_tdata</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>s2mm_prmry_reset_out_n</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_rxd_tvalid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_rxd_tready</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_rxd_tlast</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="bitString"
								spirit:bitStringLength="1">0x0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_rxd_tdata</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="(spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;)) - 1)">31</spirit:left>
						<spirit:right spirit:format="long"
								spirit:resolve="immediate">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1)">true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txd_tid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TID_WIDTH&apos;))-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TID&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txc_tid</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TID_WIDTH&apos;))-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TID&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_rxd_tid</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TID_WIDTH&apos;))-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TID&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txd_tdest</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TDEST_WIDTH&apos;))-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TDEST&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txc_tdest</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TDEST_WIDTH&apos;))-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TDEST&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_rxd_tdest</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TDEST_WIDTH&apos;))-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TDEST&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txd_tuser</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TUSER_WIDTH&apos;))-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TUSER&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txc_tuser</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TUSER_WIDTH&apos;))-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TUSER&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_rxd_tuser</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_AXIS_TUSER_WIDTH&apos;))-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TUSER&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txd_tstrb</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;))/8-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TSTRB&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txc_tstrb</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode((id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;))/8)-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TSTRB&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_rxd_tstrb</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode((id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;))/8)-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TSTRB&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txd_tkeep</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode(id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;))/8-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TKEEP&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_txc_tkeep</spirit:name>
				<spirit:wire>
					<spirit:direction>out</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode((id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;))/8)-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TKEEP&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_TX_CTRL&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
			<spirit:port>
				<spirit:name>axi_str_rxd_tkeep</spirit:name>
				<spirit:wire>
					<spirit:direction>in</spirit:direction>
					<spirit:vector>
						<spirit:left spirit:format="long"
								spirit:resolve="dependent"
								spirit:dependency="spirit:decode((id(&apos;MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH&apos;))/8)-1">3</spirit:left>
						<spirit:right spirit:format="long">0</spirit:right>
					</spirit:vector>
					<spirit:wireTypeDefs>
						<spirit:wireTypeDef>
							<spirit:typeName>std_logic_vector</spirit:typeName>
							<spirit:viewNameRef>dummy_view</spirit:viewNameRef>
						</spirit:wireTypeDef>
					</spirit:wireTypeDefs>
					<spirit:driver>
						<spirit:defaultValue spirit:format="long">0</spirit:defaultValue>
					</spirit:driver>
				</spirit:wire>
				<spirit:vendorExtensions>
					<xilinx:portInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled xilinx:resolve="dependent"
									xilinx:dependency="((spirit:decode(id(&apos;MODELPARAM_VALUE.C_HAS_AXIS_TKEEP&apos;)) = 1) and ((spirit:decode(id(&apos;MODELPARAM_VALUE.C_USE_RX_DATA&apos;)))=1))">false</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:portInfo>
				</spirit:vendorExtensions>
			</spirit:port>
		</spirit:ports>
		<spirit:modelParameters>
			<spirit:modelParameter xsi:type="spirit:nameValueTypeType"
					spirit:dataType="STRING">
				<spirit:name>C_FAMILY</spirit:name>
				<spirit:displayName>CFAMILY</spirit:displayName>
				<spirit:value spirit:format="string"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_FAMILY">zynq</spirit:value>
				<spirit:vendorExtensions>
					<xilinx:parameterInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:parameterInfo>
				</spirit:vendorExtensions>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="INTEGER">
				<spirit:name>C_S_AXI_ID_WIDTH</spirit:name>
				<spirit:displayName>Width of all ID signals across the interface</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_S_AXI_ID_WIDTH">4</spirit:value>
				<spirit:vendorExtensions>
					<xilinx:parameterInfo>
						<xilinx:enablement>
							<xilinx:presence>optional</xilinx:presence>
							<xilinx:isEnabled>true</xilinx:isEnabled>
						</xilinx:enablement>
					</xilinx:parameterInfo>
				</spirit:vendorExtensions>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="INTEGER">
				<spirit:name>C_S_AXI_ADDR_WIDTH</spirit:name>
				<spirit:displayName>CSAXIADDRWIDTH</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH">32</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="INTEGER">
				<spirit:name>C_S_AXI_DATA_WIDTH</spirit:name>
				<spirit:displayName>CSAXIDATAWIDTH</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH">32</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="INTEGER">
				<spirit:name>C_S_AXI4_DATA_WIDTH</spirit:name>
				<spirit:displayName>CSAXI4DATAWIDTH</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_S_AXI4_DATA_WIDTH">32</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_TX_FIFO_DEPTH</spirit:name>
				<spirit:displayName>Tx Fifo Depth</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_TX_FIFO_DEPTH">512</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_RX_FIFO_DEPTH</spirit:name>
				<spirit:displayName>Rx Fifo Depth</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_RX_FIFO_DEPTH">512</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_TX_FIFO_PF_THRESHOLD</spirit:name>
				<spirit:displayName>Tx PF Threshold</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_TX_FIFO_PF_THRESHOLD"
						spirit:minimum="10"
						spirit:maximum="4091">507</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_TX_FIFO_PE_THRESHOLD</spirit:name>
				<spirit:displayName>TX PE Threshold</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_TX_FIFO_PE_THRESHOLD"
						spirit:minimum="2"
						spirit:maximum="4086">2</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_RX_FIFO_PF_THRESHOLD</spirit:name>
				<spirit:displayName>RX PF Threshold</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_RX_FIFO_PF_THRESHOLD"
						spirit:minimum="10"
						spirit:maximum="4091">507</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_RX_FIFO_PE_THRESHOLD</spirit:name>
				<spirit:displayName>RX PE Threshold</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_RX_FIFO_PE_THRESHOLD"
						spirit:minimum="2"
						spirit:maximum="4086">2</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_USE_TX_CUT_THROUGH</spirit:name>
				<spirit:displayName>Use Transmit Cut Through</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_USE_TX_CUT_THROUGH">0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_DATA_INTERFACE_TYPE</spirit:name>
				<spirit:displayName>Enable AXI4 FULL Interface</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_DATA_INTERFACE_TYPE">0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="std_logic_vector(31 downto 0)">
				<spirit:name>C_BASEADDR</spirit:name>
				<spirit:displayName>Base Address</spirit:displayName>
				<spirit:value spirit:format="bitString"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_BASEADDR"
						spirit:bitStringLength="32">0x80000000</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="std_logic_vector(31 downto 0)">
				<spirit:name>C_HIGHADDR</spirit:name>
				<spirit:displayName>High Address</spirit:displayName>
				<spirit:value spirit:format="bitString"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_HIGHADDR"
						spirit:bitStringLength="32">0x80000FFF</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="std_logic_vector(31 downto 0)">
				<spirit:name>C_AXI4_BASEADDR</spirit:name>
				<spirit:displayName>AXI4 Base Address</spirit:displayName>
				<spirit:value spirit:format="bitString"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI4_BASEADDR"
						spirit:bitStringLength="32">0x80001000</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="std_logic_vector(31 downto 0)">
				<spirit:name>C_AXI4_HIGHADDR</spirit:name>
				<spirit:displayName>AXI4 High Address</spirit:displayName>
				<spirit:value spirit:format="bitString"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXI4_HIGHADDR"
						spirit:bitStringLength="32">0x80001FFF</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_HAS_AXIS_TID</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_HAS_AXIS_TID">0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_HAS_AXIS_TDEST</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_HAS_AXIS_TDEST">0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_HAS_AXIS_TUSER</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_HAS_AXIS_TUSER">0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_HAS_AXIS_TSTRB</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_HAS_AXIS_TSTRB">0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_HAS_AXIS_TKEEP</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_HAS_AXIS_TKEEP">0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXIS_TID_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXIS_TID_WIDTH">4</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXIS_TDEST_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXIS_TDEST_WIDTH">4</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_AXIS_TUSER_WIDTH</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_AXIS_TUSER_WIDTH">4</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_USE_RX_CUT_THROUGH</spirit:name>
				<spirit:displayName>Use Receive Cut Through</spirit:displayName>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_USE_RX_CUT_THROUGH">0</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_USE_RX_DATA</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_USE_RX_DATA">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_USE_TX_DATA</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_USE_TX_DATA">1</spirit:value>
			</spirit:modelParameter>
			<spirit:modelParameter spirit:dataType="integer">
				<spirit:name>C_USE_TX_CTRL</spirit:name>
				<spirit:value spirit:format="long"
						spirit:resolve="generated"
						spirit:id="MODELPARAM_VALUE.C_USE_TX_CTRL">1</spirit:value>
			</spirit:modelParameter>
		</spirit:modelParameters>
	</spirit:model>
	<spirit:choices>
		<spirit:choice>
			<spirit:name>xilinx</spirit:name>
			<spirit:enumeration>1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choices_0</spirit:name>
			<spirit:enumeration spirit:text="512">512</spirit:enumeration>
			<spirit:enumeration spirit:text="1024">1024</spirit:enumeration>
			<spirit:enumeration spirit:text="2048">2048</spirit:enumeration>
			<spirit:enumeration spirit:text="4096">4096</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choices_1</spirit:name>
			<spirit:enumeration spirit:text="512">512</spirit:enumeration>
			<spirit:enumeration spirit:text="1024">1024</spirit:enumeration>
			<spirit:enumeration spirit:text="2048">2048</spirit:enumeration>
			<spirit:enumeration spirit:text="4096">4096</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choices_2</spirit:name>
			<spirit:enumeration spirit:text="32">32</spirit:enumeration>
			<spirit:enumeration spirit:text="64">64</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choices_3</spirit:name>
			<spirit:enumeration spirit:text="false">0</spirit:enumeration>
			<spirit:enumeration spirit:text="true">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choices_4</spirit:name>
			<spirit:enumeration spirit:text="AXI4 Lite">0</spirit:enumeration>
			<spirit:enumeration spirit:text="AXI4">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choices_5</spirit:name>
			<spirit:enumeration spirit:text="false">0</spirit:enumeration>
			<spirit:enumeration spirit:text="true">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choices_6</spirit:name>
			<spirit:enumeration spirit:text="32">32</spirit:enumeration>
			<spirit:enumeration spirit:text="64">64</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choices_7</spirit:name>
			<spirit:enumeration spirit:text="false">0</spirit:enumeration>
			<spirit:enumeration spirit:text="true">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choices_8</spirit:name>
			<spirit:enumeration spirit:text="false">0</spirit:enumeration>
			<spirit:enumeration spirit:text="true">1</spirit:enumeration>
		</spirit:choice>
		<spirit:choice>
			<spirit:name>choices_9</spirit:name>
			<spirit:enumeration spirit:text="false">0</spirit:enumeration>
			<spirit:enumeration spirit:text="true">1</spirit:enumeration>
		</spirit:choice>
	</spirit:choices>
	<spirit:description>axi_fifo_mm_s</spirit:description>
	<spirit:parameters>
		<spirit:parameter>
			<spirit:name>C_S_AXI_PROTOCOL</spirit:name>
			<spirit:displayName>C S Axi Protocol</spirit:displayName>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_S_AXI_PROTOCOL"
					spirit:order="3800"
					spirit:configGroups="2 UnGrouped">AXI4LITE</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXI_STR_TXC_PROTOCOL</spirit:name>
			<spirit:displayName>C Axi Str Txc Protocol</spirit:displayName>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXI_STR_TXC_PROTOCOL"
					spirit:order="3700"
					spirit:configGroups="2 UnGrouped">XIL_AXI_STREAM_ETH_CTRL</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXI_STR_TXD_PROTOCOL</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXI_STR_TXD_PROTOCOL"
					spirit:order="3600"
					spirit:configGroups="2 UnGrouped">XIL_AXI_STREAM_ETH_DATA</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXI_STR_RXD_PROTOCOL</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXI_STR_RXD_PROTOCOL"
					spirit:order="3500"
					spirit:configGroups="2 UnGrouped">XIL_AXI_STREAM_ETH_DATA</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>Component_Name</spirit:name>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.COMPONENT_NAME"
					spirit:order="21">zynq_system_axi_fifo_mm_s_0_0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_S_AXI_ID_WIDTH</spirit:name>
			<spirit:displayName>Width of all ID signals across the interface</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_S_AXI_ID_WIDTH"
					spirit:order="2200"
					spirit:configGroups="1 UnGrouped"
					spirit:minimum="1"
					spirit:maximum="4">4</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_BASEADDR</spirit:name>
			<spirit:displayName>Base Address</spirit:displayName>
			<spirit:value spirit:format="bitString"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_BASEADDR"
					spirit:order="2100"
					spirit:bitStringLength="32">0x80000000</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_USE_TX_CUT_THROUGH</spirit:name>
			<spirit:displayName>Use Transmit Cut Through</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_USE_TX_CUT_THROUGH"
					spirit:choiceRef="choices_5"
					spirit:order="2000">0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_DATA_INTERFACE_TYPE</spirit:name>
			<spirit:displayName>Data Interface Options</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_DATA_INTERFACE_TYPE"
					spirit:choiceRef="choices_4"
					spirit:order="1900">0</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_RX_FIFO_PE_THRESHOLD</spirit:name>
			<spirit:displayName>Receive Fifo Programable Empty Threshold</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_RX_FIFO_PE_THRESHOLD"
					spirit:order="1800"
					spirit:minimum="2"
					spirit:maximum="502"
					spirit:rangeType="long">2</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_RX_FIFO_PF_THRESHOLD</spirit:name>
			<spirit:displayName>Receive Fifo Programable Full Threshold</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_RX_FIFO_PF_THRESHOLD"
					spirit:order="1700"
					spirit:minimum="10"
					spirit:maximum="507"
					spirit:rangeType="long">507</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_TX_FIFO_PE_THRESHOLD</spirit:name>
			<spirit:displayName>Transmit Fifo Programable Empty Threshold</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_TX_FIFO_PE_THRESHOLD"
					spirit:order="1600"
					spirit:minimum="2"
					spirit:maximum="502"
					spirit:rangeType="long">2</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_TX_FIFO_PF_THRESHOLD</spirit:name>
			<spirit:displayName>Transmit Fifo Programable Full Threshold</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_TX_FIFO_PF_THRESHOLD"
					spirit:order="1500"
					spirit:minimum="10"
					spirit:maximum="507"
					spirit:rangeType="long">507</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_RX_FIFO_DEPTH</spirit:name>
			<spirit:displayName>Receive Fifo Depth</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_RX_FIFO_DEPTH"
					spirit:choiceRef="choices_1"
					spirit:order="1400">512</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_TX_FIFO_DEPTH</spirit:name>
			<spirit:displayName>Transmit Fifo Depth</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_TX_FIFO_DEPTH"
					spirit:choiceRef="choices_0"
					spirit:order="1300">512</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_HIGHADDR</spirit:name>
			<spirit:displayName>High Address</spirit:displayName>
			<spirit:description>High address should be atleast 4k more than Base addess.</spirit:description>
			<spirit:value spirit:format="bitString"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_HIGHADDR"
					spirit:order="1200"
					spirit:bitStringLength="32">0x80000FFF</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_S_AXI_DATA_WIDTH</spirit:name>
			<spirit:displayName>AXI Data Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_S_AXI_DATA_WIDTH"
					spirit:choiceRef="choices_2"
					spirit:order="1100">32</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_S_AXI4_DATA_WIDTH</spirit:name>
			<spirit:displayName>AXI4 Data Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_S_AXI4_DATA_WIDTH"
					spirit:choiceRef="choices_6"
					spirit:order="4000">32</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXI4_BASEADDR</spirit:name>
			<spirit:displayName>AXI4 Base Address</spirit:displayName>
			<spirit:value spirit:format="bitString"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXI4_BASEADDR"
					spirit:order="1250"
					spirit:bitStringLength="32">0x80001000</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXI4_HIGHADDR</spirit:name>
			<spirit:displayName>AXI4 High Address</spirit:displayName>
			<spirit:description>High address should be atleast 4k more than Base addess.</spirit:description>
			<spirit:value spirit:format="bitString"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXI4_HIGHADDR"
					spirit:order="1260"
					spirit:bitStringLength="32">0x80001FFF</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_S_AXI_ADDR_WIDTH</spirit:name>
			<spirit:displayName>CSAXIADDRWIDTH</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_S_AXI_ADDR_WIDTH">32</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_FAMILY</spirit:name>
			<spirit:displayName>CFAMILY</spirit:displayName>
			<spirit:value spirit:format="string"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_FAMILY">virtex6</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXI_STR_TXC_TDATA_WIDTH</spirit:name>
			<spirit:displayName>Axi Str TXC Tdata Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXI_STR_TXC_TDATA_WIDTH">32</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXI_STR_TXD_TDATA_WIDTH</spirit:name>
			<spirit:displayName>Axi Str TXD Tdata Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXI_STR_TXD_TDATA_WIDTH">32</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXI_STR_RXD_TDATA_WIDTH</spirit:name>
			<spirit:displayName>Axi Str RXD Tdata Width</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXI_STR_RXD_TDATA_WIDTH">32</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_HAS_AXIS_TUSER</spirit:name>
			<spirit:displayName>TUSER Width</spirit:displayName>
			<spirit:value spirit:format="bool"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_HAS_AXIS_TUSER"
					spirit:order="1270">false</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_HAS_AXIS_TID</spirit:name>
			<spirit:displayName>TID Width</spirit:displayName>
			<spirit:value spirit:format="bool"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_HAS_AXIS_TID"
					spirit:order="1280">false</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_HAS_AXIS_TDEST</spirit:name>
			<spirit:displayName>TDEST Width</spirit:displayName>
			<spirit:value spirit:format="bool"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_HAS_AXIS_TDEST"
					spirit:order="1290">false</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_HAS_AXIS_TSTRB</spirit:name>
			<spirit:displayName>TSTRB</spirit:displayName>
			<spirit:value spirit:format="bool"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_HAS_AXIS_TSTRB"
					spirit:order="1305">false</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_HAS_AXIS_TKEEP</spirit:name>
			<spirit:displayName>TKEEP</spirit:displayName>
			<spirit:value spirit:format="bool"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_HAS_AXIS_TKEEP"
					spirit:order="1310">false</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXIS_TUSER_WIDTH</spirit:name>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXIS_TUSER_WIDTH"
					spirit:order="4330"
					spirit:minimum="4"
					spirit:maximum="16">4</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXIS_TDEST_WIDTH</spirit:name>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXIS_TDEST_WIDTH"
					spirit:order="1340"
					spirit:minimum="1"
					spirit:maximum="4">4</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_AXIS_TID_WIDTH</spirit:name>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_AXIS_TID_WIDTH"
					spirit:order="1350"
					spirit:minimum="1"
					spirit:maximum="8">4</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_USE_RX_CUT_THROUGH</spirit:name>
			<spirit:displayName>Use Receive Cut Through</spirit:displayName>
			<spirit:value spirit:format="bool"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_USE_RX_CUT_THROUGH"
					spirit:order="1410">false</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_USE_TX_DATA</spirit:name>
			<spirit:displayName>Enable Transmit Data</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_USE_TX_DATA"
					spirit:choiceRef="choices_7"
					spirit:order="1000">1</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_USE_RX_DATA</spirit:name>
			<spirit:displayName>Enable Receive Data</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_USE_RX_DATA"
					spirit:choiceRef="choices_8"
					spirit:order="1010">1</spirit:value>
		</spirit:parameter>
		<spirit:parameter>
			<spirit:name>C_USE_TX_CTRL</spirit:name>
			<spirit:displayName>Enable Transmit Control</spirit:displayName>
			<spirit:value spirit:format="long"
					spirit:resolve="user"
					spirit:id="PARAM_VALUE.C_USE_TX_CTRL"
					spirit:choiceRef="choices_9"
					spirit:order="1020">1</spirit:value>
		</spirit:parameter>
	</spirit:parameters>
	<spirit:vendorExtensions>
		<xilinx:coreExtensions>
			<xilinx:supportedFamilies>
				<xilinx:family xilinx:lifeCycle="Production">virtex7</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">virtex7l</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qvirtex7</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qvirtex7l</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">kintex7</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">kintex7l</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qkintex7</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qkintex7l</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">aartix7</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">artix7l</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qartix7</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">zynq</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">azynq</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Production">qzynq</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Beta">virtex8</xilinx:family>
				<xilinx:family xilinx:lifeCycle="Pre-Production">kintex8</xilinx:family>
			</xilinx:supportedFamilies>
			<xilinx:taxonomies>
				<xilinx:taxonomy>/Embedded_Processing/AXI_Infrastructure</xilinx:taxonomy>
				<xilinx:taxonomy>/AXI_Infrastructure</xilinx:taxonomy>
			</xilinx:taxonomies>
			<xilinx:displayName>AXI-Stream FIFO</xilinx:displayName>
			<xilinx:vendorURL>http://www.xilinx.com</xilinx:vendorURL>
			<xilinx:coreRevision>3</xilinx:coreRevision>
			<xilinx:upgrades>
				<xilinx:canUpgradeFrom>xilinx.com:ip:axi_fifo_mm_s:3.00.b</xilinx:canUpgradeFrom>
				<xilinx:canUpgradeFrom>xilinx.com:ip:axi_fifo_mm_s:3.00.a</xilinx:canUpgradeFrom>
				<xilinx:canUpgradeFrom>xilinx.com:ip:axi_fifo_mm_s:2.01.a</xilinx:canUpgradeFrom>
			</xilinx:upgrades>
			<xilinx:coreCreationDateTime>2013-12-02T19:25:56Z</xilinx:coreCreationDateTime>
		</xilinx:coreExtensions>
		<xilinx:packagingInfo>
			<xilinx:xilinxVersion>2013.4</xilinx:xilinxVersion>
			<xilinx:parameterAbstractionMaps>
				<xilinx:parameterAbstractionMap>
					<xilinx:parameterAbstractionType xilinx:vendor="xilinx.com"
							xilinx:library="paramabs.edk"
							xilinx:name="systemTool"
							xilinx:version="1.0"/>
					<xilinx:parameterMap xilinx:logicalName="EDK_IPTYPE"
							xilinx:localID="PARAM_VALUE.EDK_IPTYPE"/>
				</xilinx:parameterAbstractionMap>
			</xilinx:parameterAbstractionMaps>
		</xilinx:packagingInfo>
	</spirit:vendorExtensions>
</spirit:component>

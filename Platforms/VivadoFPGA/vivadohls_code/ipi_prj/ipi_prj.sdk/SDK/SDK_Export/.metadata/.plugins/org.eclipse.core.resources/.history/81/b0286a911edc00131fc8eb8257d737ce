/*
 * Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include "vivado_core.h"
#include <stdio.h>
#include "platform.h"

//*MC Multicore Activity Thread Function*
 void * multicore_montecarlo_activity_thread(void* thread_arg){

     //**Loop Data Structures**
     unsigned int thread_paths = ((struct thread_data*) thread_arg)->thread_paths;
     unsigned int rng_seed = ((struct thread_data*) thread_arg)->thread_rng_seed;
     underlying_attributes u_a_0;
     underlying_variables u_v_0;
     option_attributes o_a_0;
     option_variables o_v_0;

     //**Initialising Attributes*
     underlying_underlying_init(underlying_0_rfir,underlying_0_current_price,&u_a_0);
     option_derivative_init(option_0_time_period,option_0_call,option_0_strike_price,&o_a_0);
     o_v_0.delta_time = o_a_0.time_period/default_points;

     //**Creating kernel argument*
     standard_underlying_attributes kernel_u_a_0;
     standard_derivative_attributes kernel_o_a_0;
     kernel_u_a_0.rfir = u_a_0.rfir;
     kernel_u_a_0.current_price = u_a_0.current_price;
     kernel_o_a_0.time_period = o_a_0.time_period;
     kernel_o_a_0.call = o_a_0.call;
     kernel_o_a_0.strike_price = o_a_0.strike_price;

     //**Batching Loop**
     unsigned int chunks = thread_paths/PATHS;
     FP_t temp_value_0 = 0.0;
     FP_t temp_value_sqrd_0 = 0.0;
     FP_t kernel_value_0[PATHS];
     rng_state_t seed_0;
     for(i=0;i<chunks;++i){
         //Add vivado call
         //***Aggregating the result**
         for(j=0;j<PATHS;++j){
             temp_value_0 += kernel_value_0[j];
             temp_value_sqrd_0 += kernel_value_0[j]*kernel_value_0[j];
             }
         }

     //**Passing data back to main thread**
     ((struct thread_data*) thread_arg)->thread_result[0] = temp_value_0;
     ((struct thread_data*) thread_arg)->thread_result_sqrd[0] = temp_value_sqrd_0;
 }


int main()
{
    init_platform();



    return 0;
}

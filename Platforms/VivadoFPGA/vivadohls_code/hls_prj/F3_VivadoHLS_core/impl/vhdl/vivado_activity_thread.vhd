-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vivado_activity_thread is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_req_din : OUT STD_LOGIC;
    a_req_full_n : IN STD_LOGIC;
    a_req_write : OUT STD_LOGIC;
    a_rsp_empty_n : IN STD_LOGIC;
    a_rsp_read : OUT STD_LOGIC;
    a_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    a_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_rfir : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_current_price : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_volatility : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_initial_volatility : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_volatility_volatility : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_rho : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_kappa : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_theta : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_correlation_matrix_0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_correlation_matrix_0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_correlation_matrix_1_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_correlation_matrix_1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_second_barrier : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_barrier : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_out : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_down : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_strike_price : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_time_period : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_call : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_points : IN STD_LOGIC_VECTOR (31 downto 0);
    seed_0_s1 : IN STD_LOGIC_VECTOR (31 downto 0);
    seed_0_s2 : IN STD_LOGIC_VECTOR (31 downto 0);
    seed_0_s3 : IN STD_LOGIC_VECTOR (31 downto 0);
    seed_0_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    thread_result_0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of vivado_activity_thread is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vivado_activity_thread,hls_ip_2013_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=305018,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (5 downto 0) := "000011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (5 downto 0) := "000101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (5 downto 0) := "000110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (5 downto 0) := "000111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (5 downto 0) := "001001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (5 downto 0) := "001011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (5 downto 0) := "001100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (5 downto 0) := "001101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (5 downto 0) := "001110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (5 downto 0) := "001111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (5 downto 0) := "010001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (5 downto 0) := "010010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (5 downto 0) := "010011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (5 downto 0) := "010100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (5 downto 0) := "010101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (5 downto 0) := "010110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (5 downto 0) := "011000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (5 downto 0) := "011010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (5 downto 0) := "011011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (5 downto 0) := "011100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (5 downto 0) := "011101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (5 downto 0) := "011110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (5 downto 0) := "011111";
    constant ap_ST_st33_fsm_32 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_ST_st34_fsm_33 : STD_LOGIC_VECTOR (5 downto 0) := "100001";
    constant ap_ST_st35_fsm_34 : STD_LOGIC_VECTOR (5 downto 0) := "100010";
    constant ap_ST_st36_fsm_35 : STD_LOGIC_VECTOR (5 downto 0) := "100011";
    constant ap_ST_st37_fsm_36 : STD_LOGIC_VECTOR (5 downto 0) := "100100";
    constant ap_ST_st38_fsm_37 : STD_LOGIC_VECTOR (5 downto 0) := "100101";
    constant ap_ST_st39_fsm_38 : STD_LOGIC_VECTOR (5 downto 0) := "100110";
    constant ap_ST_st40_fsm_39 : STD_LOGIC_VECTOR (5 downto 0) := "100111";
    constant ap_ST_st41_fsm_40 : STD_LOGIC_VECTOR (5 downto 0) := "101000";
    constant ap_ST_st42_fsm_41 : STD_LOGIC_VECTOR (5 downto 0) := "101001";
    constant ap_ST_st43_fsm_42 : STD_LOGIC_VECTOR (5 downto 0) := "101010";
    constant ap_ST_st44_fsm_43 : STD_LOGIC_VECTOR (5 downto 0) := "101011";
    constant ap_ST_st45_fsm_44 : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_ST_st46_fsm_45 : STD_LOGIC_VECTOR (5 downto 0) := "101101";
    constant ap_ST_st47_fsm_46 : STD_LOGIC_VECTOR (5 downto 0) := "101110";
    constant ap_ST_st48_fsm_47 : STD_LOGIC_VECTOR (5 downto 0) := "101111";
    constant ap_ST_st49_fsm_48 : STD_LOGIC_VECTOR (5 downto 0) := "110000";
    constant ap_ST_st50_fsm_49 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_ST_pp0_stg0_fsm_50 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_ST_st54_fsm_51 : STD_LOGIC_VECTOR (5 downto 0) := "110011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv64_3FF0000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "0011111111110000000000000000000000000000000000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv32_41200000 : STD_LOGIC_VECTOR (31 downto 0) := "01000001001000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal thread_result_00data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal thread_result_00vld_reg : STD_LOGIC := '0';
    signal thread_result_00ack_out : STD_LOGIC;
    signal indvar_reg_259 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_271_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_310 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_reg_449 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal delta_time_0_reg_413 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_290_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_439 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_276_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_444 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_314_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_1_fu_326_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_1_reg_457 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_addr_reg_462 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal spot_price_0_0_in_reg_467 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_287_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal spot_price_0_reg_472 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp_1_fu_357_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal pp_1_reg_481 : STD_LOGIC_VECTOR (3 downto 0);
    signal u_v_0_gamma_reg_486 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_305_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_502 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond2_reg_502_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_205 : BOOLEAN;
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal indvar_next_fu_386_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal isIter0_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter0_reg_516 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_isIter0_reg_516_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal thread_result_buff_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal thread_result_buff_load_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal thread_result_buff_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal thread_result_buff_ce0 : STD_LOGIC;
    signal thread_result_buff_we0 : STD_LOGIC;
    signal thread_result_buff_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_reg_212 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_pn_reg_224 : STD_LOGIC_VECTOR (63 downto 0);
    signal u_v_gamma_read_assign_reg_236 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp_reg_248 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_fu_392_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_341_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_271_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_276_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_276_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_281_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_281_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_287_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_290_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_294_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_300_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_300_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_305_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_294_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_fu_332_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal o_v_0_value_fu_363_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_271_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal exitcond_fu_351_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_271_ce : STD_LOGIC;
    signal grp_fu_276_ce : STD_LOGIC;
    signal grp_fu_281_ce : STD_LOGIC;
    signal grp_fu_287_ce : STD_LOGIC;
    signal grp_fu_290_ce : STD_LOGIC;
    signal grp_fu_294_ce : STD_LOGIC;
    signal grp_fu_294_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_300_ce : STD_LOGIC;
    signal grp_fu_305_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_305_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);

    component vivado_activity_thread_faddfsub_32ns_32ns_32_4_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vivado_activity_thread_fmul_32ns_32ns_32_3_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vivado_activity_thread_fdiv_32ns_32ns_32_12 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vivado_activity_thread_fptrunc_64ns_32_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vivado_activity_thread_fpext_32ns_64_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vivado_activity_thread_fcmp_32ns_32ns_1_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vivado_activity_thread_dmul_64ns_64ns_64_5_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vivado_activity_thread_dexp_64ns_64ns_64_15_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component vivado_activity_thread_thread_result_buff IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    thread_result_buff_U : component vivado_activity_thread_thread_result_buff
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => thread_result_buff_address0,
        ce0 => thread_result_buff_ce0,
        we0 => thread_result_buff_we0,
        d0 => thread_result_buff_d0,
        q0 => thread_result_buff_q0);

    vivado_activity_thread_faddfsub_32ns_32ns_32_4_full_dsp_U1 : component vivado_activity_thread_faddfsub_32ns_32ns_32_4_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_271_p0,
        din1 => grp_fu_271_p1,
        opcode => grp_fu_271_opcode,
        ce => grp_fu_271_ce,
        dout => grp_fu_271_p2);

    vivado_activity_thread_fmul_32ns_32ns_32_3_max_dsp_U2 : component vivado_activity_thread_fmul_32ns_32ns_32_3_max_dsp
    generic map (
        ID => 2,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_276_p0,
        din1 => grp_fu_276_p1,
        ce => grp_fu_276_ce,
        dout => grp_fu_276_p2);

    vivado_activity_thread_fdiv_32ns_32ns_32_12_U3 : component vivado_activity_thread_fdiv_32ns_32ns_32_12
    generic map (
        ID => 3,
        NUM_STAGE => 12,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_281_p0,
        din1 => grp_fu_281_p1,
        ce => grp_fu_281_ce,
        dout => grp_fu_281_p2);

    vivado_activity_thread_fptrunc_64ns_32_3_U4 : component vivado_activity_thread_fptrunc_64ns_32_3
    generic map (
        ID => 4,
        NUM_STAGE => 3,
        din0_WIDTH => 64,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_287_p0,
        ce => grp_fu_287_ce,
        dout => grp_fu_287_p1);

    vivado_activity_thread_fpext_32ns_64_3_U5 : component vivado_activity_thread_fpext_32ns_64_3
    generic map (
        ID => 5,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_290_p0,
        ce => grp_fu_290_ce,
        dout => grp_fu_290_p1);

    vivado_activity_thread_fcmp_32ns_32ns_1_3_U6 : component vivado_activity_thread_fcmp_32ns_32ns_1_3
    generic map (
        ID => 6,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_294_p0,
        din1 => grp_fu_294_p1,
        ce => grp_fu_294_ce,
        opcode => grp_fu_294_opcode,
        dout => grp_fu_294_p2);

    vivado_activity_thread_dmul_64ns_64ns_64_5_max_dsp_U7 : component vivado_activity_thread_dmul_64ns_64ns_64_5_max_dsp
    generic map (
        ID => 7,
        NUM_STAGE => 5,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_300_p0,
        din1 => grp_fu_300_p1,
        ce => grp_fu_300_ce,
        dout => grp_fu_300_p2);

    vivado_activity_thread_dexp_64ns_64ns_64_15_full_dsp_U8 : component vivado_activity_thread_dexp_64ns_64ns_64_15_full_dsp
    generic map (
        ID => 8,
        NUM_STAGE => 15,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_305_p0,
        din1 => grp_fu_305_p1,
        ce => grp_fu_305_ce,
        dout => grp_fu_305_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = exitcond2_fu_380_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_320_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_lv1_0 = exitcond2_fu_380_p2))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_320_p2))) or ((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = exitcond2_fu_380_p2))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_320_p2)))) then 
                    ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- thread_result_00data_reg assign process. --
    thread_result_00data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                thread_result_00data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = thread_result_00vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = thread_result_00vld_reg) and (ap_const_logic_1 = thread_result_00ack_out)))) then 
                    thread_result_00data_reg <= thread_result_0;
                end if; 
            end if;
        end if;
    end process;


    -- thread_result_00vld_reg assign process. --
    thread_result_00vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- indvar_reg_259 assign process. --
    indvar_reg_259_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_320_p2)))) then 
                indvar_reg_259 <= ap_const_lv10_0;
            elsif (((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_lv1_0 = exitcond2_fu_380_p2))) then 
                indvar_reg_259 <= indvar_next_fu_386_p2;
            end if; 
        end if;
    end process;

    -- p_reg_212 assign process. --
    p_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st50_fsm_49 = ap_CS_fsm)) then 
                p_reg_212 <= p_1_reg_457;
            elsif ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then 
                p_reg_212 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- pp_reg_248 assign process. --
    pp_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st45_fsm_44 = ap_CS_fsm)) then 
                pp_reg_248 <= pp_1_reg_481;
            elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_320_p2))) then 
                pp_reg_248 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    -- tmp_1_pn_reg_224 assign process. --
    tmp_1_pn_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st45_fsm_44 = ap_CS_fsm)) then 
                tmp_1_pn_reg_224 <= grp_fu_305_p2;
            elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_320_p2))) then 
                tmp_1_pn_reg_224 <= ap_const_lv64_3FF0000000000000;
            end if; 
        end if;
    end process;

    -- u_v_gamma_read_assign_reg_236 assign process. --
    u_v_gamma_read_assign_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st45_fsm_44 = ap_CS_fsm)) then 
                u_v_gamma_read_assign_reg_236 <= u_v_0_gamma_reg_486;
            elsif (((ap_ST_st16_fsm_15 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond1_fu_320_p2))) then 
                u_v_gamma_read_assign_reg_236 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st16_fsm_15 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond1_fu_320_p2)))) then
                a_addr_reg_462(0) <= tmp_6_fu_341_p1(32 - 1 downto 0)(0);
    a_addr_reg_462(1) <= tmp_6_fu_341_p1(32 - 1 downto 0)(1);
    a_addr_reg_462(2) <= tmp_6_fu_341_p1(32 - 1 downto 0)(2);
    a_addr_reg_462(3) <= tmp_6_fu_341_p1(32 - 1 downto 0)(3);
    a_addr_reg_462(4) <= tmp_6_fu_341_p1(32 - 1 downto 0)(4);
    a_addr_reg_462(5) <= tmp_6_fu_341_p1(32 - 1 downto 0)(5);
    a_addr_reg_462(6) <= tmp_6_fu_341_p1(32 - 1 downto 0)(6);
    a_addr_reg_462(7) <= tmp_6_fu_341_p1(32 - 1 downto 0)(7);
    a_addr_reg_462(8) <= tmp_6_fu_341_p1(32 - 1 downto 0)(8);
    a_addr_reg_462(9) <= tmp_6_fu_341_p1(32 - 1 downto 0)(9);
    a_addr_reg_462(10) <= tmp_6_fu_341_p1(32 - 1 downto 0)(10);
    a_addr_reg_462(11) <= tmp_6_fu_341_p1(32 - 1 downto 0)(11);
    a_addr_reg_462(12) <= tmp_6_fu_341_p1(32 - 1 downto 0)(12);
    a_addr_reg_462(13) <= tmp_6_fu_341_p1(32 - 1 downto 0)(13);
    a_addr_reg_462(14) <= tmp_6_fu_341_p1(32 - 1 downto 0)(14);
    a_addr_reg_462(15) <= tmp_6_fu_341_p1(32 - 1 downto 0)(15);
    a_addr_reg_462(16) <= tmp_6_fu_341_p1(32 - 1 downto 0)(16);
    a_addr_reg_462(17) <= tmp_6_fu_341_p1(32 - 1 downto 0)(17);
    a_addr_reg_462(18) <= tmp_6_fu_341_p1(32 - 1 downto 0)(18);
    a_addr_reg_462(19) <= tmp_6_fu_341_p1(32 - 1 downto 0)(19);
    a_addr_reg_462(20) <= tmp_6_fu_341_p1(32 - 1 downto 0)(20);
    a_addr_reg_462(21) <= tmp_6_fu_341_p1(32 - 1 downto 0)(21);
    a_addr_reg_462(22) <= tmp_6_fu_341_p1(32 - 1 downto 0)(22);
    a_addr_reg_462(23) <= tmp_6_fu_341_p1(32 - 1 downto 0)(23);
    a_addr_reg_462(24) <= tmp_6_fu_341_p1(32 - 1 downto 0)(24);
    a_addr_reg_462(25) <= tmp_6_fu_341_p1(32 - 1 downto 0)(25);
    a_addr_reg_462(26) <= tmp_6_fu_341_p1(32 - 1 downto 0)(26);
    a_addr_reg_462(27) <= tmp_6_fu_341_p1(32 - 1 downto 0)(27);
    a_addr_reg_462(28) <= tmp_6_fu_341_p1(32 - 1 downto 0)(28);
    a_addr_reg_462(29) <= tmp_6_fu_341_p1(32 - 1 downto 0)(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then
                ap_reg_ppstg_exitcond2_reg_502_pp0_it1 <= exitcond2_reg_502;
                ap_reg_ppstg_isIter0_reg_516_pp0_it1 <= isIter0_reg_516;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st12_fsm_11 = ap_CS_fsm)) then
                delta_time_0_reg_413 <= grp_fu_281_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then
                exitcond2_reg_502 <= exitcond2_fu_380_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_lv1_0 = exitcond2_fu_380_p2))) then
                isIter0_reg_516 <= isIter0_fu_397_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st16_fsm_15 = ap_CS_fsm)) then
                p_1_reg_457 <= p_1_fu_326_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then
                pp_1_reg_481 <= pp_1_fu_357_p2;
                spot_price_0_reg_472 <= grp_fu_287_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st49_fsm_48 = ap_CS_fsm) and not((tmp_8_reg_449 = ap_const_lv1_0))) or ((ap_ST_st49_fsm_48 = ap_CS_fsm) and (tmp_8_reg_449 = ap_const_lv1_0)))) then
                reg_310 <= grp_fu_271_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st21_fsm_20 = ap_CS_fsm)) then
                spot_price_0_0_in_reg_467 <= grp_fu_300_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and (ap_const_lv1_0 = exitcond2_reg_502))) then
                thread_result_buff_load_reg_520 <= thread_result_buff_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st15_fsm_14 = ap_CS_fsm)) then
                tmp_8_reg_449 <= tmp_8_fu_314_p2;
                tmp_9_reg_439 <= grp_fu_290_p1;
                tmp_i_reg_444 <= grp_fu_276_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st30_fsm_29 = ap_CS_fsm)) then
                tmp_s_reg_492 <= grp_fu_290_p1;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then
                u_v_0_gamma_reg_486 <= grp_fu_271_p2;
            end if;
        end if;
    end process;
    thread_result_00vld_reg <= '0';
    a_addr_reg_462(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond1_fu_320_p2 , exitcond2_fu_380_p2 , ap_reg_ppiten_pp0_it0 , ap_reg_ppiten_pp0_it1 , ap_sig_bdd_205 , ap_reg_ppiten_pp0_it2 , exitcond_fu_351_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                ap_NS_fsm <= ap_ST_st10_fsm_9;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                if (not((ap_const_lv1_0 = exitcond1_fu_320_p2))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_50;
                else
                    ap_NS_fsm <= ap_ST_st17_fsm_16;
                end if;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st23_fsm_22;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                if (not((ap_const_lv1_0 = exitcond_fu_351_p2))) then
                    ap_NS_fsm <= ap_ST_st46_fsm_45;
                else
                    ap_NS_fsm <= ap_ST_st25_fsm_24;
                end if;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st33_fsm_32;
            when ap_ST_st33_fsm_32 => 
                ap_NS_fsm <= ap_ST_st34_fsm_33;
            when ap_ST_st34_fsm_33 => 
                ap_NS_fsm <= ap_ST_st35_fsm_34;
            when ap_ST_st35_fsm_34 => 
                ap_NS_fsm <= ap_ST_st36_fsm_35;
            when ap_ST_st36_fsm_35 => 
                ap_NS_fsm <= ap_ST_st37_fsm_36;
            when ap_ST_st37_fsm_36 => 
                ap_NS_fsm <= ap_ST_st38_fsm_37;
            when ap_ST_st38_fsm_37 => 
                ap_NS_fsm <= ap_ST_st39_fsm_38;
            when ap_ST_st39_fsm_38 => 
                ap_NS_fsm <= ap_ST_st40_fsm_39;
            when ap_ST_st40_fsm_39 => 
                ap_NS_fsm <= ap_ST_st41_fsm_40;
            when ap_ST_st41_fsm_40 => 
                ap_NS_fsm <= ap_ST_st42_fsm_41;
            when ap_ST_st42_fsm_41 => 
                ap_NS_fsm <= ap_ST_st43_fsm_42;
            when ap_ST_st43_fsm_42 => 
                ap_NS_fsm <= ap_ST_st44_fsm_43;
            when ap_ST_st44_fsm_43 => 
                ap_NS_fsm <= ap_ST_st45_fsm_44;
            when ap_ST_st45_fsm_44 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st46_fsm_45 => 
                ap_NS_fsm <= ap_ST_st47_fsm_46;
            when ap_ST_st47_fsm_46 => 
                ap_NS_fsm <= ap_ST_st48_fsm_47;
            when ap_ST_st48_fsm_47 => 
                ap_NS_fsm <= ap_ST_st49_fsm_48;
            when ap_ST_st49_fsm_48 => 
                ap_NS_fsm <= ap_ST_st50_fsm_49;
            when ap_ST_st50_fsm_49 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_pp0_stg0_fsm_50 => 
                if ((not(((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = exitcond2_fu_380_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_50;
                elsif ((((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = exitcond2_fu_380_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_st54_fsm_51;
                else
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_50;
                end if;
            when ap_ST_st54_fsm_51 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    a_address <= a_addr_reg_462;
    a_dataout <= thread_result_buff_load_reg_520;

    -- a_req_din assign process. --
    a_req_din_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond2_reg_502_pp0_it1, ap_sig_bdd_205, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_isIter0_reg_516_pp0_it1)
    begin
        if ((((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_502_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter0_reg_516_pp0_it1))) or ((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_502_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            a_req_din <= ap_const_logic_1;
        else 
            a_req_din <= ap_const_logic_0;
        end if; 
    end process;


    -- a_req_write assign process. --
    a_req_write_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond2_reg_502_pp0_it1, ap_sig_bdd_205, ap_reg_ppiten_pp0_it2, ap_reg_ppstg_isIter0_reg_516_pp0_it1)
    begin
        if ((((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_502_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter0_reg_516_pp0_it1))) or ((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_502_pp0_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))))) then 
            a_req_write <= ap_const_logic_1;
        else 
            a_req_write <= ap_const_logic_0;
        end if; 
    end process;

    a_rsp_read <= ap_const_logic_0;
    a_size <= ap_const_lv32_3E8;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st54_fsm_51 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st54_fsm_51 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_205 assign process. --
    ap_sig_bdd_205_assign_proc : process(a_req_full_n, ap_reg_ppstg_exitcond2_reg_502_pp0_it1)
    begin
                ap_sig_bdd_205 <= ((a_req_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond2_reg_502_pp0_it1));
    end process;

    exitcond1_fu_320_p2 <= "1" when (p_reg_212 = ap_const_lv10_3E8) else "0";
    exitcond2_fu_380_p2 <= "1" when (indvar_reg_259 = ap_const_lv10_3E8) else "0";
    exitcond_fu_351_p2 <= "1" when (pp_reg_248 = ap_const_lv4_A) else "0";
    grp_fu_271_ce <= ap_const_logic_1;

    -- grp_fu_271_opcode assign process. --
    grp_fu_271_opcode_assign_proc : process(ap_CS_fsm, tmp_8_reg_449, exitcond_fu_351_p2)
    begin
        if (((not((tmp_8_reg_449 = ap_const_lv1_0)) and (ap_ST_st46_fsm_45 = ap_CS_fsm)) or ((tmp_8_reg_449 = ap_const_lv1_0) and (ap_ST_st46_fsm_45 = ap_CS_fsm)))) then 
            grp_fu_271_opcode <= ap_const_lv2_1;
        elsif (((ap_ST_st24_fsm_23 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_351_p2))) then 
            grp_fu_271_opcode <= ap_const_lv2_0;
        else 
            grp_fu_271_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_271_p0 assign process. --
    grp_fu_271_p0_assign_proc : process(ap_CS_fsm, kernel_o_a_0_strike_price, tmp_8_reg_449, tmp_i_reg_444, spot_price_0_reg_472)
    begin
        if (((tmp_8_reg_449 = ap_const_lv1_0) and (ap_ST_st46_fsm_45 = ap_CS_fsm))) then 
            grp_fu_271_p0 <= kernel_o_a_0_strike_price;
        elsif ((not((tmp_8_reg_449 = ap_const_lv1_0)) and (ap_ST_st46_fsm_45 = ap_CS_fsm))) then 
            grp_fu_271_p0 <= spot_price_0_reg_472;
        elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
            grp_fu_271_p0 <= tmp_i_reg_444;
        else 
            grp_fu_271_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_271_p1 assign process. --
    grp_fu_271_p1_assign_proc : process(ap_CS_fsm, kernel_o_a_0_strike_price, tmp_8_reg_449, spot_price_0_reg_472, u_v_gamma_read_assign_reg_236)
    begin
        if (((tmp_8_reg_449 = ap_const_lv1_0) and (ap_ST_st46_fsm_45 = ap_CS_fsm))) then 
            grp_fu_271_p1 <= spot_price_0_reg_472;
        elsif ((not((tmp_8_reg_449 = ap_const_lv1_0)) and (ap_ST_st46_fsm_45 = ap_CS_fsm))) then 
            grp_fu_271_p1 <= kernel_o_a_0_strike_price;
        elsif ((ap_ST_st24_fsm_23 = ap_CS_fsm)) then 
            grp_fu_271_p1 <= u_v_gamma_read_assign_reg_236;
        else 
            grp_fu_271_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_276_ce <= ap_const_logic_1;
    grp_fu_276_p0 <= kernel_u_a_0_rfir;
    grp_fu_276_p1 <= delta_time_0_reg_413;
    grp_fu_281_ce <= ap_const_logic_1;
    grp_fu_281_p0 <= kernel_o_a_0_time_period;
    grp_fu_281_p1 <= ap_const_lv32_41200000;
    grp_fu_287_ce <= ap_const_logic_1;
    grp_fu_287_p0 <= spot_price_0_0_in_reg_467;
    grp_fu_290_ce <= ap_const_logic_1;

    -- grp_fu_290_p0 assign process. --
    grp_fu_290_p0_assign_proc : process(ap_CS_fsm, kernel_u_a_0_current_price, u_v_0_gamma_reg_486)
    begin
        if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            grp_fu_290_p0 <= u_v_0_gamma_reg_486;
        elsif ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then 
            grp_fu_290_p0 <= kernel_u_a_0_current_price;
        else 
            grp_fu_290_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_294_ce <= ap_const_logic_1;
    grp_fu_294_opcode <= ap_const_lv5_1;
    grp_fu_294_p0 <= kernel_o_a_0_call;
    grp_fu_294_p1 <= ap_const_lv32_0;
    grp_fu_300_ce <= ap_const_logic_1;
    grp_fu_300_p0 <= tmp_9_reg_439;
    grp_fu_300_p1 <= tmp_1_pn_reg_224;
    grp_fu_305_ce <= ap_const_logic_1;
    grp_fu_305_p0 <= ap_const_lv64_1;
    grp_fu_305_p1 <= tmp_s_reg_492;
    indvar_next_fu_386_p2 <= std_logic_vector(unsigned(indvar_reg_259) + unsigned(ap_const_lv10_1));
    isIter0_fu_397_p2 <= "1" when (indvar_reg_259 = ap_const_lv10_0) else "0";
    o_v_0_value_fu_363_p3 <= 
        reg_310 when (tmp_8_reg_449(0) = '1') else 
        reg_310;
    p_1_fu_326_p2 <= std_logic_vector(unsigned(p_reg_212) + unsigned(ap_const_lv10_1));
    pp_1_fu_357_p2 <= std_logic_vector(unsigned(pp_reg_248) + unsigned(ap_const_lv4_1));

    -- thread_result_00ack_out assign process. --
    thread_result_00ack_out_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st54_fsm_51 = ap_CS_fsm)) then 
            thread_result_00ack_out <= ap_const_logic_1;
        else 
            thread_result_00ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- thread_result_buff_address0 assign process. --
    thread_result_buff_address0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, tmp_3_fu_375_p1, tmp_1_fu_392_p1)
    begin
        if ((ap_ST_st50_fsm_49 = ap_CS_fsm)) then 
            thread_result_buff_address0 <= tmp_3_fu_375_p1(10 - 1 downto 0);
        elsif (((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            thread_result_buff_address0 <= tmp_1_fu_392_p1(10 - 1 downto 0);
        else 
            thread_result_buff_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- thread_result_buff_ce0 assign process. --
    thread_result_buff_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp0_it0, ap_sig_bdd_205, ap_reg_ppiten_pp0_it2)
    begin
        if ((((ap_ST_pp0_stg0_fsm_50 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_sig_bdd_205 and (ap_const_logic_1 = ap_reg_ppiten_pp0_it2)))) or (ap_ST_st50_fsm_49 = ap_CS_fsm))) then 
            thread_result_buff_ce0 <= ap_const_logic_1;
        else 
            thread_result_buff_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    thread_result_buff_d0 <= o_v_0_value_fu_363_p3;

    -- thread_result_buff_we0 assign process. --
    thread_result_buff_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st50_fsm_49 = ap_CS_fsm))) then 
            thread_result_buff_we0 <= ap_const_logic_1;
        else 
            thread_result_buff_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_392_p1 <= std_logic_vector(resize(unsigned(indvar_reg_259),64));
    tmp_3_fu_375_p1 <= std_logic_vector(resize(unsigned(p_reg_212),64));
    tmp_5_fu_332_p4 <= thread_result_00data_reg(31 downto 2);
    tmp_6_fu_341_p1 <= std_logic_vector(resize(unsigned(tmp_5_fu_332_p4),64));
    tmp_8_fu_314_p2 <= (grp_fu_294_p2 xor ap_const_lv1_1);
end behav;

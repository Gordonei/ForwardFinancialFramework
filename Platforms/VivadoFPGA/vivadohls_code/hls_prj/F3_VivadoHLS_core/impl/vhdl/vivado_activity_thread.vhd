-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.3
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vivado_activity_thread is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    thread_arg_thread_paths : IN STD_LOGIC_VECTOR (31 downto 0);
    thread_arg_path_points : OUT STD_LOGIC_VECTOR (31 downto 0);
    thread_arg_path_points_ap_vld : OUT STD_LOGIC;
    thread_arg_thread_result : OUT STD_LOGIC_VECTOR (31 downto 0);
    thread_arg_thread_result_ap_vld : OUT STD_LOGIC;
    thread_arg_thread_result_sqrd : OUT STD_LOGIC_VECTOR (31 downto 0);
    thread_arg_thread_result_sqrd_ap_vld : OUT STD_LOGIC;
    thread_arg_u_a_0_rfir : IN STD_LOGIC_VECTOR (31 downto 0);
    thread_arg_u_a_0_current_price : IN STD_LOGIC_VECTOR (31 downto 0);
    thread_arg_o_a_0_strike_price : IN STD_LOGIC_VECTOR (31 downto 0);
    thread_arg_o_a_0_time_period : IN STD_LOGIC_VECTOR (31 downto 0);
    thread_arg_o_a_0_call : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of vivado_activity_thread is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vivado_activity_thread,hls_ip_2013_3,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.626000,HLS_SYN_LAT=189,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_st8_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_st9_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st10_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_st11_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st12_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st13_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st14_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st15_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st16_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st17_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st18_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_st19_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st20_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_ST_st21_fsm_20 : STD_LOGIC_VECTOR (4 downto 0) := "10100";
    constant ap_ST_st22_fsm_21 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_ST_st23_fsm_22 : STD_LOGIC_VECTOR (4 downto 0) := "10110";
    constant ap_ST_st24_fsm_23 : STD_LOGIC_VECTOR (4 downto 0) := "10111";
    constant ap_ST_st25_fsm_24 : STD_LOGIC_VECTOR (4 downto 0) := "11000";
    constant ap_ST_st26_fsm_25 : STD_LOGIC_VECTOR (4 downto 0) := "11001";
    constant ap_ST_st27_fsm_26 : STD_LOGIC_VECTOR (4 downto 0) := "11010";
    constant ap_ST_st28_fsm_27 : STD_LOGIC_VECTOR (4 downto 0) := "11011";
    constant ap_ST_st29_fsm_28 : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_ST_st30_fsm_29 : STD_LOGIC_VECTOR (4 downto 0) := "11101";
    constant ap_ST_st31_fsm_30 : STD_LOGIC_VECTOR (4 downto 0) := "11110";
    constant ap_ST_st32_fsm_31 : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal grp_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_266 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_198_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_reg_271 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_fu_216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_276 : STD_LOGIC_VECTOR (0 downto 0);
    signal spot_price_0_1_reg_281 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_1_fu_227_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_1_reg_291 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_192_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_v_0_gamma_reg_296 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_v_0_value_fu_233_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal o_v_0_value_reg_307 : STD_LOGIC_VECTOR (31 downto 0);
    signal spot_price_0_reg_118 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_total_0_reg_130 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_phi_fu_148_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_reg_143 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_pn_reg_156 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_v_gamma_read_assign_reg_168 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_192_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_221_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_198_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_198_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_205_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_192_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_192_ce : STD_LOGIC;
    signal grp_fu_198_ce : STD_LOGIC;
    signal grp_fu_205_ce : STD_LOGIC;
    signal grp_fu_205_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component vivado_activity_thread_faddfsub_32ns_32ns_32_5_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vivado_activity_thread_fmul_32ns_32ns_32_4_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vivado_activity_thread_fcmp_32ns_32ns_1_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vivado_activity_thread_fexp_32ns_32ns_32_9_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    vivado_activity_thread_faddfsub_32ns_32ns_32_5_full_dsp_U1 : component vivado_activity_thread_faddfsub_32ns_32ns_32_5_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_192_p0,
        din1 => grp_fu_192_p1,
        opcode => grp_fu_192_opcode,
        ce => grp_fu_192_ce,
        dout => grp_fu_192_p2);

    vivado_activity_thread_fmul_32ns_32ns_32_4_max_dsp_U2 : component vivado_activity_thread_fmul_32ns_32ns_32_4_max_dsp
    generic map (
        ID => 2,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_198_p0,
        din1 => grp_fu_198_p1,
        ce => grp_fu_198_ce,
        dout => grp_fu_198_p2);

    vivado_activity_thread_fcmp_32ns_32ns_1_3_U3 : component vivado_activity_thread_fcmp_32ns_32ns_1_3
    generic map (
        ID => 3,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_205_p0,
        din1 => grp_fu_205_p1,
        ce => grp_fu_205_ce,
        opcode => grp_fu_205_opcode,
        dout => grp_fu_205_p2);

    vivado_activity_thread_fexp_32ns_32ns_32_9_full_dsp_U4 : component vivado_activity_thread_fexp_32ns_32ns_32_9_full_dsp
    generic map (
        ID => 4,
        NUM_STAGE => 9,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_211_p0,
        din1 => grp_fu_211_p1,
        ce => grp_fu_211_ce,
        dout => grp_fu_211_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- j_reg_180 assign process. --
    j_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = k_phi_fu_148_p4))) then 
                j_reg_180 <= ap_const_lv4_0;
            elsif ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
                j_reg_180 <= j_1_reg_291;
            end if; 
        end if;
    end process;

    -- k_reg_143 assign process. --
    k_reg_143_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st32_fsm_31 = ap_CS_fsm)) then 
                k_reg_143 <= ap_const_lv1_1;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                k_reg_143 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    -- temp_total_0_reg_130 assign process. --
    temp_total_0_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st32_fsm_31 = ap_CS_fsm)) then 
                temp_total_0_reg_130 <= grp_fu_192_p2;
            elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
                temp_total_0_reg_130 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- tmp_pn_reg_156 assign process. --
    tmp_pn_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = k_phi_fu_148_p4))) then 
                tmp_pn_reg_156 <= ap_const_lv32_3F800000;
            elsif ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
                tmp_pn_reg_156 <= grp_fu_211_p2;
            end if; 
        end if;
    end process;

    -- u_v_gamma_read_assign_reg_168 assign process. --
    u_v_gamma_read_assign_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and (ap_const_lv1_0 = k_phi_fu_148_p4))) then 
                u_v_gamma_read_assign_reg_168 <= ap_const_lv32_0;
            elsif ((ap_ST_st22_fsm_21 = ap_CS_fsm)) then 
                u_v_gamma_read_assign_reg_168 <= u_v_0_gamma_reg_296;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st9_fsm_8 = ap_CS_fsm)) then
                j_1_reg_291 <= j_1_fu_227_p2;
                spot_price_0_1_reg_281 <= grp_fu_198_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st27_fsm_26 = ap_CS_fsm)) then
                o_v_0_value_reg_307 <= o_v_0_value_fu_233_p3;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st32_fsm_31 = ap_CS_fsm)) then
                spot_price_0_reg_118 <= spot_price_0_1_reg_281;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then
                tmp_1_reg_276 <= tmp_1_fu_216_p2;
                tmp_i_reg_271 <= grp_fu_198_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st3_fsm_2 = ap_CS_fsm)) then
                tmp_reg_266 <= grp_fu_205_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st13_fsm_12 = ap_CS_fsm)) then
                u_v_0_gamma_reg_296 <= grp_fu_192_p2;
            end if;
        end if;
    end process;

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , k_phi_fu_148_p4 , exitcond_fu_221_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if (not((ap_const_lv1_0 = k_phi_fu_148_p4))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st6_fsm_5;
                end if;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                ap_NS_fsm <= ap_ST_st8_fsm_7;
            when ap_ST_st8_fsm_7 => 
                ap_NS_fsm <= ap_ST_st9_fsm_8;
            when ap_ST_st9_fsm_8 => 
                if (not((ap_const_lv1_0 = exitcond_fu_221_p2))) then
                    ap_NS_fsm <= ap_ST_st23_fsm_22;
                else
                    ap_NS_fsm <= ap_ST_st10_fsm_9;
                end if;
            when ap_ST_st10_fsm_9 => 
                ap_NS_fsm <= ap_ST_st11_fsm_10;
            when ap_ST_st11_fsm_10 => 
                ap_NS_fsm <= ap_ST_st12_fsm_11;
            when ap_ST_st12_fsm_11 => 
                ap_NS_fsm <= ap_ST_st13_fsm_12;
            when ap_ST_st13_fsm_12 => 
                ap_NS_fsm <= ap_ST_st14_fsm_13;
            when ap_ST_st14_fsm_13 => 
                ap_NS_fsm <= ap_ST_st15_fsm_14;
            when ap_ST_st15_fsm_14 => 
                ap_NS_fsm <= ap_ST_st16_fsm_15;
            when ap_ST_st16_fsm_15 => 
                ap_NS_fsm <= ap_ST_st17_fsm_16;
            when ap_ST_st17_fsm_16 => 
                ap_NS_fsm <= ap_ST_st18_fsm_17;
            when ap_ST_st18_fsm_17 => 
                ap_NS_fsm <= ap_ST_st19_fsm_18;
            when ap_ST_st19_fsm_18 => 
                ap_NS_fsm <= ap_ST_st20_fsm_19;
            when ap_ST_st20_fsm_19 => 
                ap_NS_fsm <= ap_ST_st21_fsm_20;
            when ap_ST_st21_fsm_20 => 
                ap_NS_fsm <= ap_ST_st22_fsm_21;
            when ap_ST_st22_fsm_21 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st23_fsm_22 => 
                ap_NS_fsm <= ap_ST_st24_fsm_23;
            when ap_ST_st24_fsm_23 => 
                ap_NS_fsm <= ap_ST_st25_fsm_24;
            when ap_ST_st25_fsm_24 => 
                ap_NS_fsm <= ap_ST_st26_fsm_25;
            when ap_ST_st26_fsm_25 => 
                ap_NS_fsm <= ap_ST_st27_fsm_26;
            when ap_ST_st27_fsm_26 => 
                ap_NS_fsm <= ap_ST_st28_fsm_27;
            when ap_ST_st28_fsm_27 => 
                ap_NS_fsm <= ap_ST_st29_fsm_28;
            when ap_ST_st29_fsm_28 => 
                ap_NS_fsm <= ap_ST_st30_fsm_29;
            when ap_ST_st30_fsm_29 => 
                ap_NS_fsm <= ap_ST_st31_fsm_30;
            when ap_ST_st31_fsm_30 => 
                ap_NS_fsm <= ap_ST_st32_fsm_31;
            when ap_ST_st32_fsm_31 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm, k_phi_fu_148_p4)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = k_phi_fu_148_p4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm, k_phi_fu_148_p4)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = k_phi_fu_148_p4)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_221_p2 <= "1" when (j_reg_180 = ap_const_lv4_A) else "0";
    grp_fu_192_ce <= ap_const_logic_1;

    -- grp_fu_192_opcode assign process. --
    grp_fu_192_opcode_assign_proc : process(ap_CS_fsm, tmp_1_reg_276, exitcond_fu_221_p2)
    begin
        if ((((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((tmp_1_reg_276 = ap_const_lv1_0))) or ((ap_ST_st23_fsm_22 = ap_CS_fsm) and (tmp_1_reg_276 = ap_const_lv1_0)))) then 
            grp_fu_192_opcode <= ap_const_lv2_1;
        elsif ((((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_221_p2)) or (ap_ST_st28_fsm_27 = ap_CS_fsm))) then 
            grp_fu_192_opcode <= ap_const_lv2_0;
        else 
            grp_fu_192_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_192_p0 assign process. --
    grp_fu_192_p0_assign_proc : process(ap_CS_fsm, thread_arg_o_a_0_strike_price, tmp_i_reg_271, tmp_1_reg_276, spot_price_0_1_reg_281, temp_total_0_reg_130, exitcond_fu_221_p2)
    begin
        if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            grp_fu_192_p0 <= temp_total_0_reg_130;
        elsif (((ap_ST_st23_fsm_22 = ap_CS_fsm) and (tmp_1_reg_276 = ap_const_lv1_0))) then 
            grp_fu_192_p0 <= thread_arg_o_a_0_strike_price;
        elsif (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((tmp_1_reg_276 = ap_const_lv1_0)))) then 
            grp_fu_192_p0 <= spot_price_0_1_reg_281;
        elsif (((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_221_p2))) then 
            grp_fu_192_p0 <= tmp_i_reg_271;
        else 
            grp_fu_192_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_192_p1 assign process. --
    grp_fu_192_p1_assign_proc : process(ap_CS_fsm, thread_arg_o_a_0_strike_price, tmp_1_reg_276, spot_price_0_1_reg_281, o_v_0_value_reg_307, u_v_gamma_read_assign_reg_168, exitcond_fu_221_p2)
    begin
        if ((ap_ST_st28_fsm_27 = ap_CS_fsm)) then 
            grp_fu_192_p1 <= o_v_0_value_reg_307;
        elsif (((ap_ST_st23_fsm_22 = ap_CS_fsm) and (tmp_1_reg_276 = ap_const_lv1_0))) then 
            grp_fu_192_p1 <= spot_price_0_1_reg_281;
        elsif (((ap_ST_st23_fsm_22 = ap_CS_fsm) and not((tmp_1_reg_276 = ap_const_lv1_0)))) then 
            grp_fu_192_p1 <= thread_arg_o_a_0_strike_price;
        elsif (((ap_ST_st9_fsm_8 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_221_p2))) then 
            grp_fu_192_p1 <= u_v_gamma_read_assign_reg_168;
        else 
            grp_fu_192_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_198_ce <= ap_const_logic_1;

    -- grp_fu_198_p0 assign process. --
    grp_fu_198_p0_assign_proc : process(ap_CS_fsm, thread_arg_u_a_0_rfir, thread_arg_u_a_0_current_price)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            grp_fu_198_p0 <= thread_arg_u_a_0_current_price;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            grp_fu_198_p0 <= thread_arg_u_a_0_rfir;
        else 
            grp_fu_198_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_198_p1 assign process. --
    grp_fu_198_p1_assign_proc : process(ap_CS_fsm, thread_arg_o_a_0_time_period, tmp_pn_reg_156)
    begin
        if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
            grp_fu_198_p1 <= tmp_pn_reg_156;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            grp_fu_198_p1 <= thread_arg_o_a_0_time_period;
        else 
            grp_fu_198_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_205_ce <= ap_const_logic_1;
    grp_fu_205_opcode <= ap_const_lv5_1;
    grp_fu_205_p0 <= thread_arg_o_a_0_call;
    grp_fu_205_p1 <= ap_const_lv32_0;
    grp_fu_211_ce <= ap_const_logic_1;
    grp_fu_211_p0 <= ap_const_lv32_1;
    grp_fu_211_p1 <= u_v_0_gamma_reg_296;
    j_1_fu_227_p2 <= std_logic_vector(unsigned(j_reg_180) + unsigned(ap_const_lv4_1));
    k_phi_fu_148_p4 <= k_reg_143;
    o_v_0_value_fu_233_p3 <= 
        grp_fu_192_p2 when (tmp_1_reg_276(0) = '1') else 
        grp_fu_192_p2;
    thread_arg_path_points <= ap_const_lv32_1;

    -- thread_arg_path_points_ap_vld assign process. --
    thread_arg_path_points_ap_vld_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            thread_arg_path_points_ap_vld <= ap_const_logic_1;
        else 
            thread_arg_path_points_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    thread_arg_thread_result <= temp_total_0_reg_130;

    -- thread_arg_thread_result_ap_vld assign process. --
    thread_arg_thread_result_ap_vld_assign_proc : process(ap_CS_fsm, k_phi_fu_148_p4)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = k_phi_fu_148_p4)))) then 
            thread_arg_thread_result_ap_vld <= ap_const_logic_1;
        else 
            thread_arg_thread_result_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    thread_arg_thread_result_sqrd <= spot_price_0_reg_118;

    -- thread_arg_thread_result_sqrd_ap_vld assign process. --
    thread_arg_thread_result_sqrd_ap_vld_assign_proc : process(ap_CS_fsm, k_phi_fu_148_p4)
    begin
        if (((ap_ST_st5_fsm_4 = ap_CS_fsm) and not((ap_const_lv1_0 = k_phi_fu_148_p4)))) then 
            thread_arg_thread_result_sqrd_ap_vld <= ap_const_logic_1;
        else 
            thread_arg_thread_result_sqrd_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_216_p2 <= (tmp_reg_266 xor ap_const_lv1_1);
end behav;

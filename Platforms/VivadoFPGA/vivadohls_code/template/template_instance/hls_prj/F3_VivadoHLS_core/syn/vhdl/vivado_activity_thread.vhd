-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vivado_activity_thread is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_req_din : OUT STD_LOGIC;
    a_req_full_n : IN STD_LOGIC;
    a_req_write : OUT STD_LOGIC;
    a_rsp_empty_n : IN STD_LOGIC;
    a_rsp_read : OUT STD_LOGIC;
    a_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_datain : IN STD_LOGIC_VECTOR (31 downto 0);
    a_dataout : OUT STD_LOGIC_VECTOR (31 downto 0);
    a_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_rfir : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_current_price : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_volatility : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_initial_volatility : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_volatility_volatility : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_rho : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_kappa : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_theta : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_correlation_matrix_0_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_correlation_matrix_0_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_correlation_matrix_1_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_u_a_0_correlation_matrix_1_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_second_barrier : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_barrier : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_out : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_down : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_strike_price : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_time_period : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_call : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_o_a_0_points : IN STD_LOGIC_VECTOR (31 downto 0);
    seed_0_s1 : IN STD_LOGIC_VECTOR (31 downto 0);
    seed_0_s2 : IN STD_LOGIC_VECTOR (31 downto 0);
    seed_0_s3 : IN STD_LOGIC_VECTOR (31 downto 0);
    seed_0_offset : IN STD_LOGIC_VECTOR (31 downto 0);
    thread_result_0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of vivado_activity_thread is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "vivado_activity_thread,hls_ip_2013_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=16404010,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st6_fsm_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_ST_st7_fsm_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_ST_pp0_stg0_fsm_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_ST_pp0_stg1_fsm_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_pp0_stg2_fsm_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_ST_pp0_stg3_fsm_10 : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_ST_st23_fsm_11 : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_ST_st24_fsm_12 : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_ST_st25_fsm_13 : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_ST_st26_fsm_14 : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_ST_st27_fsm_15 : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_ST_st28_fsm_16 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_ST_st29_fsm_17 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_ST_pp1_stg0_fsm_18 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_ST_st33_fsm_19 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_3E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001111101000";
    constant ap_const_lv32_39800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111001100000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv13_1000 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal thread_result_00data_reg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal thread_result_00vld_reg : STD_LOGIC := '0';
    signal thread_result_00ack_out : STD_LOGIC;
    signal u_v_0_gamma_read_assign_reg_249 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp_i_reg_261 : STD_LOGIC_VECTOR (12 downto 0);
    signal indvar_reg_283 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_300_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_318 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_324 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_reg_481 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_2_fu_340_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_2_reg_489 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond_i_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_i_reg_494 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp0_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it1 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it2 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp0_it3 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond_i_reg_494_pp0_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_494_pp0_it2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_exitcond_i_reg_494_pp0_it3 : STD_LOGIC_VECTOR (0 downto 0);
    signal pp_fu_352_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal pp_reg_498 : STD_LOGIC_VECTOR (12 downto 0);
    signal u_v_0_arr_0_gamma_reg_503 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_i_reg_509 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_1_fu_391_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_1_reg_523 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_1_reg_528 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_addr_reg_538 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_543 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppiten_pp1_it0 : STD_LOGIC := '0';
    signal ap_reg_ppiten_pp1_it1 : STD_LOGIC := '0';
    signal ap_reg_ppstg_exitcond1_reg_543_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_bdd_200 : BOOLEAN;
    signal ap_reg_ppiten_pp1_it2 : STD_LOGIC := '0';
    signal indvar_next_fu_427_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal isIter0_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal isIter0_reg_557 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reg_ppstg_isIter0_reg_557_pp1_it1 : STD_LOGIC_VECTOR (0 downto 0);
    signal thread_result_buff_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal thread_result_buff_0_load_reg_561 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond2_i_fu_334_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal thread_result_buff_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal thread_result_buff_0_ce0 : STD_LOGIC;
    signal thread_result_buff_0_we0 : STD_LOGIC;
    signal thread_result_buff_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal thread_result_buff_0_0_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal thread_result_buff_0_0_ce0 : STD_LOGIC;
    signal thread_result_buff_0_0_we0 : STD_LOGIC;
    signal thread_result_buff_0_0_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal thread_result_buff_0_0_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_i_reg_237 : STD_LOGIC_VECTOR (9 downto 0);
    signal u_v_0_gamma_read_assign_phi_fu_253_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal pp_i_phi_fu_265_p4 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_reg_272 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_i_fu_380_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_433_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_8_fu_411_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal spot_price_0_i_fu_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_300_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal o_v_0_arr_0_value_fu_368_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_402_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_295_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_295_ce : STD_LOGIC;
    signal grp_fu_300_ce : STD_LOGIC;
    signal grp_fu_307_ce : STD_LOGIC;
    signal grp_fu_307_opcode : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_313_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);

    component vivado_activity_thread_faddfsub_32ns_32ns_32_4_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vivado_activity_thread_fmul_32ns_32ns_32_3_max_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vivado_activity_thread_fcmp_32ns_32ns_1_3 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vivado_activity_thread_fexp_32ns_32ns_32_8_full_dsp IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component vivado_activity_thread_thread_result_buff_0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    thread_result_buff_0_U : component vivado_activity_thread_thread_result_buff_0
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => thread_result_buff_0_address0,
        ce0 => thread_result_buff_0_ce0,
        we0 => thread_result_buff_0_we0,
        d0 => thread_result_buff_0_d0,
        q0 => thread_result_buff_0_q0);

    thread_result_buff_0_0_U : component vivado_activity_thread_thread_result_buff_0
    generic map (
        DataWidth => 32,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => thread_result_buff_0_0_address0,
        ce0 => thread_result_buff_0_0_ce0,
        we0 => thread_result_buff_0_0_we0,
        d0 => thread_result_buff_0_0_d0,
        q0 => thread_result_buff_0_0_q0);

    vivado_activity_thread_faddfsub_32ns_32ns_32_4_full_dsp_U1 : component vivado_activity_thread_faddfsub_32ns_32ns_32_4_full_dsp
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_295_p0,
        din1 => grp_fu_295_p1,
        opcode => grp_fu_295_opcode,
        ce => grp_fu_295_ce,
        dout => grp_fu_295_p2);

    vivado_activity_thread_fmul_32ns_32ns_32_3_max_dsp_U2 : component vivado_activity_thread_fmul_32ns_32ns_32_3_max_dsp
    generic map (
        ID => 2,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_300_p0,
        din1 => grp_fu_300_p1,
        ce => grp_fu_300_ce,
        dout => grp_fu_300_p2);

    vivado_activity_thread_fcmp_32ns_32ns_1_3_U3 : component vivado_activity_thread_fcmp_32ns_32ns_1_3
    generic map (
        ID => 3,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_307_p0,
        din1 => grp_fu_307_p1,
        ce => grp_fu_307_ce,
        opcode => grp_fu_307_opcode,
        dout => grp_fu_307_p2);

    vivado_activity_thread_fexp_32ns_32ns_32_8_full_dsp_U4 : component vivado_activity_thread_fexp_32ns_32ns_32_8_full_dsp
    generic map (
        ID => 4,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_313_p0,
        din1 => grp_fu_313_p1,
        ce => grp_fu_313_ce,
        dout => grp_fu_313_p2);





    -- the current state (ap_CS_fsm) of the state machine. --
    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it0 assign process. --
    ap_reg_ppiten_pp0_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_i_fu_346_p2)))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_i_fu_334_p2))) then 
                    ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it1 assign process. --
    ap_reg_ppiten_pp0_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp0_stg3_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_i_reg_494))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_i_fu_334_p2)) or ((ap_ST_pp0_stg3_fsm_10 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_i_reg_494))))) then 
                    ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it2 assign process. --
    ap_reg_ppiten_pp0_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_10 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp0_it3 assign process. --
    ap_reg_ppiten_pp0_it3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
            else
                if ((ap_ST_pp0_stg3_fsm_10 = ap_CS_fsm)) then 
                    ap_reg_ppiten_pp0_it3 <= ap_reg_ppiten_pp0_it2;
                elsif (((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_i_fu_334_p2))) then 
                    ap_reg_ppiten_pp0_it3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it0 assign process. --
    ap_reg_ppiten_pp1_it0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond1_fu_421_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_0;
                elsif (((ap_ST_st28_fsm_16 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_385_p2)))) then 
                    ap_reg_ppiten_pp1_it0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it1 assign process. --
    ap_reg_ppiten_pp1_it1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond1_fu_421_p2))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_1;
                elsif ((((ap_ST_st28_fsm_16 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_385_p2))) or ((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond1_fu_421_p2))))) then 
                    ap_reg_ppiten_pp1_it1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- ap_reg_ppiten_pp1_it2 assign process. --
    ap_reg_ppiten_pp1_it2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
            else
                if (((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_reg_ppiten_pp1_it1;
                elsif (((ap_ST_st28_fsm_16 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_385_p2)))) then 
                    ap_reg_ppiten_pp1_it2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    -- thread_result_00data_reg assign process. --
    thread_result_00data_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                thread_result_00data_reg <= ap_const_lv32_0;
            else
                if (((not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_0 = thread_result_00vld_reg)) or (not((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = thread_result_00vld_reg) and (ap_const_logic_1 = thread_result_00ack_out)))) then 
                    thread_result_00data_reg <= thread_result_0;
                end if; 
            end if;
        end if;
    end process;


    -- thread_result_00vld_reg assign process. --
    thread_result_00vld_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                
            else
            end if;
        end if;
    end process;


    -- indvar_reg_283 assign process. --
    indvar_reg_283_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st28_fsm_16 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_385_p2)))) then 
                indvar_reg_283 <= ap_const_lv10_0;
            elsif (((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond1_fu_421_p2))) then 
                indvar_reg_283 <= indvar_next_fu_427_p2;
            end if; 
        end if;
    end process;

    -- p_i_reg_237 assign process. --
    p_i_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st27_fsm_15 = ap_CS_fsm)) then 
                p_i_reg_237 <= p_2_reg_489;
            elsif ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then 
                p_i_reg_237 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    -- p_reg_272 assign process. --
    p_reg_272_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st7_fsm_6 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond2_i_fu_334_p2)))) then 
                p_reg_272 <= ap_const_lv10_0;
            elsif ((ap_ST_st29_fsm_17 = ap_CS_fsm)) then 
                p_reg_272 <= p_1_reg_523;
            end if; 
        end if;
    end process;

    -- pp_i_reg_261 assign process. --
    pp_i_reg_261_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_i_reg_494))) then 
                pp_i_reg_261 <= pp_reg_498;
            elsif (((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_i_fu_334_p2))) then 
                pp_i_reg_261 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    -- u_v_0_gamma_read_assign_reg_249 assign process. --
    u_v_0_gamma_read_assign_reg_249_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_i_reg_494))) then 
                u_v_0_gamma_read_assign_reg_249 <= u_v_0_arr_0_gamma_reg_503;
            elsif (((ap_ST_st7_fsm_6 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond2_i_fu_334_p2))) then 
                u_v_0_gamma_read_assign_reg_249 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st28_fsm_16 = ap_CS_fsm) and not((ap_const_lv1_0 = exitcond_fu_385_p2)))) then
                a_addr_reg_538(0) <= tmp_8_fu_411_p1(32 - 1 downto 0)(0);
    a_addr_reg_538(1) <= tmp_8_fu_411_p1(32 - 1 downto 0)(1);
    a_addr_reg_538(2) <= tmp_8_fu_411_p1(32 - 1 downto 0)(2);
    a_addr_reg_538(3) <= tmp_8_fu_411_p1(32 - 1 downto 0)(3);
    a_addr_reg_538(4) <= tmp_8_fu_411_p1(32 - 1 downto 0)(4);
    a_addr_reg_538(5) <= tmp_8_fu_411_p1(32 - 1 downto 0)(5);
    a_addr_reg_538(6) <= tmp_8_fu_411_p1(32 - 1 downto 0)(6);
    a_addr_reg_538(7) <= tmp_8_fu_411_p1(32 - 1 downto 0)(7);
    a_addr_reg_538(8) <= tmp_8_fu_411_p1(32 - 1 downto 0)(8);
    a_addr_reg_538(9) <= tmp_8_fu_411_p1(32 - 1 downto 0)(9);
    a_addr_reg_538(10) <= tmp_8_fu_411_p1(32 - 1 downto 0)(10);
    a_addr_reg_538(11) <= tmp_8_fu_411_p1(32 - 1 downto 0)(11);
    a_addr_reg_538(12) <= tmp_8_fu_411_p1(32 - 1 downto 0)(12);
    a_addr_reg_538(13) <= tmp_8_fu_411_p1(32 - 1 downto 0)(13);
    a_addr_reg_538(14) <= tmp_8_fu_411_p1(32 - 1 downto 0)(14);
    a_addr_reg_538(15) <= tmp_8_fu_411_p1(32 - 1 downto 0)(15);
    a_addr_reg_538(16) <= tmp_8_fu_411_p1(32 - 1 downto 0)(16);
    a_addr_reg_538(17) <= tmp_8_fu_411_p1(32 - 1 downto 0)(17);
    a_addr_reg_538(18) <= tmp_8_fu_411_p1(32 - 1 downto 0)(18);
    a_addr_reg_538(19) <= tmp_8_fu_411_p1(32 - 1 downto 0)(19);
    a_addr_reg_538(20) <= tmp_8_fu_411_p1(32 - 1 downto 0)(20);
    a_addr_reg_538(21) <= tmp_8_fu_411_p1(32 - 1 downto 0)(21);
    a_addr_reg_538(22) <= tmp_8_fu_411_p1(32 - 1 downto 0)(22);
    a_addr_reg_538(23) <= tmp_8_fu_411_p1(32 - 1 downto 0)(23);
    a_addr_reg_538(24) <= tmp_8_fu_411_p1(32 - 1 downto 0)(24);
    a_addr_reg_538(25) <= tmp_8_fu_411_p1(32 - 1 downto 0)(25);
    a_addr_reg_538(26) <= tmp_8_fu_411_p1(32 - 1 downto 0)(26);
    a_addr_reg_538(27) <= tmp_8_fu_411_p1(32 - 1 downto 0)(27);
    a_addr_reg_538(28) <= tmp_8_fu_411_p1(32 - 1 downto 0)(28);
    a_addr_reg_538(29) <= tmp_8_fu_411_p1(32 - 1 downto 0)(29);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then
                ap_reg_ppstg_exitcond1_reg_543_pp1_it1 <= exitcond1_reg_543;
                ap_reg_ppstg_isIter0_reg_557_pp1_it1 <= isIter0_reg_557;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm)) then
                ap_reg_ppstg_exitcond_i_reg_494_pp0_it1 <= exitcond_i_reg_494;
                ap_reg_ppstg_exitcond_i_reg_494_pp0_it2 <= ap_reg_ppstg_exitcond_i_reg_494_pp0_it1;
                ap_reg_ppstg_exitcond_i_reg_494_pp0_it3 <= ap_reg_ppstg_exitcond_i_reg_494_pp0_it2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))))) then
                exitcond1_reg_543 <= exitcond1_fu_421_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then
                exitcond_i_reg_494 <= exitcond_i_fu_346_p2;
                pp_reg_498 <= pp_fu_352_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond1_fu_421_p2))) then
                isIter0_reg_557 <= isIter0_fu_438_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st28_fsm_16 = ap_CS_fsm)) then
                p_1_reg_523 <= p_1_fu_391_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st7_fsm_6 = ap_CS_fsm)) then
                p_2_reg_489 <= p_2_fu_340_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st3_fsm_2 = ap_CS_fsm) or (ap_ST_st6_fsm_5 = ap_CS_fsm))) then
                reg_318 <= grp_fu_300_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_ST_st26_fsm_14 = ap_CS_fsm) and not((tmp_4_reg_481 = ap_const_lv1_0))) or ((ap_ST_st26_fsm_14 = ap_CS_fsm) and (tmp_4_reg_481 = ap_const_lv1_0)))) then
                reg_324 <= grp_fu_295_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_ST_pp0_stg2_fsm_9 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_494_pp0_it3))) then
                spot_price_0_i_fu_144 <= grp_fu_300_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it1) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and (ap_const_lv1_0 = exitcond1_reg_543))) then
                thread_result_buff_0_load_reg_561 <= thread_result_buff_0_q0;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_ST_st28_fsm_16 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_fu_385_p2))) then
                tmp_1_reg_528(0) <= tmp_1_fu_397_p1(0);
    tmp_1_reg_528(1) <= tmp_1_fu_397_p1(1);
    tmp_1_reg_528(2) <= tmp_1_fu_397_p1(2);
    tmp_1_reg_528(3) <= tmp_1_fu_397_p1(3);
    tmp_1_reg_528(4) <= tmp_1_fu_397_p1(4);
    tmp_1_reg_528(5) <= tmp_1_fu_397_p1(5);
    tmp_1_reg_528(6) <= tmp_1_fu_397_p1(6);
    tmp_1_reg_528(7) <= tmp_1_fu_397_p1(7);
    tmp_1_reg_528(8) <= tmp_1_fu_397_p1(8);
    tmp_1_reg_528(9) <= tmp_1_fu_397_p1(9);
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_ST_st6_fsm_5 = ap_CS_fsm)) then
                tmp_4_reg_481 <= tmp_4_fu_328_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it2) and (ap_ST_pp0_stg3_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond_i_reg_494_pp0_it2))) then
                tmp_6_i_reg_509 <= grp_fu_313_p2;
            end if;
        end if;
    end process;

    -- assign process. --
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_ST_pp0_stg3_fsm_10 = ap_CS_fsm) and (ap_const_lv1_0 = exitcond_i_reg_494))) then
                u_v_0_arr_0_gamma_reg_503 <= grp_fu_295_p2;
            end if;
        end if;
    end process;
    thread_result_00vld_reg <= '0';
    tmp_1_reg_528(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    a_addr_reg_538(31 downto 30) <= "00";

    -- the next state (ap_NS_fsm) of the state machine. --
    ap_NS_fsm_assign_proc : process (ap_start , ap_CS_fsm , exitcond_i_fu_346_p2 , ap_reg_ppiten_pp0_it0 , ap_reg_ppiten_pp0_it1 , ap_reg_ppiten_pp0_it2 , ap_reg_ppiten_pp0_it3 , exitcond_fu_385_p2 , exitcond1_fu_421_p2 , ap_reg_ppiten_pp1_it0 , ap_reg_ppiten_pp1_it1 , ap_sig_bdd_200 , ap_reg_ppiten_pp1_it2 , exitcond2_i_fu_334_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                ap_NS_fsm <= ap_ST_st3_fsm_2;
            when ap_ST_st3_fsm_2 => 
                ap_NS_fsm <= ap_ST_st4_fsm_3;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                ap_NS_fsm <= ap_ST_st6_fsm_5;
            when ap_ST_st6_fsm_5 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st7_fsm_6 => 
                if ((ap_const_lv1_0 = exitcond2_i_fu_334_p2)) then
                    ap_NS_fsm <= ap_ST_pp0_stg0_fsm_7;
                else
                    ap_NS_fsm <= ap_ST_st28_fsm_16;
                end if;
            when ap_ST_pp0_stg0_fsm_7 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and not((ap_const_lv1_0 = exitcond_i_fu_346_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it1))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg1_fsm_8;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_11;
                end if;
            when ap_ST_pp0_stg1_fsm_8 => 
                ap_NS_fsm <= ap_ST_pp0_stg2_fsm_9;
            when ap_ST_pp0_stg2_fsm_9 => 
                if (not(((ap_const_logic_1 = ap_reg_ppiten_pp0_it3) and (ap_ST_pp0_stg2_fsm_9 = ap_CS_fsm) and not((ap_const_logic_1 = ap_reg_ppiten_pp0_it2))))) then
                    ap_NS_fsm <= ap_ST_pp0_stg3_fsm_10;
                else
                    ap_NS_fsm <= ap_ST_st23_fsm_11;
                end if;
            when ap_ST_pp0_stg3_fsm_10 => 
                ap_NS_fsm <= ap_ST_pp0_stg0_fsm_7;
            when ap_ST_st23_fsm_11 => 
                ap_NS_fsm <= ap_ST_st24_fsm_12;
            when ap_ST_st24_fsm_12 => 
                ap_NS_fsm <= ap_ST_st25_fsm_13;
            when ap_ST_st25_fsm_13 => 
                ap_NS_fsm <= ap_ST_st26_fsm_14;
            when ap_ST_st26_fsm_14 => 
                ap_NS_fsm <= ap_ST_st27_fsm_15;
            when ap_ST_st27_fsm_15 => 
                ap_NS_fsm <= ap_ST_st7_fsm_6;
            when ap_ST_st28_fsm_16 => 
                if (not((ap_const_lv1_0 = exitcond_fu_385_p2))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_18;
                else
                    ap_NS_fsm <= ap_ST_st29_fsm_17;
                end if;
            when ap_ST_st29_fsm_17 => 
                ap_NS_fsm <= ap_ST_st28_fsm_16;
            when ap_ST_pp1_stg0_fsm_18 => 
                if ((not(((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))) and not(((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond1_fu_421_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1)))))) then
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_18;
                elsif ((((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))) or ((ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = exitcond1_fu_421_p2)) and not((ap_const_logic_1 = ap_reg_ppiten_pp1_it1))))) then
                    ap_NS_fsm <= ap_ST_st33_fsm_19;
                else
                    ap_NS_fsm <= ap_ST_pp1_stg0_fsm_18;
                end if;
            when ap_ST_st33_fsm_19 => 
                ap_NS_fsm <= ap_ST_st1_fsm_0;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    a_address <= a_addr_reg_538;
    a_dataout <= thread_result_buff_0_load_reg_561;

    -- a_req_din assign process. --
    a_req_din_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond1_reg_543_pp1_it1, ap_sig_bdd_200, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_isIter0_reg_557_pp1_it1)
    begin
        if ((((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_543_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter0_reg_557_pp1_it1))) or ((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_543_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))))) then 
            a_req_din <= ap_const_logic_1;
        else 
            a_req_din <= ap_const_logic_0;
        end if; 
    end process;


    -- a_req_write assign process. --
    a_req_write_assign_proc : process(ap_CS_fsm, ap_reg_ppstg_exitcond1_reg_543_pp1_it1, ap_sig_bdd_200, ap_reg_ppiten_pp1_it2, ap_reg_ppstg_isIter0_reg_557_pp1_it1)
    begin
        if ((((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_543_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2))) and not((ap_const_lv1_0 = ap_reg_ppstg_isIter0_reg_557_pp1_it1))) or ((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_543_pp1_it1) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))))) then 
            a_req_write <= ap_const_logic_1;
        else 
            a_req_write <= ap_const_logic_0;
        end if; 
    end process;

    a_rsp_read <= ap_const_logic_0;
    a_size <= ap_const_lv32_3E8;

    -- ap_done assign process. --
    ap_done_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st33_fsm_19 = ap_CS_fsm)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_idle assign process. --
    ap_idle_assign_proc : process(ap_start, ap_CS_fsm)
    begin
        if ((not((ap_const_logic_1 = ap_start)) and (ap_ST_st1_fsm_0 = ap_CS_fsm))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_ready assign process. --
    ap_ready_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st33_fsm_19 = ap_CS_fsm)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    -- ap_sig_bdd_200 assign process. --
    ap_sig_bdd_200_assign_proc : process(a_req_full_n, ap_reg_ppstg_exitcond1_reg_543_pp1_it1)
    begin
                ap_sig_bdd_200 <= ((a_req_full_n = ap_const_logic_0) and (ap_const_lv1_0 = ap_reg_ppstg_exitcond1_reg_543_pp1_it1));
    end process;

    exitcond1_fu_421_p2 <= "1" when (indvar_reg_283 = ap_const_lv10_3E8) else "0";
    exitcond2_i_fu_334_p2 <= "1" when (p_i_reg_237 = ap_const_lv10_3E8) else "0";
    exitcond_fu_385_p2 <= "1" when (p_reg_272 = ap_const_lv10_3E8) else "0";
    exitcond_i_fu_346_p2 <= "1" when (pp_i_phi_fu_265_p4 = ap_const_lv13_1000) else "0";
    grp_fu_295_ce <= ap_const_logic_1;

    -- grp_fu_295_opcode assign process. --
    grp_fu_295_opcode_assign_proc : process(ap_CS_fsm, tmp_4_reg_481, exitcond_i_fu_346_p2, ap_reg_ppiten_pp0_it0)
    begin
        if (((not((tmp_4_reg_481 = ap_const_lv1_0)) and (ap_ST_st23_fsm_11 = ap_CS_fsm)) or ((tmp_4_reg_481 = ap_const_lv1_0) and (ap_ST_st23_fsm_11 = ap_CS_fsm)))) then 
            grp_fu_295_opcode <= ap_const_lv2_1;
        elsif (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0) and (ap_const_lv1_0 = exitcond_i_fu_346_p2))) then 
            grp_fu_295_opcode <= ap_const_lv2_0;
        else 
            grp_fu_295_opcode <= "XX";
        end if; 
    end process;


    -- grp_fu_295_p0 assign process. --
    grp_fu_295_p0_assign_proc : process(ap_CS_fsm, kernel_o_a_0_strike_price, reg_318, tmp_4_reg_481, ap_reg_ppiten_pp0_it0, spot_price_0_i_fu_144)
    begin
        if (((tmp_4_reg_481 = ap_const_lv1_0) and (ap_ST_st23_fsm_11 = ap_CS_fsm))) then 
            grp_fu_295_p0 <= kernel_o_a_0_strike_price;
        elsif ((not((tmp_4_reg_481 = ap_const_lv1_0)) and (ap_ST_st23_fsm_11 = ap_CS_fsm))) then 
            grp_fu_295_p0 <= spot_price_0_i_fu_144;
        elsif (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            grp_fu_295_p0 <= reg_318;
        else 
            grp_fu_295_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_295_p1 assign process. --
    grp_fu_295_p1_assign_proc : process(ap_CS_fsm, kernel_o_a_0_strike_price, tmp_4_reg_481, ap_reg_ppiten_pp0_it0, u_v_0_gamma_read_assign_phi_fu_253_p4, spot_price_0_i_fu_144)
    begin
        if (((tmp_4_reg_481 = ap_const_lv1_0) and (ap_ST_st23_fsm_11 = ap_CS_fsm))) then 
            grp_fu_295_p1 <= spot_price_0_i_fu_144;
        elsif ((not((tmp_4_reg_481 = ap_const_lv1_0)) and (ap_ST_st23_fsm_11 = ap_CS_fsm))) then 
            grp_fu_295_p1 <= kernel_o_a_0_strike_price;
        elsif (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it0))) then 
            grp_fu_295_p1 <= u_v_0_gamma_read_assign_phi_fu_253_p4;
        else 
            grp_fu_295_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_300_ce <= ap_const_logic_1;

    -- grp_fu_300_p0 assign process. --
    grp_fu_300_p0_assign_proc : process(ap_CS_fsm, kernel_o_a_0_time_period, reg_318, ap_reg_ppiten_pp0_it3, tmp_6_i_reg_509)
    begin
        if (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) then 
            grp_fu_300_p0 <= tmp_6_i_reg_509;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            grp_fu_300_p0 <= reg_318;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            grp_fu_300_p0 <= kernel_o_a_0_time_period;
        else 
            grp_fu_300_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    -- grp_fu_300_p1 assign process. --
    grp_fu_300_p1_assign_proc : process(ap_CS_fsm, kernel_u_a_0_rfir, kernel_u_a_0_current_price, ap_reg_ppiten_pp0_it3)
    begin
        if (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it3))) then 
            grp_fu_300_p1 <= kernel_u_a_0_current_price;
        elsif ((ap_ST_st4_fsm_3 = ap_CS_fsm)) then 
            grp_fu_300_p1 <= kernel_u_a_0_rfir;
        elsif ((ap_ST_st1_fsm_0 = ap_CS_fsm)) then 
            grp_fu_300_p1 <= ap_const_lv32_39800000;
        else 
            grp_fu_300_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_307_ce <= ap_const_logic_1;
    grp_fu_307_opcode <= ap_const_lv5_1;
    grp_fu_307_p0 <= kernel_o_a_0_call;
    grp_fu_307_p1 <= ap_const_lv32_0;
    grp_fu_313_ce <= ap_const_logic_1;
    grp_fu_313_p0 <= ap_const_lv32_1;
    grp_fu_313_p1 <= u_v_0_arr_0_gamma_reg_503;
    indvar_next_fu_427_p2 <= std_logic_vector(unsigned(indvar_reg_283) + unsigned(ap_const_lv10_1));
    isIter0_fu_438_p2 <= "1" when (indvar_reg_283 = ap_const_lv10_0) else "0";
    o_v_0_arr_0_value_fu_368_p3 <= 
        reg_324 when (tmp_4_reg_481(0) = '1') else 
        reg_324;
    p_1_fu_391_p2 <= std_logic_vector(unsigned(p_reg_272) + unsigned(ap_const_lv10_1));
    p_2_fu_340_p2 <= std_logic_vector(unsigned(p_i_reg_237) + unsigned(ap_const_lv10_1));
    pp_fu_352_p2 <= std_logic_vector(unsigned(pp_i_phi_fu_265_p4) + unsigned(ap_const_lv13_1));

    -- pp_i_phi_fu_265_p4 assign process. --
    pp_i_phi_fu_265_p4_assign_proc : process(ap_CS_fsm, pp_i_reg_261, exitcond_i_reg_494, ap_reg_ppiten_pp0_it1, pp_reg_498)
    begin
        if (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_i_reg_494))) then 
            pp_i_phi_fu_265_p4 <= pp_reg_498;
        else 
            pp_i_phi_fu_265_p4 <= pp_i_reg_261;
        end if; 
    end process;


    -- thread_result_00ack_out assign process. --
    thread_result_00ack_out_assign_proc : process(ap_CS_fsm)
    begin
        if ((ap_ST_st33_fsm_19 = ap_CS_fsm)) then 
            thread_result_00ack_out <= ap_const_logic_1;
        else 
            thread_result_00ack_out <= ap_const_logic_0;
        end if; 
    end process;


    -- thread_result_buff_0_0_address0 assign process. --
    thread_result_buff_0_0_address0_assign_proc : process(ap_CS_fsm, tmp_1_fu_397_p1, tmp_i_fu_380_p1)
    begin
        if ((ap_ST_st27_fsm_15 = ap_CS_fsm)) then 
            thread_result_buff_0_0_address0 <= tmp_i_fu_380_p1(10 - 1 downto 0);
        elsif ((ap_ST_st28_fsm_16 = ap_CS_fsm)) then 
            thread_result_buff_0_0_address0 <= tmp_1_fu_397_p1(10 - 1 downto 0);
        else 
            thread_result_buff_0_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- thread_result_buff_0_0_ce0 assign process. --
    thread_result_buff_0_0_ce0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st28_fsm_16 = ap_CS_fsm) or (ap_ST_st27_fsm_15 = ap_CS_fsm))) then 
            thread_result_buff_0_0_ce0 <= ap_const_logic_1;
        else 
            thread_result_buff_0_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    thread_result_buff_0_0_d0 <= o_v_0_arr_0_value_fu_368_p3;

    -- thread_result_buff_0_0_we0 assign process. --
    thread_result_buff_0_0_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st27_fsm_15 = ap_CS_fsm))) then 
            thread_result_buff_0_0_we0 <= ap_const_logic_1;
        else 
            thread_result_buff_0_0_we0 <= ap_const_logic_0;
        end if; 
    end process;


    -- thread_result_buff_0_address0 assign process. --
    thread_result_buff_0_address0_assign_proc : process(ap_CS_fsm, tmp_1_reg_528, ap_reg_ppiten_pp1_it0, tmp_2_fu_433_p1)
    begin
        if ((ap_ST_st29_fsm_17 = ap_CS_fsm)) then 
            thread_result_buff_0_address0 <= tmp_1_reg_528(10 - 1 downto 0);
        elsif (((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0))) then 
            thread_result_buff_0_address0 <= tmp_2_fu_433_p1(10 - 1 downto 0);
        else 
            thread_result_buff_0_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    -- thread_result_buff_0_ce0 assign process. --
    thread_result_buff_0_ce0_assign_proc : process(ap_CS_fsm, ap_reg_ppiten_pp1_it0, ap_sig_bdd_200, ap_reg_ppiten_pp1_it2)
    begin
        if ((((ap_ST_pp1_stg0_fsm_18 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp1_it0) and not((ap_sig_bdd_200 and (ap_const_logic_1 = ap_reg_ppiten_pp1_it2)))) or (ap_ST_st29_fsm_17 = ap_CS_fsm))) then 
            thread_result_buff_0_ce0 <= ap_const_logic_1;
        else 
            thread_result_buff_0_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    thread_result_buff_0_d0 <= thread_result_buff_0_0_q0;

    -- thread_result_buff_0_we0 assign process. --
    thread_result_buff_0_we0_assign_proc : process(ap_CS_fsm)
    begin
        if (((ap_ST_st29_fsm_17 = ap_CS_fsm))) then 
            thread_result_buff_0_we0 <= ap_const_logic_1;
        else 
            thread_result_buff_0_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_1_fu_397_p1 <= std_logic_vector(resize(unsigned(p_reg_272),64));
    tmp_2_fu_433_p1 <= std_logic_vector(resize(unsigned(indvar_reg_283),64));
    tmp_4_fu_328_p2 <= (grp_fu_307_p2 xor ap_const_lv1_1);
    tmp_8_fu_411_p1 <= std_logic_vector(resize(unsigned(tmp_fu_402_p4),64));
    tmp_fu_402_p4 <= thread_result_00data_reg(31 downto 2);
    tmp_i_fu_380_p1 <= std_logic_vector(resize(unsigned(p_i_reg_237),64));

    -- u_v_0_gamma_read_assign_phi_fu_253_p4 assign process. --
    u_v_0_gamma_read_assign_phi_fu_253_p4_assign_proc : process(ap_CS_fsm, u_v_0_gamma_read_assign_reg_249, exitcond_i_reg_494, ap_reg_ppiten_pp0_it1, u_v_0_arr_0_gamma_reg_503)
    begin
        if (((ap_ST_pp0_stg0_fsm_7 = ap_CS_fsm) and (ap_const_logic_1 = ap_reg_ppiten_pp0_it1) and (ap_const_lv1_0 = exitcond_i_reg_494))) then 
            u_v_0_gamma_read_assign_phi_fu_253_p4 <= u_v_0_arr_0_gamma_reg_503;
        else 
            u_v_0_gamma_read_assign_phi_fu_253_p4 <= u_v_0_gamma_read_assign_reg_249;
        end if; 
    end process;

end behav;

// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="vivado_activity_thread,hls_ip_2013_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z045ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=11196,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}" *)

module vivado_activity_thread (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        a_req_din,
        a_req_full_n,
        a_req_write,
        a_rsp_empty_n,
        a_rsp_read,
        a_address,
        a_datain,
        a_dataout,
        a_size,
        kernel_u_a_0_rfir,
        kernel_u_a_0_current_price,
        kernel_u_a_0_volatility,
        kernel_u_a_0_initial_volatility,
        kernel_u_a_0_volatility_volatility,
        kernel_u_a_0_rho,
        kernel_u_a_0_kappa,
        kernel_u_a_0_theta,
        kernel_u_a_0_correlation_matrix_0_0,
        kernel_u_a_0_correlation_matrix_0_1,
        kernel_u_a_0_correlation_matrix_1_0,
        kernel_u_a_0_correlation_matrix_1_1,
        kernel_o_a_0_second_barrier,
        kernel_o_a_0_barrier,
        kernel_o_a_0_out,
        kernel_o_a_0_down,
        kernel_o_a_0_strike_price,
        kernel_o_a_0_time_period,
        kernel_o_a_0_call,
        kernel_o_a_0_points,
        seed_0_s1,
        seed_0_s2,
        seed_0_s3,
        seed_0_offset,
        thread_result_0
);

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   a_req_din;
input   a_req_full_n;
output   a_req_write;
input   a_rsp_empty_n;
output   a_rsp_read;
output  [31:0] a_address;
input  [31:0] a_datain;
output  [31:0] a_dataout;
output  [31:0] a_size;
input  [31:0] kernel_u_a_0_rfir;
input  [31:0] kernel_u_a_0_current_price;
input  [31:0] kernel_u_a_0_volatility;
input  [31:0] kernel_u_a_0_initial_volatility;
input  [31:0] kernel_u_a_0_volatility_volatility;
input  [31:0] kernel_u_a_0_rho;
input  [31:0] kernel_u_a_0_kappa;
input  [31:0] kernel_u_a_0_theta;
input  [31:0] kernel_u_a_0_correlation_matrix_0_0;
input  [31:0] kernel_u_a_0_correlation_matrix_0_1;
input  [31:0] kernel_u_a_0_correlation_matrix_1_0;
input  [31:0] kernel_u_a_0_correlation_matrix_1_1;
input  [31:0] kernel_o_a_0_second_barrier;
input  [31:0] kernel_o_a_0_barrier;
input  [31:0] kernel_o_a_0_out;
input  [31:0] kernel_o_a_0_down;
input  [31:0] kernel_o_a_0_strike_price;
input  [31:0] kernel_o_a_0_time_period;
input  [31:0] kernel_o_a_0_call;
input  [31:0] kernel_o_a_0_points;
input  [31:0] seed_0_s1;
input  [31:0] seed_0_s2;
input  [31:0] seed_0_s3;
input  [31:0] seed_0_offset;
input  [31:0] thread_result_0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg a_req_din;
reg a_req_write;
reg   [2:0] ap_CS_fsm = 3'b000;
reg   [31:0] thread_result_00data_reg = 32'b00000000000000000000000000000000;
reg    thread_result_00vld_reg = 1'b0;
reg    thread_result_00ack_out;
reg   [7:0] indvar_reg_249;
wire    grp_vivado_kernel_loop_fu_261_ap_done;
wire   [7:0] p_1_fu_307_p2;
reg   [7:0] p_1_reg_420;
wire   [63:0] tmp_1_fu_313_p1;
reg   [63:0] tmp_1_reg_425;
wire   [0:0] exitcond_fu_301_p2;
reg   [31:0] a_addr_reg_435;
wire   [0:0] exitcond1_fu_337_p2;
reg   [0:0] exitcond1_reg_440;
reg    ap_reg_ppiten_pp0_it0 = 1'b0;
reg    ap_reg_ppiten_pp0_it1 = 1'b0;
reg   [0:0] ap_reg_ppstg_exitcond1_reg_440_pp0_it1;
reg    ap_sig_bdd_144;
reg    ap_reg_ppiten_pp0_it2 = 1'b0;
wire   [7:0] indvar_next_fu_343_p2;
wire   [0:0] isIter0_fu_354_p2;
reg   [0:0] isIter0_reg_454;
reg   [0:0] ap_reg_ppstg_isIter0_reg_454_pp0_it1;
wire   [31:0] thread_result_buff_0_q0;
reg   [31:0] thread_result_buff_0_load_reg_458;
reg   [7:0] thread_result_buff_0_address0;
reg    thread_result_buff_0_ce0;
reg    thread_result_buff_0_we0;
wire   [31:0] thread_result_buff_0_d0;
reg   [7:0] thread_result_buff_0_0_address0;
reg    thread_result_buff_0_0_ce0;
reg    thread_result_buff_0_0_we0;
wire   [31:0] thread_result_buff_0_0_d0;
wire   [31:0] thread_result_buff_0_0_q0;
wire    grp_vivado_kernel_loop_fu_261_ap_start;
wire    grp_vivado_kernel_loop_fu_261_ap_idle;
wire    grp_vivado_kernel_loop_fu_261_ap_ready;
wire   [31:0] grp_vivado_kernel_loop_fu_261_u_a_0_rfir;
wire   [31:0] grp_vivado_kernel_loop_fu_261_u_a_0_initial_volatility;
wire   [31:0] grp_vivado_kernel_loop_fu_261_u_a_0_volatility_volatility;
wire   [31:0] grp_vivado_kernel_loop_fu_261_u_a_0_current_price;
wire   [31:0] grp_vivado_kernel_loop_fu_261_u_a_0_rho;
wire   [31:0] grp_vivado_kernel_loop_fu_261_u_a_0_kappa;
wire   [31:0] grp_vivado_kernel_loop_fu_261_u_a_0_theta;
wire   [31:0] grp_vivado_kernel_loop_fu_261_seed_0_s1;
wire   [31:0] grp_vivado_kernel_loop_fu_261_seed_0_s2;
wire   [31:0] grp_vivado_kernel_loop_fu_261_seed_0_s3;
wire   [31:0] grp_vivado_kernel_loop_fu_261_o_a_0_strike_price;
wire   [31:0] grp_vivado_kernel_loop_fu_261_o_a_0_time_period;
wire   [31:0] grp_vivado_kernel_loop_fu_261_o_a_0_call;
wire   [31:0] grp_vivado_kernel_loop_fu_261_o_a_0_option_strike_price;
wire   [31:0] grp_vivado_kernel_loop_fu_261_o_a_0_option_call;
wire   [7:0] grp_vivado_kernel_loop_fu_261_result_0_address0;
wire    grp_vivado_kernel_loop_fu_261_result_0_ce0;
wire    grp_vivado_kernel_loop_fu_261_result_0_we0;
wire   [31:0] grp_vivado_kernel_loop_fu_261_result_0_d0;
reg   [7:0] p_reg_238;
reg    grp_vivado_kernel_loop_fu_261_ap_start_ap_start_reg = 1'b0;
wire   [63:0] tmp_2_fu_349_p1;
wire   [63:0] tmp_s_fu_327_p1;
wire   [29:0] tmp_fu_318_p4;
reg   [2:0] ap_NS_fsm;
parameter    ap_const_logic_1 = 1'b1;
parameter    ap_const_logic_0 = 1'b0;
parameter    ap_ST_st1_fsm_0 = 3'b000;
parameter    ap_ST_st2_fsm_1 = 3'b1;
parameter    ap_ST_st3_fsm_2 = 3'b10;
parameter    ap_ST_st4_fsm_3 = 3'b11;
parameter    ap_ST_pp0_stg0_fsm_4 = 3'b100;
parameter    ap_ST_st8_fsm_5 = 3'b101;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv1_0 = 1'b0;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_C8 = 32'b11001000;
parameter    ap_const_lv8_C8 = 8'b11001000;
parameter    ap_const_lv8_1 = 8'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_true = 1'b1;


vivado_activity_thread_thread_result_buff_0 #(
    .DataWidth( 32 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
thread_result_buff_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( thread_result_buff_0_address0 ),
    .ce0( thread_result_buff_0_ce0 ),
    .we0( thread_result_buff_0_we0 ),
    .d0( thread_result_buff_0_d0 ),
    .q0( thread_result_buff_0_q0 )
);

vivado_activity_thread_thread_result_buff_0 #(
    .DataWidth( 32 ),
    .AddressRange( 200 ),
    .AddressWidth( 8 ))
thread_result_buff_0_0_U(
    .clk( ap_clk ),
    .reset( ap_rst ),
    .address0( thread_result_buff_0_0_address0 ),
    .ce0( thread_result_buff_0_0_ce0 ),
    .we0( thread_result_buff_0_0_we0 ),
    .d0( thread_result_buff_0_0_d0 ),
    .q0( thread_result_buff_0_0_q0 )
);

vivado_kernel_loop grp_vivado_kernel_loop_fu_261(
    .ap_clk( ap_clk ),
    .ap_rst( ap_rst ),
    .ap_start( grp_vivado_kernel_loop_fu_261_ap_start ),
    .ap_done( grp_vivado_kernel_loop_fu_261_ap_done ),
    .ap_idle( grp_vivado_kernel_loop_fu_261_ap_idle ),
    .ap_ready( grp_vivado_kernel_loop_fu_261_ap_ready ),
    .u_a_0_rfir( grp_vivado_kernel_loop_fu_261_u_a_0_rfir ),
    .u_a_0_initial_volatility( grp_vivado_kernel_loop_fu_261_u_a_0_initial_volatility ),
    .u_a_0_volatility_volatility( grp_vivado_kernel_loop_fu_261_u_a_0_volatility_volatility ),
    .u_a_0_current_price( grp_vivado_kernel_loop_fu_261_u_a_0_current_price ),
    .u_a_0_rho( grp_vivado_kernel_loop_fu_261_u_a_0_rho ),
    .u_a_0_kappa( grp_vivado_kernel_loop_fu_261_u_a_0_kappa ),
    .u_a_0_theta( grp_vivado_kernel_loop_fu_261_u_a_0_theta ),
    .seed_0_s1( grp_vivado_kernel_loop_fu_261_seed_0_s1 ),
    .seed_0_s2( grp_vivado_kernel_loop_fu_261_seed_0_s2 ),
    .seed_0_s3( grp_vivado_kernel_loop_fu_261_seed_0_s3 ),
    .o_a_0_strike_price( grp_vivado_kernel_loop_fu_261_o_a_0_strike_price ),
    .o_a_0_time_period( grp_vivado_kernel_loop_fu_261_o_a_0_time_period ),
    .o_a_0_call( grp_vivado_kernel_loop_fu_261_o_a_0_call ),
    .o_a_0_option_strike_price( grp_vivado_kernel_loop_fu_261_o_a_0_option_strike_price ),
    .o_a_0_option_call( grp_vivado_kernel_loop_fu_261_o_a_0_option_call ),
    .result_0_address0( grp_vivado_kernel_loop_fu_261_result_0_address0 ),
    .result_0_ce0( grp_vivado_kernel_loop_fu_261_result_0_ce0 ),
    .result_0_we0( grp_vivado_kernel_loop_fu_261_result_0_we0 ),
    .result_0_d0( grp_vivado_kernel_loop_fu_261_result_0_d0 )
);



/// the current state (ap_CS_fsm) of the state machine. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_CS_fsm
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

/// ap_reg_ppiten_pp0_it0 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it0
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond1_fu_337_p2))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_0;
        end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond_fu_301_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it0 <= ap_const_logic_1;
        end
    end
end

/// ap_reg_ppiten_pp0_it1 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it1
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond1_fu_337_p2))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_1;
        end else if ((((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond_fu_301_p2 == ap_const_lv1_0)) | ((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond1_fu_337_p2)))) begin
            ap_reg_ppiten_pp0_it1 <= ap_const_logic_0;
        end
    end
end

/// ap_reg_ppiten_pp0_it2 assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_ap_reg_ppiten_pp0_it2
    if (ap_rst == 1'b1) begin
        ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
    end else begin
        if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
            ap_reg_ppiten_pp0_it2 <= ap_reg_ppiten_pp0_it1;
        end else if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond_fu_301_p2 == ap_const_lv1_0))) begin
            ap_reg_ppiten_pp0_it2 <= ap_const_logic_0;
        end
    end
end

/// grp_vivado_kernel_loop_fu_261_ap_start_ap_start_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_grp_vivado_kernel_loop_fu_261_ap_start_ap_start_reg
    if (ap_rst == 1'b1) begin
        grp_vivado_kernel_loop_fu_261_ap_start_ap_start_reg <= ap_const_logic_0;
    end else begin
        if (((ap_ST_st1_fsm_0 == ap_CS_fsm) & ~(ap_start == ap_const_logic_0))) begin
            grp_vivado_kernel_loop_fu_261_ap_start_ap_start_reg <= ap_const_logic_1;
        end else if ((ap_const_logic_1 == grp_vivado_kernel_loop_fu_261_ap_ready)) begin
            grp_vivado_kernel_loop_fu_261_ap_start_ap_start_reg <= ap_const_logic_0;
        end
    end
end

/// thread_result_00data_reg assign process. ///
always @ (posedge ap_clk)
begin : ap_ret_thread_result_00data_reg
    if (ap_rst == 1'b1) begin
        thread_result_00data_reg <= ap_const_lv32_0;
    end else begin
        if (((~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_0 == thread_result_00vld_reg)) | (~(~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm)) & (ap_const_logic_1 == ap_const_logic_1) & (ap_const_logic_1 == thread_result_00vld_reg) & (ap_const_logic_1 == thread_result_00ack_out)))) begin
            thread_result_00data_reg <= thread_result_0;
        end
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond_fu_301_p2 == ap_const_lv1_0))) begin
        indvar_reg_249 <= ap_const_lv8_0;
    end else if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond1_fu_337_p2))) begin
        indvar_reg_249 <= indvar_next_fu_343_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        p_reg_238 <= p_1_reg_420;
    end else if (((ap_ST_st2_fsm_1 == ap_CS_fsm) & ~(ap_const_logic_0 == grp_vivado_kernel_loop_fu_261_ap_done))) begin
        p_reg_238 <= ap_const_lv8_0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & ~(exitcond_fu_301_p2 == ap_const_lv1_0))) begin
        a_addr_reg_435[0] <= tmp_s_fu_327_p1[0];
a_addr_reg_435[1] <= tmp_s_fu_327_p1[1];
a_addr_reg_435[2] <= tmp_s_fu_327_p1[2];
a_addr_reg_435[3] <= tmp_s_fu_327_p1[3];
a_addr_reg_435[4] <= tmp_s_fu_327_p1[4];
a_addr_reg_435[5] <= tmp_s_fu_327_p1[5];
a_addr_reg_435[6] <= tmp_s_fu_327_p1[6];
a_addr_reg_435[7] <= tmp_s_fu_327_p1[7];
a_addr_reg_435[8] <= tmp_s_fu_327_p1[8];
a_addr_reg_435[9] <= tmp_s_fu_327_p1[9];
a_addr_reg_435[10] <= tmp_s_fu_327_p1[10];
a_addr_reg_435[11] <= tmp_s_fu_327_p1[11];
a_addr_reg_435[12] <= tmp_s_fu_327_p1[12];
a_addr_reg_435[13] <= tmp_s_fu_327_p1[13];
a_addr_reg_435[14] <= tmp_s_fu_327_p1[14];
a_addr_reg_435[15] <= tmp_s_fu_327_p1[15];
a_addr_reg_435[16] <= tmp_s_fu_327_p1[16];
a_addr_reg_435[17] <= tmp_s_fu_327_p1[17];
a_addr_reg_435[18] <= tmp_s_fu_327_p1[18];
a_addr_reg_435[19] <= tmp_s_fu_327_p1[19];
a_addr_reg_435[20] <= tmp_s_fu_327_p1[20];
a_addr_reg_435[21] <= tmp_s_fu_327_p1[21];
a_addr_reg_435[22] <= tmp_s_fu_327_p1[22];
a_addr_reg_435[23] <= tmp_s_fu_327_p1[23];
a_addr_reg_435[24] <= tmp_s_fu_327_p1[24];
a_addr_reg_435[25] <= tmp_s_fu_327_p1[25];
a_addr_reg_435[26] <= tmp_s_fu_327_p1[26];
a_addr_reg_435[27] <= tmp_s_fu_327_p1[27];
a_addr_reg_435[28] <= tmp_s_fu_327_p1[28];
a_addr_reg_435[29] <= tmp_s_fu_327_p1[29];
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
        ap_reg_ppstg_exitcond1_reg_440_pp0_it1 <= exitcond1_reg_440;
        ap_reg_ppstg_isIter0_reg_454_pp0_it1 <= isIter0_reg_454;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)))) begin
        exitcond1_reg_440 <= exitcond1_fu_337_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond1_fu_337_p2))) begin
        isIter0_reg_454 <= isIter0_fu_354_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        p_1_reg_420 <= p_1_fu_307_p2;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it1) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & (ap_const_lv1_0 == exitcond1_reg_440))) begin
        thread_result_buff_0_load_reg_458 <= thread_result_buff_0_q0;
    end
end

/// assign process. ///
always @(posedge ap_clk)
begin
    if (((ap_ST_st3_fsm_2 == ap_CS_fsm) & (exitcond_fu_301_p2 == ap_const_lv1_0))) begin
        tmp_1_reg_425[0] <= tmp_1_fu_313_p1[0];
tmp_1_reg_425[1] <= tmp_1_fu_313_p1[1];
tmp_1_reg_425[2] <= tmp_1_fu_313_p1[2];
tmp_1_reg_425[3] <= tmp_1_fu_313_p1[3];
tmp_1_reg_425[4] <= tmp_1_fu_313_p1[4];
tmp_1_reg_425[5] <= tmp_1_fu_313_p1[5];
tmp_1_reg_425[6] <= tmp_1_fu_313_p1[6];
tmp_1_reg_425[7] <= tmp_1_fu_313_p1[7];
    end
end

/// a_req_din assign process. ///
always @ (ap_CS_fsm or ap_reg_ppstg_exitcond1_reg_440_pp0_it1 or ap_sig_bdd_144 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_isIter0_reg_454_pp0_it1)
begin
    if ((((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_reg_440_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == ap_reg_ppstg_isIter0_reg_454_pp0_it1)) | ((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_reg_440_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        a_req_din = ap_const_logic_1;
    end else begin
        a_req_din = ap_const_logic_0;
    end
end

/// a_req_write assign process. ///
always @ (ap_CS_fsm or ap_reg_ppstg_exitcond1_reg_440_pp0_it1 or ap_sig_bdd_144 or ap_reg_ppiten_pp0_it2 or ap_reg_ppstg_isIter0_reg_454_pp0_it1)
begin
    if ((((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_reg_440_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == ap_reg_ppstg_isIter0_reg_454_pp0_it1)) | ((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_reg_440_pp0_it1) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))))) begin
        a_req_write = ap_const_logic_1;
    end else begin
        a_req_write = ap_const_logic_0;
    end
end

/// ap_done assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st8_fsm_5 == ap_CS_fsm)) begin
        ap_done = ap_const_logic_1;
    end else begin
        ap_done = ap_const_logic_0;
    end
end

/// ap_idle assign process. ///
always @ (ap_start or ap_CS_fsm)
begin
    if ((~(ap_const_logic_1 == ap_start) & (ap_ST_st1_fsm_0 == ap_CS_fsm))) begin
        ap_idle = ap_const_logic_1;
    end else begin
        ap_idle = ap_const_logic_0;
    end
end

/// ap_ready assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st8_fsm_5 == ap_CS_fsm)) begin
        ap_ready = ap_const_logic_1;
    end else begin
        ap_ready = ap_const_logic_0;
    end
end

/// thread_result_00ack_out assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st8_fsm_5 == ap_CS_fsm)) begin
        thread_result_00ack_out = ap_const_logic_1;
    end else begin
        thread_result_00ack_out = ap_const_logic_0;
    end
end

/// thread_result_buff_0_0_address0 assign process. ///
always @ (ap_CS_fsm or tmp_1_fu_313_p1 or grp_vivado_kernel_loop_fu_261_result_0_address0)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        thread_result_buff_0_0_address0 = tmp_1_fu_313_p1;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        thread_result_buff_0_0_address0 = grp_vivado_kernel_loop_fu_261_result_0_address0;
    end else begin
        thread_result_buff_0_0_address0 = 'bx;
    end
end

/// thread_result_buff_0_0_ce0 assign process. ///
always @ (ap_CS_fsm or grp_vivado_kernel_loop_fu_261_result_0_ce0)
begin
    if ((ap_ST_st3_fsm_2 == ap_CS_fsm)) begin
        thread_result_buff_0_0_ce0 = ap_const_logic_1;
    end else if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        thread_result_buff_0_0_ce0 = grp_vivado_kernel_loop_fu_261_result_0_ce0;
    end else begin
        thread_result_buff_0_0_ce0 = ap_const_logic_0;
    end
end

/// thread_result_buff_0_0_we0 assign process. ///
always @ (ap_CS_fsm or grp_vivado_kernel_loop_fu_261_result_0_we0)
begin
    if ((ap_ST_st2_fsm_1 == ap_CS_fsm)) begin
        thread_result_buff_0_0_we0 = grp_vivado_kernel_loop_fu_261_result_0_we0;
    end else begin
        thread_result_buff_0_0_we0 = ap_const_logic_0;
    end
end

/// thread_result_buff_0_address0 assign process. ///
always @ (ap_CS_fsm or tmp_1_reg_425 or ap_reg_ppiten_pp0_it0 or tmp_2_fu_349_p1)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        thread_result_buff_0_address0 = tmp_1_reg_425;
    end else if (((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0))) begin
        thread_result_buff_0_address0 = tmp_2_fu_349_p1;
    end else begin
        thread_result_buff_0_address0 = 'bx;
    end
end

/// thread_result_buff_0_ce0 assign process. ///
always @ (ap_CS_fsm or ap_reg_ppiten_pp0_it0 or ap_sig_bdd_144 or ap_reg_ppiten_pp0_it2)
begin
    if ((((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2))) | (ap_ST_st4_fsm_3 == ap_CS_fsm))) begin
        thread_result_buff_0_ce0 = ap_const_logic_1;
    end else begin
        thread_result_buff_0_ce0 = ap_const_logic_0;
    end
end

/// thread_result_buff_0_we0 assign process. ///
always @ (ap_CS_fsm)
begin
    if ((ap_ST_st4_fsm_3 == ap_CS_fsm)) begin
        thread_result_buff_0_we0 = ap_const_logic_1;
    end else begin
        thread_result_buff_0_we0 = ap_const_logic_0;
    end
end
always @ (ap_start or ap_CS_fsm or grp_vivado_kernel_loop_fu_261_ap_done or exitcond_fu_301_p2 or exitcond1_fu_337_p2 or ap_reg_ppiten_pp0_it0 or ap_reg_ppiten_pp0_it1 or ap_sig_bdd_144 or ap_reg_ppiten_pp0_it2)
begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : 
            if (~(ap_start == ap_const_logic_0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        ap_ST_st2_fsm_1 : 
            if (~(ap_const_logic_0 == grp_vivado_kernel_loop_fu_261_ap_done)) begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end else begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end
        ap_ST_st3_fsm_2 : 
            if (~(exitcond_fu_301_p2 == ap_const_lv1_0)) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        ap_ST_st4_fsm_3 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
        ap_ST_pp0_stg0_fsm_4 : 
            if ((~((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) & ~((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond1_fu_337_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            end else if ((((ap_ST_pp0_stg0_fsm_4 == ap_CS_fsm) & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)) | ((ap_const_logic_1 == ap_reg_ppiten_pp0_it0) & ~(ap_sig_bdd_144 & (ap_const_logic_1 == ap_reg_ppiten_pp0_it2)) & ~(ap_const_lv1_0 == exitcond1_fu_337_p2) & ~(ap_const_logic_1 == ap_reg_ppiten_pp0_it1)))) begin
                ap_NS_fsm = ap_ST_st8_fsm_5;
            end else begin
                ap_NS_fsm = ap_ST_pp0_stg0_fsm_4;
            end
        ap_ST_st8_fsm_5 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
        default : 
            ap_NS_fsm = 'bx;
    endcase
end
assign a_address = a_addr_reg_435;
assign a_dataout = thread_result_buff_0_load_reg_458;
assign a_rsp_read = ap_const_logic_0;
assign a_size = ap_const_lv32_C8;

/// ap_sig_bdd_144 assign process. ///
always @ (a_req_full_n or ap_reg_ppstg_exitcond1_reg_440_pp0_it1)
begin
    ap_sig_bdd_144 = ((a_req_full_n == ap_const_logic_0) & (ap_const_lv1_0 == ap_reg_ppstg_exitcond1_reg_440_pp0_it1));
end
assign exitcond1_fu_337_p2 = (indvar_reg_249 == ap_const_lv8_C8? 1'b1: 1'b0);
assign exitcond_fu_301_p2 = (p_reg_238 == ap_const_lv8_C8? 1'b1: 1'b0);
assign grp_vivado_kernel_loop_fu_261_ap_start = grp_vivado_kernel_loop_fu_261_ap_start_ap_start_reg;
assign grp_vivado_kernel_loop_fu_261_o_a_0_call = kernel_o_a_0_call;
assign grp_vivado_kernel_loop_fu_261_o_a_0_option_call = kernel_o_a_0_call;
assign grp_vivado_kernel_loop_fu_261_o_a_0_option_strike_price = kernel_o_a_0_strike_price;
assign grp_vivado_kernel_loop_fu_261_o_a_0_strike_price = kernel_o_a_0_strike_price;
assign grp_vivado_kernel_loop_fu_261_o_a_0_time_period = kernel_o_a_0_time_period;
assign grp_vivado_kernel_loop_fu_261_seed_0_s1 = seed_0_s1;
assign grp_vivado_kernel_loop_fu_261_seed_0_s2 = seed_0_s2;
assign grp_vivado_kernel_loop_fu_261_seed_0_s3 = seed_0_s3;
assign grp_vivado_kernel_loop_fu_261_u_a_0_current_price = kernel_u_a_0_current_price;
assign grp_vivado_kernel_loop_fu_261_u_a_0_initial_volatility = kernel_u_a_0_initial_volatility;
assign grp_vivado_kernel_loop_fu_261_u_a_0_kappa = kernel_u_a_0_kappa;
assign grp_vivado_kernel_loop_fu_261_u_a_0_rfir = kernel_u_a_0_rfir;
assign grp_vivado_kernel_loop_fu_261_u_a_0_rho = kernel_u_a_0_rho;
assign grp_vivado_kernel_loop_fu_261_u_a_0_theta = kernel_u_a_0_theta;
assign grp_vivado_kernel_loop_fu_261_u_a_0_volatility_volatility = kernel_u_a_0_volatility_volatility;
assign indvar_next_fu_343_p2 = (indvar_reg_249 + ap_const_lv8_1);
assign isIter0_fu_354_p2 = (indvar_reg_249 == ap_const_lv8_0? 1'b1: 1'b0);
assign p_1_fu_307_p2 = (p_reg_238 + ap_const_lv8_1);
assign thread_result_buff_0_0_d0 = grp_vivado_kernel_loop_fu_261_result_0_d0;
assign thread_result_buff_0_d0 = thread_result_buff_0_0_q0;
assign tmp_1_fu_313_p1 = $unsigned(p_reg_238);
assign tmp_2_fu_349_p1 = $unsigned(indvar_reg_249);
assign tmp_fu_318_p4 = {{thread_result_00data_reg[ap_const_lv32_1F : ap_const_lv32_2]}};
assign tmp_s_fu_327_p1 = $unsigned(tmp_fu_318_p4);
always @ (posedge ap_clk)
begin
    thread_result_00vld_reg <= 1'b0;
    tmp_1_reg_425[63:8] <= 56'b00000000000000000000000000000000000000000000000000000000;
    a_addr_reg_435[31:30] <= 2'b00;
end



endmodule //vivado_activity_thread


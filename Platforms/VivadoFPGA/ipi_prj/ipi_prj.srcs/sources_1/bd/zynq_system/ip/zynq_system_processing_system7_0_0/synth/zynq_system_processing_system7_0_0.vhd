-- (c) Copyright 1995-2014 Xilinx, Inc. All rights reserved.
-- 
-- This file contains confidential and proprietary information
-- of Xilinx, Inc. and is protected under U.S. and
-- international copyright and other intellectual property
-- laws.
-- 
-- DISCLAIMER
-- This disclaimer is not a license and does not grant any
-- rights to the materials distributed herewith. Except as
-- otherwise provided in a valid license issued to you by
-- Xilinx, and to the maximum extent permitted by applicable
-- law: (1) THESE MATERIALS ARE MADE AVAILABLE "AS IS" AND
-- WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL WARRANTIES
-- AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY, INCLUDING
-- BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY, NON-
-- INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-- (2) Xilinx shall not be liable (whether in contract or tort,
-- including negligence, or under any other theory of
-- liability) for any loss or damage of any kind or nature
-- related to, arising under or in connection with these
-- materials, including for any direct, or any indirect,
-- special, incidental, or consequential loss or damage
-- (including loss of data, profits, goodwill, or any type of
-- loss or damage suffered as a result of any action brought
-- by a third party) even if such damage or loss was
-- reasonably foreseeable or Xilinx had been advised of the
-- possibility of the same.
-- 
-- CRITICAL APPLICATIONS
-- Xilinx products are not designed or intended to be fail-
-- safe, or for use in any application requiring fail-safe
-- performance, such as life-support or safety devices or
-- systems, Class III medical devices, nuclear facilities,
-- applications related to the deployment of airbags, or any
-- other applications that could lead to death, personal
-- injury, or severe property or environmental damage
-- (individually and collectively, "Critical
-- Applications"). Customer assumes the sole risk and
-- liability of any use of Xilinx products in Critical
-- Applications, subject only to applicable laws and
-- regulations governing limitations on product liability.
-- 
-- THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS
-- PART OF THIS FILE AT ALL TIMES.
-- 
-- DO NOT MODIFY THIS FILE.

-- IP VLNV: xilinx.com:ip:processing_system7:5.3
-- IP Revision: 0

LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.numeric_std.ALL;

ENTITY zynq_system_processing_system7_0_0 IS
  PORT (
    TTC0_WAVE0_OUT : OUT STD_LOGIC;
    TTC0_WAVE1_OUT : OUT STD_LOGIC;
    TTC0_WAVE2_OUT : OUT STD_LOGIC;
    TTC0_CLK0_IN : IN STD_LOGIC;
    TTC0_CLK1_IN : IN STD_LOGIC;
    TTC0_CLK2_IN : IN STD_LOGIC;
    USB0_PORT_INDCTL : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    USB0_VBUS_PWRSELECT : OUT STD_LOGIC;
    USB0_VBUS_PWRFAULT : IN STD_LOGIC;
    M_AXI_GP0_ARVALID : OUT STD_LOGIC;
    M_AXI_GP0_AWVALID : OUT STD_LOGIC;
    M_AXI_GP0_BREADY : OUT STD_LOGIC;
    M_AXI_GP0_RREADY : OUT STD_LOGIC;
    M_AXI_GP0_WLAST : OUT STD_LOGIC;
    M_AXI_GP0_WVALID : OUT STD_LOGIC;
    M_AXI_GP0_ARID : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
    M_AXI_GP0_AWID : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
    M_AXI_GP0_WID : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
    M_AXI_GP0_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    M_AXI_GP0_ARLOCK : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    M_AXI_GP0_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    M_AXI_GP0_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    M_AXI_GP0_AWLOCK : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
    M_AXI_GP0_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    M_AXI_GP0_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    M_AXI_GP0_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    M_AXI_GP0_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    M_AXI_GP0_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    M_AXI_GP0_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    M_AXI_GP0_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M_AXI_GP0_ARLEN : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M_AXI_GP0_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M_AXI_GP0_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M_AXI_GP0_AWLEN : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M_AXI_GP0_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M_AXI_GP0_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    M_AXI_GP0_ACLK : IN STD_LOGIC;
    M_AXI_GP0_ARREADY : IN STD_LOGIC;
    M_AXI_GP0_AWREADY : IN STD_LOGIC;
    M_AXI_GP0_BVALID : IN STD_LOGIC;
    M_AXI_GP0_RLAST : IN STD_LOGIC;
    M_AXI_GP0_RVALID : IN STD_LOGIC;
    M_AXI_GP0_WREADY : IN STD_LOGIC;
    M_AXI_GP0_BID : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
    M_AXI_GP0_RID : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
    M_AXI_GP0_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    M_AXI_GP0_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    M_AXI_GP0_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
    FCLK_CLK0 : OUT STD_LOGIC;
    FCLK_RESET0_N : OUT STD_LOGIC;
    MIO : INOUT STD_LOGIC_VECTOR(53 DOWNTO 0);
    DDR_CAS_n : INOUT STD_LOGIC;
    DDR_CKE : INOUT STD_LOGIC;
    DDR_Clk_n : INOUT STD_LOGIC;
    DDR_Clk : INOUT STD_LOGIC;
    DDR_CS_n : INOUT STD_LOGIC;
    DDR_DRSTB : INOUT STD_LOGIC;
    DDR_ODT : INOUT STD_LOGIC;
    DDR_RAS_n : INOUT STD_LOGIC;
    DDR_WEB : INOUT STD_LOGIC;
    DDR_BankAddr : INOUT STD_LOGIC_VECTOR(2 DOWNTO 0);
    DDR_Addr : INOUT STD_LOGIC_VECTOR(14 DOWNTO 0);
    DDR_VRN : INOUT STD_LOGIC;
    DDR_VRP : INOUT STD_LOGIC;
    DDR_DM : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    DDR_DQ : INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
    DDR_DQS_n : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    DDR_DQS : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
    PS_SRSTB : INOUT STD_LOGIC;
    PS_CLK : INOUT STD_LOGIC;
    PS_PORB : INOUT STD_LOGIC
  );
END zynq_system_processing_system7_0_0;

ARCHITECTURE zynq_system_processing_system7_0_0_arch OF zynq_system_processing_system7_0_0 IS
  ATTRIBUTE DowngradeIPIdentifiedWarnings : string;
  ATTRIBUTE DowngradeIPIdentifiedWarnings OF zynq_system_processing_system7_0_0_arch: ARCHITECTURE IS "yes";

  COMPONENT processing_system7_v5_3_processing_system7 IS
    GENERIC (
      C_EN_EMIO_ENET0 : INTEGER;
      C_EN_EMIO_ENET1 : INTEGER;
      C_EN_EMIO_TRACE : INTEGER;
      C_INCLUDE_TRACE_BUFFER : INTEGER;
      C_TRACE_BUFFER_FIFO_SIZE : INTEGER;
      USE_TRACE_DATA_EDGE_DETECTOR : INTEGER;
      C_TRACE_BUFFER_CLOCK_DELAY : INTEGER;
      C_EMIO_GPIO_WIDTH : INTEGER;
      C_INCLUDE_ACP_TRANS_CHECK : INTEGER;
      C_USE_DEFAULT_ACP_USER_VAL : INTEGER;
      C_S_AXI_ACP_ARUSER_VAL : INTEGER;
      C_S_AXI_ACP_AWUSER_VAL : INTEGER;
      C_M_AXI_GP0_ID_WIDTH : INTEGER;
      C_M_AXI_GP0_ENABLE_STATIC_REMAP : INTEGER;
      C_M_AXI_GP1_ID_WIDTH : INTEGER;
      C_M_AXI_GP1_ENABLE_STATIC_REMAP : INTEGER;
      C_S_AXI_GP0_ID_WIDTH : INTEGER;
      C_S_AXI_GP1_ID_WIDTH : INTEGER;
      C_S_AXI_ACP_ID_WIDTH : INTEGER;
      C_S_AXI_HP0_ID_WIDTH : INTEGER;
      C_S_AXI_HP0_DATA_WIDTH : INTEGER;
      C_S_AXI_HP1_ID_WIDTH : INTEGER;
      C_S_AXI_HP1_DATA_WIDTH : INTEGER;
      C_S_AXI_HP2_ID_WIDTH : INTEGER;
      C_S_AXI_HP2_DATA_WIDTH : INTEGER;
      C_S_AXI_HP3_ID_WIDTH : INTEGER;
      C_S_AXI_HP3_DATA_WIDTH : INTEGER;
      C_M_AXI_GP0_THREAD_ID_WIDTH : INTEGER;
      C_M_AXI_GP1_THREAD_ID_WIDTH : INTEGER;
      C_NUM_F2P_INTR_INPUTS : INTEGER;
      C_DQ_WIDTH : INTEGER;
      C_DQS_WIDTH : INTEGER;
      C_DM_WIDTH : INTEGER;
      C_MIO_PRIMITIVE : INTEGER;
      C_PS7_SI_REV : STRING;
      C_FCLK_CLK0_BUF : STRING;
      C_FCLK_CLK1_BUF : STRING;
      C_FCLK_CLK2_BUF : STRING;
      C_FCLK_CLK3_BUF : STRING;
      C_PACKAGE_NAME : STRING
    );
    PORT (
      CAN0_PHY_TX : OUT STD_LOGIC;
      CAN0_PHY_RX : IN STD_LOGIC;
      CAN1_PHY_TX : OUT STD_LOGIC;
      CAN1_PHY_RX : IN STD_LOGIC;
      ENET0_GMII_TX_EN : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      ENET0_GMII_TX_ER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      ENET0_MDIO_MDC : OUT STD_LOGIC;
      ENET0_MDIO_O : OUT STD_LOGIC;
      ENET0_MDIO_T : OUT STD_LOGIC;
      ENET0_PTP_DELAY_REQ_RX : OUT STD_LOGIC;
      ENET0_PTP_DELAY_REQ_TX : OUT STD_LOGIC;
      ENET0_PTP_PDELAY_REQ_RX : OUT STD_LOGIC;
      ENET0_PTP_PDELAY_REQ_TX : OUT STD_LOGIC;
      ENET0_PTP_PDELAY_RESP_RX : OUT STD_LOGIC;
      ENET0_PTP_PDELAY_RESP_TX : OUT STD_LOGIC;
      ENET0_PTP_SYNC_FRAME_RX : OUT STD_LOGIC;
      ENET0_PTP_SYNC_FRAME_TX : OUT STD_LOGIC;
      ENET0_SOF_RX : OUT STD_LOGIC;
      ENET0_SOF_TX : OUT STD_LOGIC;
      ENET0_GMII_TXD : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      ENET0_GMII_COL : IN STD_LOGIC;
      ENET0_GMII_CRS : IN STD_LOGIC;
      ENET0_GMII_RX_CLK : IN STD_LOGIC;
      ENET0_GMII_RX_DV : IN STD_LOGIC;
      ENET0_GMII_RX_ER : IN STD_LOGIC;
      ENET0_GMII_TX_CLK : IN STD_LOGIC;
      ENET0_MDIO_I : IN STD_LOGIC;
      ENET0_EXT_INTIN : IN STD_LOGIC;
      ENET0_GMII_RXD : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      ENET1_GMII_TX_EN : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      ENET1_GMII_TX_ER : OUT STD_LOGIC_VECTOR(0 DOWNTO 0);
      ENET1_MDIO_MDC : OUT STD_LOGIC;
      ENET1_MDIO_O : OUT STD_LOGIC;
      ENET1_MDIO_T : OUT STD_LOGIC;
      ENET1_PTP_DELAY_REQ_RX : OUT STD_LOGIC;
      ENET1_PTP_DELAY_REQ_TX : OUT STD_LOGIC;
      ENET1_PTP_PDELAY_REQ_RX : OUT STD_LOGIC;
      ENET1_PTP_PDELAY_REQ_TX : OUT STD_LOGIC;
      ENET1_PTP_PDELAY_RESP_RX : OUT STD_LOGIC;
      ENET1_PTP_PDELAY_RESP_TX : OUT STD_LOGIC;
      ENET1_PTP_SYNC_FRAME_RX : OUT STD_LOGIC;
      ENET1_PTP_SYNC_FRAME_TX : OUT STD_LOGIC;
      ENET1_SOF_RX : OUT STD_LOGIC;
      ENET1_SOF_TX : OUT STD_LOGIC;
      ENET1_GMII_TXD : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      ENET1_GMII_COL : IN STD_LOGIC;
      ENET1_GMII_CRS : IN STD_LOGIC;
      ENET1_GMII_RX_CLK : IN STD_LOGIC;
      ENET1_GMII_RX_DV : IN STD_LOGIC;
      ENET1_GMII_RX_ER : IN STD_LOGIC;
      ENET1_GMII_TX_CLK : IN STD_LOGIC;
      ENET1_MDIO_I : IN STD_LOGIC;
      ENET1_EXT_INTIN : IN STD_LOGIC;
      ENET1_GMII_RXD : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      GPIO_I : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      GPIO_O : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      GPIO_T : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      I2C0_SDA_I : IN STD_LOGIC;
      I2C0_SDA_O : OUT STD_LOGIC;
      I2C0_SDA_T : OUT STD_LOGIC;
      I2C0_SCL_I : IN STD_LOGIC;
      I2C0_SCL_O : OUT STD_LOGIC;
      I2C0_SCL_T : OUT STD_LOGIC;
      I2C1_SDA_I : IN STD_LOGIC;
      I2C1_SDA_O : OUT STD_LOGIC;
      I2C1_SDA_T : OUT STD_LOGIC;
      I2C1_SCL_I : IN STD_LOGIC;
      I2C1_SCL_O : OUT STD_LOGIC;
      I2C1_SCL_T : OUT STD_LOGIC;
      PJTAG_TCK : IN STD_LOGIC;
      PJTAG_TMS : IN STD_LOGIC;
      PJTAG_TD_I : IN STD_LOGIC;
      PJTAG_TD_T : OUT STD_LOGIC;
      PJTAG_TD_O : OUT STD_LOGIC;
      SDIO0_CLK : OUT STD_LOGIC;
      SDIO0_CLK_FB : IN STD_LOGIC;
      SDIO0_CMD_O : OUT STD_LOGIC;
      SDIO0_CMD_I : IN STD_LOGIC;
      SDIO0_CMD_T : OUT STD_LOGIC;
      SDIO0_DATA_I : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      SDIO0_DATA_O : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      SDIO0_DATA_T : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      SDIO0_LED : OUT STD_LOGIC;
      SDIO0_CDN : IN STD_LOGIC;
      SDIO0_WP : IN STD_LOGIC;
      SDIO0_BUSPOW : OUT STD_LOGIC;
      SDIO0_BUSVOLT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      SDIO1_CLK : OUT STD_LOGIC;
      SDIO1_CLK_FB : IN STD_LOGIC;
      SDIO1_CMD_O : OUT STD_LOGIC;
      SDIO1_CMD_I : IN STD_LOGIC;
      SDIO1_CMD_T : OUT STD_LOGIC;
      SDIO1_DATA_I : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      SDIO1_DATA_O : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      SDIO1_DATA_T : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      SDIO1_LED : OUT STD_LOGIC;
      SDIO1_CDN : IN STD_LOGIC;
      SDIO1_WP : IN STD_LOGIC;
      SDIO1_BUSPOW : OUT STD_LOGIC;
      SDIO1_BUSVOLT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      SPI0_SCLK_I : IN STD_LOGIC;
      SPI0_SCLK_O : OUT STD_LOGIC;
      SPI0_SCLK_T : OUT STD_LOGIC;
      SPI0_MOSI_I : IN STD_LOGIC;
      SPI0_MOSI_O : OUT STD_LOGIC;
      SPI0_MOSI_T : OUT STD_LOGIC;
      SPI0_MISO_I : IN STD_LOGIC;
      SPI0_MISO_O : OUT STD_LOGIC;
      SPI0_MISO_T : OUT STD_LOGIC;
      SPI0_SS_I : IN STD_LOGIC;
      SPI0_SS_O : OUT STD_LOGIC;
      SPI0_SS1_O : OUT STD_LOGIC;
      SPI0_SS2_O : OUT STD_LOGIC;
      SPI0_SS_T : OUT STD_LOGIC;
      SPI1_SCLK_I : IN STD_LOGIC;
      SPI1_SCLK_O : OUT STD_LOGIC;
      SPI1_SCLK_T : OUT STD_LOGIC;
      SPI1_MOSI_I : IN STD_LOGIC;
      SPI1_MOSI_O : OUT STD_LOGIC;
      SPI1_MOSI_T : OUT STD_LOGIC;
      SPI1_MISO_I : IN STD_LOGIC;
      SPI1_MISO_O : OUT STD_LOGIC;
      SPI1_MISO_T : OUT STD_LOGIC;
      SPI1_SS_I : IN STD_LOGIC;
      SPI1_SS_O : OUT STD_LOGIC;
      SPI1_SS1_O : OUT STD_LOGIC;
      SPI1_SS2_O : OUT STD_LOGIC;
      SPI1_SS_T : OUT STD_LOGIC;
      UART0_DTRN : OUT STD_LOGIC;
      UART0_RTSN : OUT STD_LOGIC;
      UART0_TX : OUT STD_LOGIC;
      UART0_CTSN : IN STD_LOGIC;
      UART0_DCDN : IN STD_LOGIC;
      UART0_DSRN : IN STD_LOGIC;
      UART0_RIN : IN STD_LOGIC;
      UART0_RX : IN STD_LOGIC;
      UART1_DTRN : OUT STD_LOGIC;
      UART1_RTSN : OUT STD_LOGIC;
      UART1_TX : OUT STD_LOGIC;
      UART1_CTSN : IN STD_LOGIC;
      UART1_DCDN : IN STD_LOGIC;
      UART1_DSRN : IN STD_LOGIC;
      UART1_RIN : IN STD_LOGIC;
      UART1_RX : IN STD_LOGIC;
      TTC0_WAVE0_OUT : OUT STD_LOGIC;
      TTC0_WAVE1_OUT : OUT STD_LOGIC;
      TTC0_WAVE2_OUT : OUT STD_LOGIC;
      TTC0_CLK0_IN : IN STD_LOGIC;
      TTC0_CLK1_IN : IN STD_LOGIC;
      TTC0_CLK2_IN : IN STD_LOGIC;
      TTC1_WAVE0_OUT : OUT STD_LOGIC;
      TTC1_WAVE1_OUT : OUT STD_LOGIC;
      TTC1_WAVE2_OUT : OUT STD_LOGIC;
      TTC1_CLK0_IN : IN STD_LOGIC;
      TTC1_CLK1_IN : IN STD_LOGIC;
      TTC1_CLK2_IN : IN STD_LOGIC;
      WDT_CLK_IN : IN STD_LOGIC;
      WDT_RST_OUT : OUT STD_LOGIC;
      TRACE_CLK : IN STD_LOGIC;
      TRACE_CTL : OUT STD_LOGIC;
      TRACE_DATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      USB0_PORT_INDCTL : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      USB0_VBUS_PWRSELECT : OUT STD_LOGIC;
      USB0_VBUS_PWRFAULT : IN STD_LOGIC;
      USB1_PORT_INDCTL : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      USB1_VBUS_PWRSELECT : OUT STD_LOGIC;
      USB1_VBUS_PWRFAULT : IN STD_LOGIC;
      SRAM_INTIN : IN STD_LOGIC;
      M_AXI_GP0_ARVALID : OUT STD_LOGIC;
      M_AXI_GP0_AWVALID : OUT STD_LOGIC;
      M_AXI_GP0_BREADY : OUT STD_LOGIC;
      M_AXI_GP0_RREADY : OUT STD_LOGIC;
      M_AXI_GP0_WLAST : OUT STD_LOGIC;
      M_AXI_GP0_WVALID : OUT STD_LOGIC;
      M_AXI_GP0_ARID : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
      M_AXI_GP0_AWID : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
      M_AXI_GP0_WID : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
      M_AXI_GP0_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP0_ARLOCK : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP0_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_GP0_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP0_AWLOCK : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP0_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_GP0_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_GP0_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_GP0_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_GP0_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_GP0_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_GP0_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP0_ARLEN : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP0_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP0_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP0_AWLEN : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP0_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP0_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP0_ACLK : IN STD_LOGIC;
      M_AXI_GP0_ARREADY : IN STD_LOGIC;
      M_AXI_GP0_AWREADY : IN STD_LOGIC;
      M_AXI_GP0_BVALID : IN STD_LOGIC;
      M_AXI_GP0_RLAST : IN STD_LOGIC;
      M_AXI_GP0_RVALID : IN STD_LOGIC;
      M_AXI_GP0_WREADY : IN STD_LOGIC;
      M_AXI_GP0_BID : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
      M_AXI_GP0_RID : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
      M_AXI_GP0_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP0_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP0_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_GP1_ARVALID : OUT STD_LOGIC;
      M_AXI_GP1_AWVALID : OUT STD_LOGIC;
      M_AXI_GP1_BREADY : OUT STD_LOGIC;
      M_AXI_GP1_RREADY : OUT STD_LOGIC;
      M_AXI_GP1_WLAST : OUT STD_LOGIC;
      M_AXI_GP1_WVALID : OUT STD_LOGIC;
      M_AXI_GP1_ARID : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
      M_AXI_GP1_AWID : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
      M_AXI_GP1_WID : OUT STD_LOGIC_VECTOR(11 DOWNTO 0);
      M_AXI_GP1_ARBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP1_ARLOCK : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP1_ARSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_GP1_AWBURST : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP1_AWLOCK : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP1_AWSIZE : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_GP1_ARPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_GP1_AWPROT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      M_AXI_GP1_ARADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_GP1_AWADDR : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_GP1_WDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      M_AXI_GP1_ARCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP1_ARLEN : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP1_ARQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP1_AWCACHE : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP1_AWLEN : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP1_AWQOS : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP1_WSTRB : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      M_AXI_GP1_ACLK : IN STD_LOGIC;
      M_AXI_GP1_ARREADY : IN STD_LOGIC;
      M_AXI_GP1_AWREADY : IN STD_LOGIC;
      M_AXI_GP1_BVALID : IN STD_LOGIC;
      M_AXI_GP1_RLAST : IN STD_LOGIC;
      M_AXI_GP1_RVALID : IN STD_LOGIC;
      M_AXI_GP1_WREADY : IN STD_LOGIC;
      M_AXI_GP1_BID : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
      M_AXI_GP1_RID : IN STD_LOGIC_VECTOR(11 DOWNTO 0);
      M_AXI_GP1_BRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP1_RRESP : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      M_AXI_GP1_RDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_GP0_ARREADY : OUT STD_LOGIC;
      S_AXI_GP0_AWREADY : OUT STD_LOGIC;
      S_AXI_GP0_BVALID : OUT STD_LOGIC;
      S_AXI_GP0_RLAST : OUT STD_LOGIC;
      S_AXI_GP0_RVALID : OUT STD_LOGIC;
      S_AXI_GP0_WREADY : OUT STD_LOGIC;
      S_AXI_GP0_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP0_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP0_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_GP0_BID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_GP0_RID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_GP0_ACLK : IN STD_LOGIC;
      S_AXI_GP0_ARVALID : IN STD_LOGIC;
      S_AXI_GP0_AWVALID : IN STD_LOGIC;
      S_AXI_GP0_BREADY : IN STD_LOGIC;
      S_AXI_GP0_RREADY : IN STD_LOGIC;
      S_AXI_GP0_WLAST : IN STD_LOGIC;
      S_AXI_GP0_WVALID : IN STD_LOGIC;
      S_AXI_GP0_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP0_ARLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP0_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_GP0_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP0_AWLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP0_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_GP0_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_GP0_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_GP0_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_GP0_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_GP0_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_GP0_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP0_ARLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP0_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP0_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP0_AWLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP0_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP0_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP0_ARID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_GP0_AWID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_GP0_WID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_GP1_ARREADY : OUT STD_LOGIC;
      S_AXI_GP1_AWREADY : OUT STD_LOGIC;
      S_AXI_GP1_BVALID : OUT STD_LOGIC;
      S_AXI_GP1_RLAST : OUT STD_LOGIC;
      S_AXI_GP1_RVALID : OUT STD_LOGIC;
      S_AXI_GP1_WREADY : OUT STD_LOGIC;
      S_AXI_GP1_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP1_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP1_RDATA : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_GP1_BID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_GP1_RID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_GP1_ACLK : IN STD_LOGIC;
      S_AXI_GP1_ARVALID : IN STD_LOGIC;
      S_AXI_GP1_AWVALID : IN STD_LOGIC;
      S_AXI_GP1_BREADY : IN STD_LOGIC;
      S_AXI_GP1_RREADY : IN STD_LOGIC;
      S_AXI_GP1_WLAST : IN STD_LOGIC;
      S_AXI_GP1_WVALID : IN STD_LOGIC;
      S_AXI_GP1_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP1_ARLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP1_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_GP1_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP1_AWLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_GP1_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_GP1_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_GP1_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_GP1_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_GP1_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_GP1_WDATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_GP1_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP1_ARLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP1_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP1_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP1_AWLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP1_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP1_WSTRB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_GP1_ARID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_GP1_AWID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_GP1_WID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_ACP_ARREADY : OUT STD_LOGIC;
      S_AXI_ACP_AWREADY : OUT STD_LOGIC;
      S_AXI_ACP_BVALID : OUT STD_LOGIC;
      S_AXI_ACP_RLAST : OUT STD_LOGIC;
      S_AXI_ACP_RVALID : OUT STD_LOGIC;
      S_AXI_ACP_WREADY : OUT STD_LOGIC;
      S_AXI_ACP_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_ACP_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_ACP_BID : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ACP_RID : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ACP_RDATA : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      S_AXI_ACP_ACLK : IN STD_LOGIC;
      S_AXI_ACP_ARVALID : IN STD_LOGIC;
      S_AXI_ACP_AWVALID : IN STD_LOGIC;
      S_AXI_ACP_BREADY : IN STD_LOGIC;
      S_AXI_ACP_RREADY : IN STD_LOGIC;
      S_AXI_ACP_WLAST : IN STD_LOGIC;
      S_AXI_ACP_WVALID : IN STD_LOGIC;
      S_AXI_ACP_ARID : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ACP_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ACP_AWID : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ACP_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ACP_WID : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ACP_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_ACP_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_ACP_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_ACP_ARLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_ACP_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_ACP_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_ACP_AWLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_ACP_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_ACP_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_ACP_ARLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_ACP_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ACP_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_ACP_AWLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_ACP_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_ACP_ARUSER : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
      S_AXI_ACP_AWUSER : IN STD_LOGIC_VECTOR(4 DOWNTO 0);
      S_AXI_ACP_WDATA : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      S_AXI_ACP_WSTRB : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP0_ARREADY : OUT STD_LOGIC;
      S_AXI_HP0_AWREADY : OUT STD_LOGIC;
      S_AXI_HP0_BVALID : OUT STD_LOGIC;
      S_AXI_HP0_RLAST : OUT STD_LOGIC;
      S_AXI_HP0_RVALID : OUT STD_LOGIC;
      S_AXI_HP0_WREADY : OUT STD_LOGIC;
      S_AXI_HP0_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP0_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP0_BID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP0_RID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP0_RDATA : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      S_AXI_HP0_RCOUNT : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP0_WCOUNT : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP0_RACOUNT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP0_WACOUNT : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP0_ACLK : IN STD_LOGIC;
      S_AXI_HP0_ARVALID : IN STD_LOGIC;
      S_AXI_HP0_AWVALID : IN STD_LOGIC;
      S_AXI_HP0_BREADY : IN STD_LOGIC;
      S_AXI_HP0_RDISSUECAP1_EN : IN STD_LOGIC;
      S_AXI_HP0_RREADY : IN STD_LOGIC;
      S_AXI_HP0_WLAST : IN STD_LOGIC;
      S_AXI_HP0_WRISSUECAP1_EN : IN STD_LOGIC;
      S_AXI_HP0_WVALID : IN STD_LOGIC;
      S_AXI_HP0_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP0_ARLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP0_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP0_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP0_AWLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP0_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP0_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP0_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP0_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_HP0_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_HP0_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP0_ARLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP0_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP0_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP0_AWLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP0_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP0_ARID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP0_AWID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP0_WID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP0_WDATA : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      S_AXI_HP0_WSTRB : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP1_ARREADY : OUT STD_LOGIC;
      S_AXI_HP1_AWREADY : OUT STD_LOGIC;
      S_AXI_HP1_BVALID : OUT STD_LOGIC;
      S_AXI_HP1_RLAST : OUT STD_LOGIC;
      S_AXI_HP1_RVALID : OUT STD_LOGIC;
      S_AXI_HP1_WREADY : OUT STD_LOGIC;
      S_AXI_HP1_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP1_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP1_BID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP1_RID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP1_RDATA : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      S_AXI_HP1_RCOUNT : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP1_WCOUNT : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP1_RACOUNT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP1_WACOUNT : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP1_ACLK : IN STD_LOGIC;
      S_AXI_HP1_ARVALID : IN STD_LOGIC;
      S_AXI_HP1_AWVALID : IN STD_LOGIC;
      S_AXI_HP1_BREADY : IN STD_LOGIC;
      S_AXI_HP1_RDISSUECAP1_EN : IN STD_LOGIC;
      S_AXI_HP1_RREADY : IN STD_LOGIC;
      S_AXI_HP1_WLAST : IN STD_LOGIC;
      S_AXI_HP1_WRISSUECAP1_EN : IN STD_LOGIC;
      S_AXI_HP1_WVALID : IN STD_LOGIC;
      S_AXI_HP1_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP1_ARLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP1_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP1_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP1_AWLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP1_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP1_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP1_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP1_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_HP1_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_HP1_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP1_ARLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP1_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP1_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP1_AWLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP1_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP1_ARID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP1_AWID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP1_WID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP1_WDATA : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      S_AXI_HP1_WSTRB : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP2_ARREADY : OUT STD_LOGIC;
      S_AXI_HP2_AWREADY : OUT STD_LOGIC;
      S_AXI_HP2_BVALID : OUT STD_LOGIC;
      S_AXI_HP2_RLAST : OUT STD_LOGIC;
      S_AXI_HP2_RVALID : OUT STD_LOGIC;
      S_AXI_HP2_WREADY : OUT STD_LOGIC;
      S_AXI_HP2_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP2_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP2_BID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP2_RID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP2_RDATA : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      S_AXI_HP2_RCOUNT : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP2_WCOUNT : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP2_RACOUNT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP2_WACOUNT : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP2_ACLK : IN STD_LOGIC;
      S_AXI_HP2_ARVALID : IN STD_LOGIC;
      S_AXI_HP2_AWVALID : IN STD_LOGIC;
      S_AXI_HP2_BREADY : IN STD_LOGIC;
      S_AXI_HP2_RDISSUECAP1_EN : IN STD_LOGIC;
      S_AXI_HP2_RREADY : IN STD_LOGIC;
      S_AXI_HP2_WLAST : IN STD_LOGIC;
      S_AXI_HP2_WRISSUECAP1_EN : IN STD_LOGIC;
      S_AXI_HP2_WVALID : IN STD_LOGIC;
      S_AXI_HP2_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP2_ARLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP2_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP2_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP2_AWLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP2_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP2_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP2_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP2_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_HP2_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_HP2_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP2_ARLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP2_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP2_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP2_AWLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP2_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP2_ARID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP2_AWID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP2_WID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP2_WDATA : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      S_AXI_HP2_WSTRB : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP3_ARREADY : OUT STD_LOGIC;
      S_AXI_HP3_AWREADY : OUT STD_LOGIC;
      S_AXI_HP3_BVALID : OUT STD_LOGIC;
      S_AXI_HP3_RLAST : OUT STD_LOGIC;
      S_AXI_HP3_RVALID : OUT STD_LOGIC;
      S_AXI_HP3_WREADY : OUT STD_LOGIC;
      S_AXI_HP3_BRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP3_RRESP : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP3_BID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP3_RID : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP3_RDATA : OUT STD_LOGIC_VECTOR(63 DOWNTO 0);
      S_AXI_HP3_RCOUNT : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP3_WCOUNT : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
      S_AXI_HP3_RACOUNT : OUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP3_WACOUNT : OUT STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP3_ACLK : IN STD_LOGIC;
      S_AXI_HP3_ARVALID : IN STD_LOGIC;
      S_AXI_HP3_AWVALID : IN STD_LOGIC;
      S_AXI_HP3_BREADY : IN STD_LOGIC;
      S_AXI_HP3_RDISSUECAP1_EN : IN STD_LOGIC;
      S_AXI_HP3_RREADY : IN STD_LOGIC;
      S_AXI_HP3_WLAST : IN STD_LOGIC;
      S_AXI_HP3_WRISSUECAP1_EN : IN STD_LOGIC;
      S_AXI_HP3_WVALID : IN STD_LOGIC;
      S_AXI_HP3_ARBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP3_ARLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP3_ARSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP3_AWBURST : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP3_AWLOCK : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      S_AXI_HP3_AWSIZE : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP3_ARPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP3_AWPROT : IN STD_LOGIC_VECTOR(2 DOWNTO 0);
      S_AXI_HP3_ARADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_HP3_AWADDR : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      S_AXI_HP3_ARCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP3_ARLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP3_ARQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP3_AWCACHE : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP3_AWLEN : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP3_AWQOS : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      S_AXI_HP3_ARID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP3_AWID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP3_WID : IN STD_LOGIC_VECTOR(5 DOWNTO 0);
      S_AXI_HP3_WDATA : IN STD_LOGIC_VECTOR(63 DOWNTO 0);
      S_AXI_HP3_WSTRB : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
      IRQ_P2F_DMAC_ABORT : OUT STD_LOGIC;
      IRQ_P2F_DMAC0 : OUT STD_LOGIC;
      IRQ_P2F_DMAC1 : OUT STD_LOGIC;
      IRQ_P2F_DMAC2 : OUT STD_LOGIC;
      IRQ_P2F_DMAC3 : OUT STD_LOGIC;
      IRQ_P2F_DMAC4 : OUT STD_LOGIC;
      IRQ_P2F_DMAC5 : OUT STD_LOGIC;
      IRQ_P2F_DMAC6 : OUT STD_LOGIC;
      IRQ_P2F_DMAC7 : OUT STD_LOGIC;
      IRQ_P2F_SMC : OUT STD_LOGIC;
      IRQ_P2F_QSPI : OUT STD_LOGIC;
      IRQ_P2F_CTI : OUT STD_LOGIC;
      IRQ_P2F_GPIO : OUT STD_LOGIC;
      IRQ_P2F_USB0 : OUT STD_LOGIC;
      IRQ_P2F_ENET0 : OUT STD_LOGIC;
      IRQ_P2F_ENET_WAKE0 : OUT STD_LOGIC;
      IRQ_P2F_SDIO0 : OUT STD_LOGIC;
      IRQ_P2F_I2C0 : OUT STD_LOGIC;
      IRQ_P2F_SPI0 : OUT STD_LOGIC;
      IRQ_P2F_UART0 : OUT STD_LOGIC;
      IRQ_P2F_CAN0 : OUT STD_LOGIC;
      IRQ_P2F_USB1 : OUT STD_LOGIC;
      IRQ_P2F_ENET1 : OUT STD_LOGIC;
      IRQ_P2F_ENET_WAKE1 : OUT STD_LOGIC;
      IRQ_P2F_SDIO1 : OUT STD_LOGIC;
      IRQ_P2F_I2C1 : OUT STD_LOGIC;
      IRQ_P2F_SPI1 : OUT STD_LOGIC;
      IRQ_P2F_UART1 : OUT STD_LOGIC;
      IRQ_P2F_CAN1 : OUT STD_LOGIC;
      IRQ_F2P : IN STD_LOGIC_VECTOR(0 DOWNTO 0);
      Core0_nFIQ : IN STD_LOGIC;
      Core0_nIRQ : IN STD_LOGIC;
      Core1_nFIQ : IN STD_LOGIC;
      Core1_nIRQ : IN STD_LOGIC;
      DMA0_DATYPE : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      DMA0_DAVALID : OUT STD_LOGIC;
      DMA0_DRREADY : OUT STD_LOGIC;
      DMA1_DATYPE : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      DMA1_DAVALID : OUT STD_LOGIC;
      DMA1_DRREADY : OUT STD_LOGIC;
      DMA2_DATYPE : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      DMA2_DAVALID : OUT STD_LOGIC;
      DMA2_DRREADY : OUT STD_LOGIC;
      DMA3_DATYPE : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      DMA3_DAVALID : OUT STD_LOGIC;
      DMA3_DRREADY : OUT STD_LOGIC;
      DMA0_ACLK : IN STD_LOGIC;
      DMA0_DAREADY : IN STD_LOGIC;
      DMA0_DRLAST : IN STD_LOGIC;
      DMA0_DRVALID : IN STD_LOGIC;
      DMA1_ACLK : IN STD_LOGIC;
      DMA1_DAREADY : IN STD_LOGIC;
      DMA1_DRLAST : IN STD_LOGIC;
      DMA1_DRVALID : IN STD_LOGIC;
      DMA2_ACLK : IN STD_LOGIC;
      DMA2_DAREADY : IN STD_LOGIC;
      DMA2_DRLAST : IN STD_LOGIC;
      DMA2_DRVALID : IN STD_LOGIC;
      DMA3_ACLK : IN STD_LOGIC;
      DMA3_DAREADY : IN STD_LOGIC;
      DMA3_DRLAST : IN STD_LOGIC;
      DMA3_DRVALID : IN STD_LOGIC;
      DMA0_DRTYPE : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      DMA1_DRTYPE : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      DMA2_DRTYPE : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      DMA3_DRTYPE : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
      FCLK_CLK0 : OUT STD_LOGIC;
      FCLK_CLK1 : OUT STD_LOGIC;
      FCLK_CLK2 : OUT STD_LOGIC;
      FCLK_CLK3 : OUT STD_LOGIC;
      FCLK_CLKTRIG0_N : IN STD_LOGIC;
      FCLK_CLKTRIG1_N : IN STD_LOGIC;
      FCLK_CLKTRIG2_N : IN STD_LOGIC;
      FCLK_CLKTRIG3_N : IN STD_LOGIC;
      FCLK_RESET0_N : OUT STD_LOGIC;
      FCLK_RESET1_N : OUT STD_LOGIC;
      FCLK_RESET2_N : OUT STD_LOGIC;
      FCLK_RESET3_N : OUT STD_LOGIC;
      FTMD_TRACEIN_DATA : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      FTMD_TRACEIN_VALID : IN STD_LOGIC;
      FTMD_TRACEIN_CLK : IN STD_LOGIC;
      FTMD_TRACEIN_ATID : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      FTMT_F2P_TRIG : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      FTMT_F2P_TRIGACK : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      FTMT_F2P_DEBUG : IN STD_LOGIC_VECTOR(31 DOWNTO 0);
      FTMT_P2F_TRIGACK : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      FTMT_P2F_TRIG : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      FTMT_P2F_DEBUG : OUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      FPGA_IDLE_N : IN STD_LOGIC;
      EVENT_EVENTO : OUT STD_LOGIC;
      EVENT_STANDBYWFE : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      EVENT_STANDBYWFI : OUT STD_LOGIC_VECTOR(1 DOWNTO 0);
      EVENT_EVENTI : IN STD_LOGIC;
      DDR_ARB : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
      MIO : INOUT STD_LOGIC_VECTOR(53 DOWNTO 0);
      DDR_CAS_n : INOUT STD_LOGIC;
      DDR_CKE : INOUT STD_LOGIC;
      DDR_Clk_n : INOUT STD_LOGIC;
      DDR_Clk : INOUT STD_LOGIC;
      DDR_CS_n : INOUT STD_LOGIC;
      DDR_DRSTB : INOUT STD_LOGIC;
      DDR_ODT : INOUT STD_LOGIC;
      DDR_RAS_n : INOUT STD_LOGIC;
      DDR_WEB : INOUT STD_LOGIC;
      DDR_BankAddr : INOUT STD_LOGIC_VECTOR(2 DOWNTO 0);
      DDR_Addr : INOUT STD_LOGIC_VECTOR(14 DOWNTO 0);
      DDR_VRN : INOUT STD_LOGIC;
      DDR_VRP : INOUT STD_LOGIC;
      DDR_DM : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      DDR_DQ : INOUT STD_LOGIC_VECTOR(31 DOWNTO 0);
      DDR_DQS_n : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      DDR_DQS : INOUT STD_LOGIC_VECTOR(3 DOWNTO 0);
      PS_SRSTB : INOUT STD_LOGIC;
      PS_CLK : INOUT STD_LOGIC;
      PS_PORB : INOUT STD_LOGIC
    );
  END COMPONENT processing_system7_v5_3_processing_system7;
  ATTRIBUTE X_CORE_INFO : STRING;
  ATTRIBUTE X_CORE_INFO OF zynq_system_processing_system7_0_0_arch: ARCHITECTURE IS "processing_system7_v5_3_processing_system7,Vivado 2013.3";
  ATTRIBUTE CHECK_LICENSE_TYPE : STRING;
  ATTRIBUTE CHECK_LICENSE_TYPE OF zynq_system_processing_system7_0_0_arch : ARCHITECTURE IS "zynq_system_processing_system7_0_0,processing_system7_v5_3_processing_system7,{}";
  ATTRIBUTE CORE_GENERATION_INFO : STRING;
  ATTRIBUTE CORE_GENERATION_INFO OF zynq_system_processing_system7_0_0_arch: ARCHITECTURE IS "zynq_system_processing_system7_0_0,processing_system7_v5_3_processing_system7,{x_ipProduct=Vivado 2013.3,x_ipVendor=xilinx.com,x_ipLibrary=ip,x_ipName=processing_system7,x_ipVersion=5.3,x_ipCoreRevision=0,x_ipLanguage=VHDL,C_EN_EMIO_ENET0=0,C_EN_EMIO_ENET1=0,C_EN_EMIO_TRACE=0,C_INCLUDE_TRACE_BUFFER=0,C_TRACE_BUFFER_FIFO_SIZE=128,USE_TRACE_DATA_EDGE_DETECTOR=0,C_TRACE_BUFFER_CLOCK_DELAY=12,C_EMIO_GPIO_WIDTH=64,C_INCLUDE_ACP_TRANS_CHECK=0,C_USE_DEFAULT_ACP_USER_VAL=0,C_S_AXI_ACP_ARUSER_VAL=31,C_S_AXI_ACP_AWUSER_VAL=31,C_M_AXI_GP0_ID_WIDTH=12,C_M_AXI_GP0_ENABLE_STATIC_REMAP=0,C_M_AXI_GP1_ID_WIDTH=12,C_M_AXI_GP1_ENABLE_STATIC_REMAP=0,C_S_AXI_GP0_ID_WIDTH=6,C_S_AXI_GP1_ID_WIDTH=6,C_S_AXI_ACP_ID_WIDTH=3,C_S_AXI_HP0_ID_WIDTH=6,C_S_AXI_HP0_DATA_WIDTH=64,C_S_AXI_HP1_ID_WIDTH=6,C_S_AXI_HP1_DATA_WIDTH=64,C_S_AXI_HP2_ID_WIDTH=6,C_S_AXI_HP2_DATA_WIDTH=64,C_S_AXI_HP3_ID_WIDTH=6,C_S_AXI_HP3_DATA_WIDTH=64,C_M_AXI_GP0_THREAD_ID_WIDTH=12,C_M_AXI_GP1_THREAD_ID_WIDTH=12,C_NUM_F2P_INTR_INPUTS=1,C_DQ_WIDTH=32,C_DQS_WIDTH=4,C_DM_WIDTH=4,C_MIO_PRIMITIVE=54,C_PS7_SI_REV=PRODUCTION,C_FCLK_CLK0_BUF=true,C_FCLK_CLK1_BUF=false,C_FCLK_CLK2_BUF=false,C_FCLK_CLK3_BUF=false,C_PACKAGE_NAME=clg484}";
  ATTRIBUTE X_INTERFACE_INFO : STRING;
  ATTRIBUTE X_INTERFACE_INFO OF USB0_PORT_INDCTL: SIGNAL IS "xilinx.com:display_processing_system7:usbctrl:1.0 USBIND_0 PORT_INDCTL";
  ATTRIBUTE X_INTERFACE_INFO OF USB0_VBUS_PWRSELECT: SIGNAL IS "xilinx.com:display_processing_system7:usbctrl:1.0 USBIND_0 VBUS_PWRSELECT";
  ATTRIBUTE X_INTERFACE_INFO OF USB0_VBUS_PWRFAULT: SIGNAL IS "xilinx.com:display_processing_system7:usbctrl:1.0 USBIND_0 VBUS_PWRFAULT";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARVALID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWVALID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_BREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 BREADY";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_RREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 RREADY";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_WLAST: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 WLAST";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_WVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 WVALID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_WID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 WID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARBURST: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARBURST";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARLOCK: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARLOCK";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARSIZE: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARSIZE";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWBURST: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWBURST";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWLOCK: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWLOCK";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWSIZE: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWSIZE";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARPROT: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARPROT";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWPROT: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWPROT";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARADDR";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWADDR: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWADDR";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_WDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 WDATA";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARCACHE: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARCACHE";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARLEN: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARLEN";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARQOS: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARQOS";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWCACHE: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWCACHE";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWLEN: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWLEN";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWQOS: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWQOS";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_WSTRB: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 WSTRB";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ACLK: SIGNAL IS "xilinx.com:signal:clock:1.0 M_AXI_GP0_ACLK CLK";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_ARREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 ARREADY";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_AWREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 AWREADY";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_BVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 BVALID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_RLAST: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 RLAST";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_RVALID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 RVALID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_WREADY: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 WREADY";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_BID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 BID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_RID: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 RID";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_BRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 BRESP";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_RRESP: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 RRESP";
  ATTRIBUTE X_INTERFACE_INFO OF M_AXI_GP0_RDATA: SIGNAL IS "xilinx.com:interface:aximm:1.0 M_AXI_GP0 RDATA";
  ATTRIBUTE X_INTERFACE_INFO OF FCLK_CLK0: SIGNAL IS "xilinx.com:signal:clock:1.0 FCLK_CLK0 CLK";
  ATTRIBUTE X_INTERFACE_INFO OF FCLK_RESET0_N: SIGNAL IS "xilinx.com:signal:reset:1.0 FCLK_RESET0_N RST";
  ATTRIBUTE X_INTERFACE_INFO OF MIO: SIGNAL IS "xilinx.com:display_processing_system7:fixedio:1.0 FIXED_IO MIO";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_CAS_n: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR CAS_N";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_CKE: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR CKE";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_Clk_n: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR CK_N";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_Clk: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR CK_P";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_CS_n: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR CS_N";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_DRSTB: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR RESET_N";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_ODT: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR ODT";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_RAS_n: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR RAS_N";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_WEB: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR WE_N";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_BankAddr: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR BA";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_Addr: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR ADDR";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_VRN: SIGNAL IS "xilinx.com:display_processing_system7:fixedio:1.0 FIXED_IO DDR_VRN";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_VRP: SIGNAL IS "xilinx.com:display_processing_system7:fixedio:1.0 FIXED_IO DDR_VRP";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_DM: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR DM";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_DQ: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR DQ";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_DQS_n: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR DQS_N";
  ATTRIBUTE X_INTERFACE_INFO OF DDR_DQS: SIGNAL IS "xilinx.com:interface:ddrx:1.0 DDR DQS_P";
  ATTRIBUTE X_INTERFACE_INFO OF PS_SRSTB: SIGNAL IS "xilinx.com:display_processing_system7:fixedio:1.0 FIXED_IO PS_SRSTB";
  ATTRIBUTE X_INTERFACE_INFO OF PS_CLK: SIGNAL IS "xilinx.com:display_processing_system7:fixedio:1.0 FIXED_IO PS_CLK";
  ATTRIBUTE X_INTERFACE_INFO OF PS_PORB: SIGNAL IS "xilinx.com:display_processing_system7:fixedio:1.0 FIXED_IO PS_PORB";
BEGIN
  U0 : processing_system7_v5_3_processing_system7
    GENERIC MAP (
      C_EN_EMIO_ENET0 => 0,
      C_EN_EMIO_ENET1 => 0,
      C_EN_EMIO_TRACE => 0,
      C_INCLUDE_TRACE_BUFFER => 0,
      C_TRACE_BUFFER_FIFO_SIZE => 128,
      USE_TRACE_DATA_EDGE_DETECTOR => 0,
      C_TRACE_BUFFER_CLOCK_DELAY => 12,
      C_EMIO_GPIO_WIDTH => 64,
      C_INCLUDE_ACP_TRANS_CHECK => 0,
      C_USE_DEFAULT_ACP_USER_VAL => 0,
      C_S_AXI_ACP_ARUSER_VAL => 31,
      C_S_AXI_ACP_AWUSER_VAL => 31,
      C_M_AXI_GP0_ID_WIDTH => 12,
      C_M_AXI_GP0_ENABLE_STATIC_REMAP => 0,
      C_M_AXI_GP1_ID_WIDTH => 12,
      C_M_AXI_GP1_ENABLE_STATIC_REMAP => 0,
      C_S_AXI_GP0_ID_WIDTH => 6,
      C_S_AXI_GP1_ID_WIDTH => 6,
      C_S_AXI_ACP_ID_WIDTH => 3,
      C_S_AXI_HP0_ID_WIDTH => 6,
      C_S_AXI_HP0_DATA_WIDTH => 64,
      C_S_AXI_HP1_ID_WIDTH => 6,
      C_S_AXI_HP1_DATA_WIDTH => 64,
      C_S_AXI_HP2_ID_WIDTH => 6,
      C_S_AXI_HP2_DATA_WIDTH => 64,
      C_S_AXI_HP3_ID_WIDTH => 6,
      C_S_AXI_HP3_DATA_WIDTH => 64,
      C_M_AXI_GP0_THREAD_ID_WIDTH => 12,
      C_M_AXI_GP1_THREAD_ID_WIDTH => 12,
      C_NUM_F2P_INTR_INPUTS => 1,
      C_DQ_WIDTH => 32,
      C_DQS_WIDTH => 4,
      C_DM_WIDTH => 4,
      C_MIO_PRIMITIVE => 54,
      C_PS7_SI_REV => "PRODUCTION",
      C_FCLK_CLK0_BUF => "true",
      C_FCLK_CLK1_BUF => "false",
      C_FCLK_CLK2_BUF => "false",
      C_FCLK_CLK3_BUF => "false",
      C_PACKAGE_NAME => "clg484"
    )
    PORT MAP (
      CAN0_PHY_RX => '0',
      CAN1_PHY_RX => '0',
      ENET0_GMII_COL => '0',
      ENET0_GMII_CRS => '0',
      ENET0_GMII_RX_CLK => '0',
      ENET0_GMII_RX_DV => '0',
      ENET0_GMII_RX_ER => '0',
      ENET0_GMII_TX_CLK => '0',
      ENET0_MDIO_I => '0',
      ENET0_EXT_INTIN => '0',
      ENET0_GMII_RXD => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      ENET1_GMII_COL => '0',
      ENET1_GMII_CRS => '0',
      ENET1_GMII_RX_CLK => '0',
      ENET1_GMII_RX_DV => '0',
      ENET1_GMII_RX_ER => '0',
      ENET1_GMII_TX_CLK => '0',
      ENET1_MDIO_I => '0',
      ENET1_EXT_INTIN => '0',
      ENET1_GMII_RXD => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      GPIO_I => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 64)),
      I2C0_SDA_I => '0',
      I2C0_SCL_I => '0',
      I2C1_SDA_I => '0',
      I2C1_SCL_I => '0',
      PJTAG_TCK => '0',
      PJTAG_TMS => '0',
      PJTAG_TD_I => '0',
      SDIO0_CLK_FB => '0',
      SDIO0_CMD_I => '0',
      SDIO0_DATA_I => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      SDIO0_CDN => '0',
      SDIO0_WP => '0',
      SDIO1_CLK_FB => '0',
      SDIO1_CMD_I => '0',
      SDIO1_DATA_I => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      SDIO1_CDN => '0',
      SDIO1_WP => '0',
      SPI0_SCLK_I => '0',
      SPI0_MOSI_I => '0',
      SPI0_MISO_I => '0',
      SPI0_SS_I => '0',
      SPI1_SCLK_I => '0',
      SPI1_MOSI_I => '0',
      SPI1_MISO_I => '0',
      SPI1_SS_I => '0',
      UART0_CTSN => '0',
      UART0_DCDN => '0',
      UART0_DSRN => '0',
      UART0_RIN => '0',
      UART0_RX => '0',
      UART1_CTSN => '0',
      UART1_DCDN => '0',
      UART1_DSRN => '0',
      UART1_RIN => '0',
      UART1_RX => '0',
      TTC0_WAVE0_OUT => TTC0_WAVE0_OUT,
      TTC0_WAVE1_OUT => TTC0_WAVE1_OUT,
      TTC0_WAVE2_OUT => TTC0_WAVE2_OUT,
      TTC0_CLK0_IN => TTC0_CLK0_IN,
      TTC0_CLK1_IN => TTC0_CLK1_IN,
      TTC0_CLK2_IN => TTC0_CLK2_IN,
      TTC1_CLK0_IN => '0',
      TTC1_CLK1_IN => '0',
      TTC1_CLK2_IN => '0',
      WDT_CLK_IN => '0',
      TRACE_CLK => '0',
      USB0_PORT_INDCTL => USB0_PORT_INDCTL,
      USB0_VBUS_PWRSELECT => USB0_VBUS_PWRSELECT,
      USB0_VBUS_PWRFAULT => USB0_VBUS_PWRFAULT,
      USB1_VBUS_PWRFAULT => '0',
      SRAM_INTIN => '0',
      M_AXI_GP0_ARVALID => M_AXI_GP0_ARVALID,
      M_AXI_GP0_AWVALID => M_AXI_GP0_AWVALID,
      M_AXI_GP0_BREADY => M_AXI_GP0_BREADY,
      M_AXI_GP0_RREADY => M_AXI_GP0_RREADY,
      M_AXI_GP0_WLAST => M_AXI_GP0_WLAST,
      M_AXI_GP0_WVALID => M_AXI_GP0_WVALID,
      M_AXI_GP0_ARID => M_AXI_GP0_ARID,
      M_AXI_GP0_AWID => M_AXI_GP0_AWID,
      M_AXI_GP0_WID => M_AXI_GP0_WID,
      M_AXI_GP0_ARBURST => M_AXI_GP0_ARBURST,
      M_AXI_GP0_ARLOCK => M_AXI_GP0_ARLOCK,
      M_AXI_GP0_ARSIZE => M_AXI_GP0_ARSIZE,
      M_AXI_GP0_AWBURST => M_AXI_GP0_AWBURST,
      M_AXI_GP0_AWLOCK => M_AXI_GP0_AWLOCK,
      M_AXI_GP0_AWSIZE => M_AXI_GP0_AWSIZE,
      M_AXI_GP0_ARPROT => M_AXI_GP0_ARPROT,
      M_AXI_GP0_AWPROT => M_AXI_GP0_AWPROT,
      M_AXI_GP0_ARADDR => M_AXI_GP0_ARADDR,
      M_AXI_GP0_AWADDR => M_AXI_GP0_AWADDR,
      M_AXI_GP0_WDATA => M_AXI_GP0_WDATA,
      M_AXI_GP0_ARCACHE => M_AXI_GP0_ARCACHE,
      M_AXI_GP0_ARLEN => M_AXI_GP0_ARLEN,
      M_AXI_GP0_ARQOS => M_AXI_GP0_ARQOS,
      M_AXI_GP0_AWCACHE => M_AXI_GP0_AWCACHE,
      M_AXI_GP0_AWLEN => M_AXI_GP0_AWLEN,
      M_AXI_GP0_AWQOS => M_AXI_GP0_AWQOS,
      M_AXI_GP0_WSTRB => M_AXI_GP0_WSTRB,
      M_AXI_GP0_ACLK => M_AXI_GP0_ACLK,
      M_AXI_GP0_ARREADY => M_AXI_GP0_ARREADY,
      M_AXI_GP0_AWREADY => M_AXI_GP0_AWREADY,
      M_AXI_GP0_BVALID => M_AXI_GP0_BVALID,
      M_AXI_GP0_RLAST => M_AXI_GP0_RLAST,
      M_AXI_GP0_RVALID => M_AXI_GP0_RVALID,
      M_AXI_GP0_WREADY => M_AXI_GP0_WREADY,
      M_AXI_GP0_BID => M_AXI_GP0_BID,
      M_AXI_GP0_RID => M_AXI_GP0_RID,
      M_AXI_GP0_BRESP => M_AXI_GP0_BRESP,
      M_AXI_GP0_RRESP => M_AXI_GP0_RRESP,
      M_AXI_GP0_RDATA => M_AXI_GP0_RDATA,
      M_AXI_GP1_ACLK => '0',
      M_AXI_GP1_ARREADY => '0',
      M_AXI_GP1_AWREADY => '0',
      M_AXI_GP1_BVALID => '0',
      M_AXI_GP1_RLAST => '0',
      M_AXI_GP1_RVALID => '0',
      M_AXI_GP1_WREADY => '0',
      M_AXI_GP1_BID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 12)),
      M_AXI_GP1_RID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 12)),
      M_AXI_GP1_BRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      M_AXI_GP1_RRESP => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      M_AXI_GP1_RDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_GP0_ACLK => '0',
      S_AXI_GP0_ARVALID => '0',
      S_AXI_GP0_AWVALID => '0',
      S_AXI_GP0_BREADY => '0',
      S_AXI_GP0_RREADY => '0',
      S_AXI_GP0_WLAST => '0',
      S_AXI_GP0_WVALID => '0',
      S_AXI_GP0_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_GP0_ARLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_GP0_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_GP0_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_GP0_AWLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_GP0_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_GP0_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_GP0_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_GP0_ARADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_GP0_AWADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_GP0_WDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_GP0_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP0_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP0_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP0_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP0_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP0_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP0_WSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP0_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_GP0_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_GP0_WID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_GP1_ACLK => '0',
      S_AXI_GP1_ARVALID => '0',
      S_AXI_GP1_AWVALID => '0',
      S_AXI_GP1_BREADY => '0',
      S_AXI_GP1_RREADY => '0',
      S_AXI_GP1_WLAST => '0',
      S_AXI_GP1_WVALID => '0',
      S_AXI_GP1_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_GP1_ARLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_GP1_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_GP1_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_GP1_AWLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_GP1_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_GP1_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_GP1_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_GP1_ARADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_GP1_AWADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_GP1_WDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_GP1_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP1_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP1_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP1_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP1_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP1_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP1_WSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_GP1_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_GP1_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_GP1_WID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_ACP_ACLK => '0',
      S_AXI_ACP_ARVALID => '0',
      S_AXI_ACP_AWVALID => '0',
      S_AXI_ACP_BREADY => '0',
      S_AXI_ACP_RREADY => '0',
      S_AXI_ACP_WLAST => '0',
      S_AXI_ACP_WVALID => '0',
      S_AXI_ACP_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_ACP_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_ACP_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_ACP_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_ACP_WID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_ACP_ARADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_ACP_AWADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_ACP_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_ACP_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_ACP_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_ACP_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_ACP_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_ACP_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_ACP_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_ACP_ARLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_ACP_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_ACP_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_ACP_AWLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_ACP_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_ACP_ARUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      S_AXI_ACP_AWUSER => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 5)),
      S_AXI_ACP_WDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 64)),
      S_AXI_ACP_WSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI_HP0_ACLK => '0',
      S_AXI_HP0_ARVALID => '0',
      S_AXI_HP0_AWVALID => '0',
      S_AXI_HP0_BREADY => '0',
      S_AXI_HP0_RDISSUECAP1_EN => '0',
      S_AXI_HP0_RREADY => '0',
      S_AXI_HP0_WLAST => '0',
      S_AXI_HP0_WRISSUECAP1_EN => '0',
      S_AXI_HP0_WVALID => '0',
      S_AXI_HP0_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP0_ARLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP0_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP0_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP0_AWLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP0_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP0_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP0_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP0_ARADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_HP0_AWADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_HP0_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP0_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP0_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP0_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP0_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP0_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP0_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP0_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP0_WID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP0_WDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 64)),
      S_AXI_HP0_WSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI_HP1_ACLK => '0',
      S_AXI_HP1_ARVALID => '0',
      S_AXI_HP1_AWVALID => '0',
      S_AXI_HP1_BREADY => '0',
      S_AXI_HP1_RDISSUECAP1_EN => '0',
      S_AXI_HP1_RREADY => '0',
      S_AXI_HP1_WLAST => '0',
      S_AXI_HP1_WRISSUECAP1_EN => '0',
      S_AXI_HP1_WVALID => '0',
      S_AXI_HP1_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP1_ARLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP1_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP1_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP1_AWLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP1_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP1_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP1_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP1_ARADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_HP1_AWADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_HP1_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP1_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP1_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP1_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP1_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP1_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP1_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP1_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP1_WID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP1_WDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 64)),
      S_AXI_HP1_WSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI_HP2_ACLK => '0',
      S_AXI_HP2_ARVALID => '0',
      S_AXI_HP2_AWVALID => '0',
      S_AXI_HP2_BREADY => '0',
      S_AXI_HP2_RDISSUECAP1_EN => '0',
      S_AXI_HP2_RREADY => '0',
      S_AXI_HP2_WLAST => '0',
      S_AXI_HP2_WRISSUECAP1_EN => '0',
      S_AXI_HP2_WVALID => '0',
      S_AXI_HP2_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP2_ARLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP2_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP2_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP2_AWLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP2_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP2_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP2_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP2_ARADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_HP2_AWADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_HP2_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP2_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP2_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP2_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP2_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP2_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP2_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP2_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP2_WID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP2_WDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 64)),
      S_AXI_HP2_WSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      S_AXI_HP3_ACLK => '0',
      S_AXI_HP3_ARVALID => '0',
      S_AXI_HP3_AWVALID => '0',
      S_AXI_HP3_BREADY => '0',
      S_AXI_HP3_RDISSUECAP1_EN => '0',
      S_AXI_HP3_RREADY => '0',
      S_AXI_HP3_WLAST => '0',
      S_AXI_HP3_WRISSUECAP1_EN => '0',
      S_AXI_HP3_WVALID => '0',
      S_AXI_HP3_ARBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP3_ARLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP3_ARSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP3_AWBURST => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP3_AWLOCK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      S_AXI_HP3_AWSIZE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP3_ARPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP3_AWPROT => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 3)),
      S_AXI_HP3_ARADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_HP3_AWADDR => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      S_AXI_HP3_ARCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP3_ARLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP3_ARQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP3_AWCACHE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP3_AWLEN => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP3_AWQOS => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      S_AXI_HP3_ARID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP3_AWID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP3_WID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 6)),
      S_AXI_HP3_WDATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 64)),
      S_AXI_HP3_WSTRB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 8)),
      IRQ_F2P => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 1)),
      Core0_nFIQ => '0',
      Core0_nIRQ => '0',
      Core1_nFIQ => '0',
      Core1_nIRQ => '0',
      DMA0_ACLK => '0',
      DMA0_DAREADY => '0',
      DMA0_DRLAST => '0',
      DMA0_DRVALID => '0',
      DMA1_ACLK => '0',
      DMA1_DAREADY => '0',
      DMA1_DRLAST => '0',
      DMA1_DRVALID => '0',
      DMA2_ACLK => '0',
      DMA2_DAREADY => '0',
      DMA2_DRLAST => '0',
      DMA2_DRVALID => '0',
      DMA3_ACLK => '0',
      DMA3_DAREADY => '0',
      DMA3_DRLAST => '0',
      DMA3_DRVALID => '0',
      DMA0_DRTYPE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      DMA1_DRTYPE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      DMA2_DRTYPE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      DMA3_DRTYPE => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 2)),
      FCLK_CLK0 => FCLK_CLK0,
      FCLK_CLKTRIG0_N => '0',
      FCLK_CLKTRIG1_N => '0',
      FCLK_CLKTRIG2_N => '0',
      FCLK_CLKTRIG3_N => '0',
      FCLK_RESET0_N => FCLK_RESET0_N,
      FTMD_TRACEIN_DATA => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      FTMD_TRACEIN_VALID => '0',
      FTMD_TRACEIN_CLK => '0',
      FTMD_TRACEIN_ATID => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      FTMT_F2P_TRIG => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      FTMT_F2P_DEBUG => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 32)),
      FTMT_P2F_TRIGACK => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      FPGA_IDLE_N => '0',
      EVENT_EVENTI => '0',
      DDR_ARB => STD_LOGIC_VECTOR(TO_UNSIGNED(0, 4)),
      MIO => MIO,
      DDR_CAS_n => DDR_CAS_n,
      DDR_CKE => DDR_CKE,
      DDR_Clk_n => DDR_Clk_n,
      DDR_Clk => DDR_Clk,
      DDR_CS_n => DDR_CS_n,
      DDR_DRSTB => DDR_DRSTB,
      DDR_ODT => DDR_ODT,
      DDR_RAS_n => DDR_RAS_n,
      DDR_WEB => DDR_WEB,
      DDR_BankAddr => DDR_BankAddr,
      DDR_Addr => DDR_Addr,
      DDR_VRN => DDR_VRN,
      DDR_VRP => DDR_VRP,
      DDR_DM => DDR_DM,
      DDR_DQ => DDR_DQ,
      DDR_DQS_n => DDR_DQS_n,
      DDR_DQS => DDR_DQS,
      PS_SRSTB => PS_SRSTB,
      PS_CLK => PS_CLK,
      PS_PORB => PS_PORB
    );
END zynq_system_processing_system7_0_0_arch;
